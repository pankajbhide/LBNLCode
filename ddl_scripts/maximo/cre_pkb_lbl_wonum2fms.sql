CREATE OR REPLACE PACKAGE BODY LBL_WONUM2FMS AS

 /*****************************************************************************
 PROGRAM NAME           : LBL_WONUM2FMS

 DATE WRITTEN           : 01/01/2009

 AUTHOR                 : PANKAJ BHIDE

 PURPOSE                : PACKAGE BODY FOR INTERFACING THE DATA CREATED FROM
                          MAXIMO WORK ORDERS FOR  FMS PROJECTS

                          02/24/09 CHANGES FOR MXES
*****************************************************************************/


--****************************************************************************
-- FUNCTION TO RETURN THE GLACCOUNT OF TRUNK (ROOT) NODE OF THE WORK ORDER
--****************************************************************************
FUNCTION GET_ROOT_GLACCOUNT(ORGID_I IN WORKORDER.ORGID%TYPE,
                             SITEID_I IN WORKORDER.SITEID%TYPE,
                             WONUM_I  IN WORKORDER.WONUM%TYPE)
        RETURN MAXIMO.WORKORDER.GLACCOUNT%TYPE
   IS

   -- CURSOR TO GET THE GLACCOUNT FOR THE TRUNK (ROOT) LEVEL WORK ORDER
   CURSOR TOP_LEVEL_WO_CUR IS
   SELECT GLACCOUNT FROM MAXIMO.WORKORDER
   WHERE  ORGID=ORGID_I     -- MXES
   AND    SITEID=SITEID_I   -- MXES
   START WITH WONUM=WONUM_I
   CONNECT BY WONUM=PRIOR PARENT
   ORDER BY LEVEL DESC;

   REC_CNT_T1   NUMBER(5) :=0;
   GLACCOUNT_T  MAXIMO.WORKORDER.GLACCOUNT%TYPE :=NULL;


   BEGIN

     REC_CNT_T1 :=0;

     FOR TOP_LEVEL_WO_REC IN TOP_LEVEL_WO_CUR

       LOOP

          IF (REC_CNT_T1=0) THEN
            GLACCOUNT_T := TOP_LEVEL_WO_REC.GLACCOUNT;
            EXIT; -- INTERESTED ONLY IN THE FIRST RECORD(ORDER BY LEVEL DESC)
          END IF;

      END LOOP;

   RETURN GLACCOUNT_T;

 END; -- END FUNCTION


/**********************************************************************
 FUNCTION TO RETURN THE VALUES OF WORK ORDER APPROVAL
 THE RESULTING STRING WOULD BE ENCLOSED WITH PIPE CHARACTER
 ***********************************************************************/
 FUNCTION GET_APPR_SYNONYMS  RETURN VARCHAR2

 IS
   CURSOR LOV_CUR IS
     -- MXES
	 SELECT VALUE FROM MAXIMO.SYNONYMDOMAIN
     WHERE DOMAINID='WOSTATUS'
     AND MAXVALUE IN ('APPR','INPRG','WMATL','ASSIGNED')
     AND VALUE IS NOT NULL;


	 STATUS_STRING_O  VARCHAR2(2000) := NULL;
     RESULT_STR_T     VARCHAR2(2000) := NULL;
  BEGIN

	FOR LOV_VALUE IN LOV_CUR

	LOOP
	    IF RESULT_STR_T IS NOT NULL THEN
		   RESULT_STR_T := RESULT_STR_T ||  '|'  || LOV_VALUE.VALUE;
	    ELSE
		   RESULT_STR_T := LOV_VALUE.VALUE;
            END IF;
	END LOOP;

        STATUS_STRING_O :='|' || LTRIM(RTRIM(RESULT_STR_T)) || '|';

    RETURN STATUS_STRING_O ;
  END; -- END OF FUNCTION


/******************************************************************
 FUNCTION TO INSERT THE RECORD/S INTO THE FMS INTERFACE TABLES
 *******************************************************************/
 FUNCTION INSERT_FMS_IFACE_TABLES(
      LBNL_MX_TR_DATE_I  IN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_DATE%TYPE,
      LBNL_MX_PR_CODE_I  IN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE,
      LBNL_MX_TM_CODE_I  IN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE,
      LBNL_MX_LC_CODE_I  IN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE,
      PROJECT_ID_I       IN PS_LBNL_MX_PROJECT.PROJECT_ID%TYPE,
      LBNL_PARENT_PROJ_I IN PS_LBNL_MX_PROJECT.LBNL_PARENT_PROJ%TYPE,
      START_DT_I         IN PS_LBNL_MX_PROJECT.START_DT%TYPE,
      END_DT_I           IN PS_LBNL_MX_PROJECT.END_DT%TYPE,
      DESCR_I            IN PS_LBNL_MX_PROJECT.DESCR%TYPE,
      DESCR254_I         IN PS_LBNL_MX_PROJECT.DESCR254%TYPE,
      TEAM_MEMBER_I      IN PS_LBNL_MX_TEAM.TEAM_MEMBER%TYPE,
      LOCATION_I         IN PS_LBNL_MX_LOC.LOCATION%TYPE)

   RETURN BOOLEAN

   IS
     REC_CNT_T  NUMBER(5) :=0;
     START_DT_T PS_LBNL_MX_PROJECT.START_DT%TYPE;

   BEGIN
    --****************
    -- PROJECT TABLE
    --****************
    REC_CNT_T  :=0;

    SELECT COUNT(*) INTO  REC_CNT_T
    FROM PS_LBNL_MX_PROJECT
    WHERE TRUNC(LBNL_MX_TRANS_DATE)=LBNL_MX_TR_DATE_I
    AND   LBNL_MX_TRANS_CODE=LBNL_MX_PR_CODE_I
    AND   PROJECT_ID=PROJECT_ID_I
    AND   SYSTEM_SOURCE='MAX';

   -- ADDED BY PANKAJ ON 11/11/09
   -- DURING TESTING/TRAINING, WE FOUND A FEW WORK ORDERS WITH NULL GLACCOUNT
   -- WE THEREFORE BYPASS INSERT IF THE PARENT_PROJECT IS NULL
   -- ALSO, IF POSSIBLE, IT WILL RETRY THE TRANSMISSION

   IF (LBNL_PARENT_PROJ_I IS NULL) THEN
      RETURN FALSE;    -- IF POSSIBLE KEEP RETRY
   END IF;

   IF (REC_CNT_T=0) THEN
      INSERT INTO PS_LBNL_MX_PROJECT (LBNL_MX_TRANS_DATE,
      LBNL_MX_TRANS_CODE,
      PROJECT_ID, LBNL_PARENT_PROJ,
      START_DT,
      END_DT,
      DESCR,
      DESCR254,
      LBNL_MX_PROCESS_CD,
      SYSTEM_SOURCE) VALUES
      (LBNL_MX_TR_DATE_I,
       LBNL_MX_PR_CODE_I,
       PROJECT_ID_I,
       LBNL_PARENT_PROJ_I,
       START_DT_I,
       END_DT_I,
       DESCR_I,
       DESCR254_I,
       ' ' , --LBNL_MX_PROCESS_CD,
       'MAX');
   ELSE
       RETURN FALSE;   -- COULD NOT INSERT THE RECORD, NEED TO RETRY
   END IF;

   --***********
   -- TEAM TABLE
   --************
   -- DO NOT INSERT INFORMATION IF EITHER TEAM MEMBER IS NULL
   -- OR LBNL_MX_TM_CODE_I = C

   IF (TEAM_MEMBER_I IS NOT NULL AND LBNL_MX_TM_CODE_I !='C')
     THEN

      REC_CNT_T :=0;

      SELECT COUNT(*) INTO REC_CNT_T
      FROM PS_LBNL_MX_TEAM
      WHERE TRUNC(LBNL_MX_TRANS_DATE)=LBNL_MX_TR_DATE_I
      AND   LBNL_MX_TRANS_CODE=LBNL_MX_TM_CODE_I
      AND   PROJECT_ID=PROJECT_ID_I
      AND   TEAM_MEMBER=TEAM_MEMBER_I
      AND   SYSTEM_SOURCE='MAX';

      IF (REC_CNT_T=0) THEN
        INSERT INTO PS_LBNL_MX_TEAM (LBNL_MX_TRANS_DATE,
        LBNL_MX_TRANS_CODE,
        PROJECT_ID,
        TEAM_MEMBER,
        PROJ_ROLE,
        START_DT,
        END_DT,
        LBNL_MX_PROCESS_CD,
        SYSTEM_SOURCE) VALUES
        (LBNL_MX_TR_DATE_I,
         LBNL_MX_TM_CODE_I,
         PROJECT_ID_I,
         TEAM_MEMBER_I,
         'CNT',
         START_DT_I,
         END_DT_I,
         ' ', --LBNL_MX_PROCESS_CD,
         'MAX');
      END IF; -- REC_CNT=0

  END IF;  -- TEAM MEMBER IS NOT NULL

   --*****************
   -- LOCATION TABLE
   --**************
   -- DO NOT INSERT ANY RECORD IF EITHER LOCATION IS NULL OR
   -- LBNL_MX_LC_CODE_I=C

   IF (LOCATION_I  IS NOT NULL AND LBNL_MX_LC_CODE_I !='C')  THEN

      REC_CNT_T :=0;

      SELECT COUNT(*) INTO REC_CNT_T
      FROM PS_LBNL_MX_LOC
      WHERE TRUNC(LBNL_MX_TRANS_DATE)=LBNL_MX_TR_DATE_I
      AND   LBNL_MX_TRANS_CODE=LBNL_MX_LC_CODE_I
      AND   PROJECT_ID=PROJECT_ID_I
      AND   LOCATION=LOCATION_I
      AND   SYSTEM_SOURCE='MAX';

      --LOCATION RECORD IS NOT EFFECTIVE DATED
      --RT#60058

      IF (START_DT_I < LBNL_MX_TR_DATE_I) THEN
        START_DT_T :=LBNL_MX_TR_DATE_I;
      ELSE
        START_DT_T :=START_DT_I;
      END IF;

      IF (REC_CNT_T=0) THEN
        INSERT INTO PS_LBNL_MX_LOC (LBNL_MX_TRANS_DATE,
        LBNL_MX_TRANS_CODE,
        PROJECT_ID,
        LOCATION,
        START_DT,
        LBNL_MX_PROCESS_CD,
        SYSTEM_SOURCE) VALUES
        (LBNL_MX_TR_DATE_I,
         LBNL_MX_LC_CODE_I,
         PROJECT_ID_I,
         LOCATION_I,
         START_DT_T,
         ' ',--LBNL_MX_PROCESS_CD,
         'MAX');

      END IF;

   END IF;   -- LOCATION NOT NULL

   RETURN TRUE;

  END; -- END OF FUNCTION

/**********************************************************
 FUNCTION TO PREPARE TRANS_CODE USED IN THE INTERFACE TABLES
 ************************************************************/
 FUNCTION PREPARE_TRANS_CODE(
      TRANS_TYPE_I       VARCHAR2,
      PROJECT_ID_I       IN PS_LBNL_MX_PROJECT.PROJECT_ID%TYPE,
      PARENT_I           IN PS_LBNL_MX_PROJECT.LBNL_PARENT_PROJ%TYPE,
      TEAM_MEMBER_I      IN PS_LBNL_MX_TEAM.TEAM_MEMBER%TYPE,
      LOCATION_I         IN PS_LBNL_MX_LOC.LOCATION%TYPE)

   RETURN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE

  IS
     LBNL_MX_TR_CODE_T  PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE :='O';
     REC_CNT_T NUMBER(5) :=0;
     CHARGEABLE_T  VARCHAR2(1);

    BEGIN

     IF (TRANS_TYPE_I ='PROJECT') THEN

        -- FOR A REGULAR WORK ORDER, CHECK WHETHER THE WORK ORDER
        -- EXISTS IN PROJECT TREE

        IF (PARENT_I IS NULL) THEN

          BEGIN
            SELECT A.CHARGEABLE INTO CHARGEABLE_T
            FROM   FMSADM.PV_PROJECT@FMS A
            WHERE  A.PROJECT_ID=PROJECT_ID_I;

            IF (CHARGEABLE_T ='Y') THEN
              RETURN 'U';  -- UPDATE RECORD
            END IF;

            IF (CHARGEABLE_T !='Y') THEN
              RETURN 'C';   --- CLOSE RECORD
            END IF;

          EXCEPTION
             WHEN OTHERS THEN
                RETURN 'O';  -- OPEN RECORD
          END;

       ELSE      --IF PARENT_I IS NULL THEN  (CHILD WORK ORDER)

        BEGIN

         SELECT A.PROJECT_STATUS INTO CHARGEABLE_T
         FROM   PS_PROJECT_STATUS A
         WHERE  A.BUSINESS_UNIT='LBNL'
         AND    A.PROJECT_ID=PROJECT_ID_I
         AND    A.EFFDT =(SELECT MAX(A_ED.EFFDT) FROM PS_PROJECT_STATUS A_ED
                          WHERE A.BUSINESS_UNIT = A_ED.BUSINESS_UNIT
                          AND A.PROJECT_ID = A_ED.PROJECT_ID
                          AND A_ED.PROJECT_ID=PROJECT_ID_I
                          AND A_ED.EFFDT <= SYSDATE)
         AND A.EFFSEQ =(SELECT MAX(A_ES.EFFSEQ) FROM PS_PROJECT_STATUS A_ES
                        WHERE A.BUSINESS_UNIT = A_ES.BUSINESS_UNIT
                        AND A.PROJECT_ID = A_ES.PROJECT_ID
                        AND A_ES.PROJECT_ID=PROJECT_ID_I
                        AND A.EFFDT = A_ES.EFFDT);

         IF (CHARGEABLE_T ='C') THEN
           RETURN 'C';   -- CLOSE RECORD
         ELSE
            RETURN 'U';  -- UPDATE RECORD
         END IF; -- IF (CHARGEABLE_T ='C')

        EXCEPTION

          WHEN OTHERS THEN
            RETURN 'O';  -- OPEN RECORD
        END;

       END IF;  -- IF (PARENT_I IS NULL) THEN

     END IF; -- IF (TRANS_TYPE_I ='PROJECT') THEN

     IF (TRANS_TYPE_I ='TEAM') THEN

       SELECT COUNT(*) INTO REC_CNT_T
       FROM PS_PROJ_TEAM_SCHED
       WHERE PROJECT_ID=PROJECT_ID_I
       AND   TEAM_MEMBER=TEAM_MEMBER_I
       AND   PROJ_ROLE='CNT';

     END IF;

    IF (TRANS_TYPE_I ='LOCATION') THEN

       SELECT COUNT(*) INTO REC_CNT_T
       FROM PS_PROJ_LOCATION
       WHERE PROJECT_ID=PROJECT_ID_I
       AND   LOCATION=LOCATION_I;

    END IF;

    IF REC_CNT_T = 0 THEN
       RETURN 'O'; -- OPEN RECORD
    ELSE
       RETURN 'U'; -- UPDATE RECORD
    END IF;
 END;  -- END OF FUNCTION

/***************************************************************
 FUNCTION TO DETERMINE WHETHER TO TRANSMIT WORK ORDER RELATED
 DATA TO FMS, IF THE CORRESPONDING PROJECT IS END DATED IN FMS
*******************************************************************/
 FUNCTION IS_PROJ_ENDDT_FMS(PROJECT_ID_I IN PS_LBNL_MX_PROJECT.PROJECT_ID%TYPE)
     RETURN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE
    IS
      REC_CNT_T NUMBER(5) :=0;
    BEGIN
          -- CHECK THE PROJECT IS ALREADY END DATED
          SELECT COUNT(*) INTO REC_CNT_T
          FROM PS_PROJECT_STATUS
          WHERE  BUSINESS_UNIT='LBNL'
          AND    PROJECT_ID=PROJECT_ID_I
          AND    TRUNC(END_DT) !=TRUNC(TO_DATE('12/31/2999','MM/DD/YYYY'));

          IF (REC_CNT_T >0) THEN
            RETURN '1';
          ELSE
            RETURN '0';
          END IF;

  END; -- END FUNCTION


/*******************************************************************
 FUNCTION TO FIND OUT WHETHER PARENT IS VALID FOR THE GIVEN PASS
 *******************************************************************/
 FUNCTION IS_PARENT_VALID_PASS(
            PROJECT_ID_I  IN PS_LBNL_MX_PROJECT.PROJECT_ID%TYPE,
            PASS_ID_I     IN VARCHAR2)
   RETURN PS_LBNL_MX_PROJECT.LBNL_MX_TRANS_CODE%TYPE

   IS
   PROJECT_STATUS_T PS_PROJECT_STATUS.PROJECT_STATUS%TYPE;
   CHARGEABLE_T  VARCHAR2(1);

   BEGIN
    -- FOR PASS-1 VALIDATE FROM PROJECT TREE (PV_PROJECT)
    IF (PASS_ID_I = 'MAX2FMS-PASS1') THEN

      BEGIN
            SELECT A.CHARGEABLE INTO CHARGEABLE_T
            FROM   FMSADM.PV_PROJECT@FMS A
            WHERE  A.PROJECT_ID=PROJECT_ID_I;

            IF (CHARGEABLE_T ='Y') THEN
              RETURN '1';
            END IF;

            IF (CHARGEABLE_T !='Y') THEN
              RETURN '0';
            END IF;

          EXCEPTION
             WHEN OTHERS THEN
                RETURN '0';
       END;

    ELSE --(PASS_ID_I = 'MAX2FMS-PASS1')

    -- FOR PASS-2 VALIDATE FROM PS_PROJ_STATUS
     BEGIN
       SELECT A.PROJECT_STATUS INTO CHARGEABLE_T
         FROM   PS_PROJECT_STATUS A
         WHERE  A.BUSINESS_UNIT='LBNL'
         AND    A.PROJECT_ID=PROJECT_ID_I
         AND    A.EFFDT =(SELECT MAX(A_ED.EFFDT) FROM PS_PROJECT_STATUS A_ED
                          WHERE A.BUSINESS_UNIT = A_ED.BUSINESS_UNIT
                          AND A.PROJECT_ID = A_ED.PROJECT_ID
                          AND A_ED.PROJECT_ID=PROJECT_ID_I
                          AND A_ED.EFFDT <= SYSDATE)
         AND A.EFFSEQ =(SELECT MAX(A_ES.EFFSEQ) FROM PS_PROJECT_STATUS A_ES
                        WHERE A.BUSINESS_UNIT = A_ES.BUSINESS_UNIT
                        AND A.PROJECT_ID = A_ES.PROJECT_ID
                        AND A_ES.PROJECT_ID=PROJECT_ID_I
                        AND A.EFFDT = A_ES.EFFDT);

     IF (CHARGEABLE_T !='C')  THEN
       RETURN '1';
     ELSE
       RETURN '0';
     END IF;

     EXCEPTION
      WHEN OTHERS THEN
        RETURN '0';
     END;

   END IF; -- (PASS_ID_I = 'MAX2FMS-PASS1')

  END; -- END OF FUNCTION

END;  -- PACKAGE BODY
