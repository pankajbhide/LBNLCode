CREATE OR REPLACE PACKAGE BODY LBL_MXPSIFACE_PKG IS

/*****************************************************************************
 PROGRAM NAME           : LBL_MXPSIFACE_PKG

 DATE WRITTEN           : 25-DEC-2013

 AUTHOR                 : PANKAJ BHIDE

 PURPOSE                : PACKAGE SPECS FOR FUNCTIONS DEVELOPED FOR INTERFACING
                          THE DATA BETWEEN MAXIMO AND PEOPLESOFT (F$M)

                          24-OCT-15 PANKAJ - REVISIONS FOR MAXIMO 7.6

                          06-SEP-18 PANKAJ - UPDATE GLCOMPONENTS TO SYNC
                                             WITH COA
****************************************************************************/
FUNCTION SYNC_PROJACT_COA(I_ORGID  IN MAXIMO.SITE.ORGID%TYPE,
                          I_SITEID IN MAXIMO.SITE.SITEID%TYPE)
                          RETURN  VARCHAR2
    IS
      T_RETURN VARCHAR2(100) :='SUCCESS';

      CURSOR CUR_PS_ZH_PRJACO_AL_VW IS
       SELECT * FROM PS_ZH_PRJACO_AL_VW
       WHERE  BUSINESS_UNIT=I_ORGID
       AND    CHARTFIELD1 =' '
       ORDER BY PROJECT_ID,ACTIVITY_ID;


       -- ADDED BY PANKAJ ON 12/9/14
       -- DEACTIVATE COA IF NOT FOUND IN THE FMS VIEW

       CURSOR CUR_ACTIVE_COA IS
        SELECT * FROM CHARTOFACCOUNTS
        WHERE  ORGID='LBNL'
        AND    ACTIVE=1
        AND    LBL_PROJECT_ID  IS NOT NULL
        AND    LBL_ACTIVITY_ID IS NOT NULL;

     CURSOR CUR_COA2 IS
        SELECT * FROM CHARTOFACCOUNTS
        WHERE  ORGID='LBNL'
        AND    LBL_PROJECT_ID  IS NOT NULL
        AND    LBL_ACTIVITY_ID IS NOT NULL;

       T_GLACCOUNT CHARTOFACCOUNTS.GLACCOUNT%TYPE;
       T_ROW_EXISTS NUMBER(5) :=0;
       T_ACCOUNTNAME1   CHARTOFACCOUNTS.ACCOUNTNAME%TYPE;
       T_ACCOUNTNAME2   CHARTOFACCOUNTS.ACCOUNTNAME%TYPE;
       T_LBL_PROJ_DESC  CHARTOFACCOUNTS.LBL_PROJ_DESC%TYPE;
       T_LBL_ACT_DESC   CHARTOFACCOUNTS.LBL_ACT_DESC%TYPE;
       T_ACTIVE         VARCHAR2(1);

    BEGIN

     -- READ THE DELIMITER CHARACTER THAT SEPARATES
     -- PROJECT AND ACTIVITY FROM LBL_MAXVARS TABLE
     BEGIN
      SELECT VARVALUE INTO T_PROJ_ACT_DELIMITER
      --FROM BATCH_MAXIMO.LBL_MAXVARS
      FROM LBL_MAXVARS
      WHERE VARNAME='PROJ_ACT_DELIMITER'
      AND   ORGID=I_ORGID
      AND   SITEID=I_SITEID;

     EXCEPTION WHEN OTHERS THEN
       T_RETURN :='ERROR: DELIMITER CHARACTER MISSING IN LBL_MAXVARS';
     END;

     IF (T_RETURN !='SUCCESS') THEN
       RETURN T_RETURN;
     END IF;

     <<COA_OUTER_LOOP>>
     -- START READING RECORDS FROM PS_ZH_PRJACO_AL_VW VIEW
     FOR REC_PS_ZH_PRJACO_AL_VW IN CUR_PS_ZH_PRJACO_AL_VW

      LOOP

        T_GLACCOUNT := TRIM(TRIM(REC_PS_ZH_PRJACO_AL_VW.PROJECT_ID) ||
                       T_PROJ_ACT_DELIMITER ||
                       TRIM(REC_PS_ZH_PRJACO_AL_VW.ACTIVITY_ID));

        T_ACCOUNTNAME1 :=TRIM(REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR) || '-'
                         || TRIM(REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR);

        -- IF PROJECT/ACTIVITY IS INACTIVATED, THEN INACTIVATE
        -- CORRESPONDING COA AND GLCOMPONENTS IN MAXIMO

        IF (REC_PS_ZH_PRJACO_AL_VW.ZH_EFF_STATUS !='A') THEN

          BEGIN
            SELECT 1 INTO T_ROW_EXISTS
            FROM   CHARTOFACCOUNTS
            WHERE  ORGID=I_ORGID
            AND    GLACCOUNT=T_GLACCOUNT
            AND    ACTIVE=1;

            UPDATE CHARTOFACCOUNTS
            SET    ACTIVE=0, LBL_CHANGEDATE=SYSDATE
            WHERE  ORGID=I_ORGID
            AND    GLACCOUNT=T_GLACCOUNT;

            UPDATE GLCOMPONENTS
            SET    ACTIVE=0, LBL_CHANGEDATE=SYSDATE
            WHERE  ORGID=I_ORGID
            AND    GLORDER=0
            AND    COMPVALUE=T_GLACCOUNT;

          EXCEPTION WHEN NO_DATA_FOUND THEN
            CONTINUE ; -- PROCESS NEXT ROW IF INACTIVATED PROJECT DOES NOT EXISTS
         END;          -- IN MAXIMO

        END IF;  -- ZH_EFF_STATUS !='A'

        --******************************
        -- PROCESS CHARTOFACCOUNTS TABLE
        --******************************
        BEGIN
          SELECT ACCOUNTNAME, LBL_PROJ_DESC, LBL_ACT_DESC, DECODE(ACTIVE,1,'A','I')
          INTO   T_ACCOUNTNAME2, T_LBL_PROJ_DESC, T_LBL_ACT_DESC, T_ACTIVE
          FROM   CHARTOFACCOUNTS
          WHERE  ORGID=I_ORGID
          AND    GLACCOUNT=T_GLACCOUNT;

         IF ((T_ACCOUNTNAME1 != T_ACCOUNTNAME2) OR
             ( T_LBL_PROJ_DESC != REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR) OR
             ( T_LBL_ACT_DESC  != REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR) OR
             ( REC_PS_ZH_PRJACO_AL_VW.ZH_EFF_STATUS != T_ACTIVE)
             ) THEN

          UPDATE CHARTOFACCOUNTS
          SET  ACCOUNTNAME=T_ACCOUNTNAME1, LBL_PROJ_DESC=REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR,
               LBL_ACT_DESC=REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR, ACTIVE=1,
               LBL_ACCTTYPE='PROJACT', LBL_CHANGEDATE=SYSDATE
          WHERE  ORGID=I_ORGID
          AND    GLACCOUNT=T_GLACCOUNT;
        END IF; -- ACCOUNTNAME OR PROJECT OR ACTIVITY ARE  DIFFERENT

        EXCEPTION WHEN NO_DATA_FOUND THEN
          INSERT INTO CHARTOFACCOUNTS (GLACCOUNT, GLCOMP01, CHARTOFACCOUNTSID,
          ACCOUNTNAME, ORGID, ACTIVE, HASLD, LANGCODE, LBL_CHANGEDATE,
          LBL_PROJ_DESC, LBL_ACT_DESC, LBL_ACCTTYPE,
          LBL_PROJECT_ID,
          LBL_ACTIVITY_ID,
          ACTIVEDATE) VALUES  -- MAXIMO 7.6
          (T_GLACCOUNT, T_GLACCOUNT, CHARTOFACCOUNTSSEQ.NEXTVAL,
           T_ACCOUNTNAME1, I_ORGID, 1,0,'EN',SYSDATE,
           REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR,
           REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR,'PROJACT',
           TRIM(REC_PS_ZH_PRJACO_AL_VW.PROJECT_ID),
           TRIM(REC_PS_ZH_PRJACO_AL_VW.ACTIVITY_ID),
           SYSDATE
           );
        END;

       --******************************
        -- PROCESS GLCOMPONENTS TABLE
        --******************************
        BEGIN
          SELECT COMPTEXT, LBL_PROJ_DESC, LBL_ACT_DESC
          INTO   T_ACCOUNTNAME2, T_LBL_PROJ_DESC, T_LBL_ACT_DESC
          FROM   GLCOMPONENTS
          WHERE  ORGID=I_ORGID
          AND    GLORDER=0
          AND    COMPVALUE=T_GLACCOUNT;

         IF ((T_ACCOUNTNAME1 != T_ACCOUNTNAME2) OR
             ( T_LBL_PROJ_DESC != REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR) OR
             ( T_LBL_ACT_DESC  != REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR)) THEN

          UPDATE GLCOMPONENTS
          SET  COMPTEXT=T_ACCOUNTNAME1, LBL_PROJ_DESC=REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR,
               LBL_ACT_DESC=REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR, ACTIVE=1,
               LBL_CHANGEDATE=SYSDATE
          WHERE  ORGID=I_ORGID
          AND    GLORDER=0
          AND    COMPVALUE=T_GLACCOUNT;
        END IF; -- COMPTEXT, PROJECT OR ACTIVITY ARE DIFFERENT

        EXCEPTION WHEN NO_DATA_FOUND THEN
          INSERT INTO GLCOMPONENTS (COMPVALUE, COMPTEXT, GLORDER, ORGID, ACTIVE,
          GLCOMPONENTSID, LBL_CHANGEDATE, LBL_PROJ_DESC,
          LBL_ACT_DESC, LBL_PROJECT_ID, LBL_ACTIVITY_ID)
          VALUES
          (T_GLACCOUNT, T_ACCOUNTNAME1,0, I_ORGID, 1,
          GLCOMPONENTSSEQ.NEXTVAL, SYSDATE,REC_PS_ZH_PRJACO_AL_VW.ZH_PRJ_DESCR,
           REC_PS_ZH_PRJACO_AL_VW.ZH_ACT_DESCR,
           TRIM(REC_PS_ZH_PRJACO_AL_VW.PROJECT_ID),
           TRIM(REC_PS_ZH_PRJACO_AL_VW.ACTIVITY_ID));

        END;


     END LOOP;

     -- ***************************************************************
     -- INACTIVE ALL ACTIVE PROJECT/ACTIVITY IDS WHICH WERE PREVIOUSLY
     -- INSERTED/ACTIVATED BUT DOES NOT EXIST IN PS VIEW
     -- ***************************************************************
     FOR  REC_ACTIVE_COA IN CUR_ACTIVE_COA

      LOOP

        T_ROW_EXISTS :=0;

        BEGIN
          SELECT 1 INTO T_ROW_EXISTS
          FROM   PS_ZH_PRJACO_AL_VW
          WHERE  BUSINESS_UNIT=REC_ACTIVE_COA.ORGID
          AND    PROJECT_ID =REC_ACTIVE_COA.LBL_PROJECT_ID
          AND    ACTIVITY_ID=REC_ACTIVE_COA.LBL_ACTIVITY_ID
          AND    CHARTFIELD1 =' ';
        EXCEPTION WHEN NO_DATA_FOUND THEN

          UPDATE CHARTOFACCOUNTS
          SET    ACTIVE=0, LBL_CHANGEDATE=SYSDATE
          WHERE  ORGID=REC_ACTIVE_COA.ORGID
          AND    GLACCOUNT=REC_ACTIVE_COA.GLACCOUNT;

          UPDATE GLCOMPONENTS
          SET    ACTIVE=0, LBL_CHANGEDATE=SYSDATE
          WHERE  ORGID=REC_ACTIVE_COA.ORGID
          AND    COMPVALUE=REC_ACTIVE_COA.GLACCOUNT;

       END;

      END LOOP;



     --- UPDATE GLCOMP TO SYNC WITH COA
     FOR REC_COA2 IN CUR_COA2
      LOOP
         UPDATE glcomponents
         SET ACTIVE=REC_COA2.ACTIVE
         WHERE COMPVALUE=REC_COA2.GLACCOUNT;
      END LOOP;



     RETURN T_RETURN;
    END;


 /**********************************************************************
 FUNCTION TO RETURN THE VALUES OF WORK ORDER APPROVAL
 THE RESULTING STRING WOULD BE ENCLOSED WITH PIPE CHARACTER
 ***********************************************************************/
 FUNCTION WO_APPR_SYNONYMS  RETURN VARCHAR2

 IS
   CURSOR LOV_CUR IS
     -- MXES
         SELECT VALUE FROM MAXIMO.SYNONYMDOMAIN
     WHERE DOMAINID='WOSTATUS'
     AND MAXVALUE IN ('APPR','INPRG','WMATL','ASSIGNED','COMP')
     AND VALUE IS NOT NULL;


           STATUS_STRING_O  VARCHAR2(2000) := NULL;
     RESULT_STR_T     VARCHAR2(2000) := NULL;
  BEGIN

        FOR LOV_VALUE IN LOV_CUR

        LOOP
            IF RESULT_STR_T IS NOT NULL THEN
                   RESULT_STR_T := RESULT_STR_T ||  '|'  || LOV_VALUE.VALUE;
            ELSE
                   RESULT_STR_T := LOV_VALUE.VALUE;
            END IF;
        END LOOP;

        STATUS_STRING_O :='|' || LTRIM(RTRIM(RESULT_STR_T)) || '|';

    RETURN STATUS_STRING_O ;
  END; -- END OF FUNCTION


/*******************************************************************************
 FUNCTION TO RETURN THE DESCRIPTION BASED UPON THE TYPE (E.G. SHORT, DETAILED ETC)
 *******************************************************************************/
 FUNCTION PREPARE_DESCRIPTION(I_DESCRIPTION IN WORKORDER.DESCRIPTION%TYPE,
                              I_TYPE IN WORKORDER.DESCRIPTION%TYPE,
                              I_LBL_DESTGROUP IN WORKORDER.LBL_DESTGROUP%TYPE,
                              I_WORKTYPE IN WORKORDER.WORKTYPE%TYPE,
                              I_LBL_VALUESTREAM IN WORKORDER.LBL_VALUESTREAM%TYPE)
            RETURN VARCHAR2

 IS
   T_DESCRIPTION WORKORDER.DESCRIPTION%TYPE :=NULL;

 BEGIN
   IF (I_DESCRIPTION IS NULL) THEN
      T_DESCRIPTION :='*** NOT SPECIFIED ***';
    ELSE
      T_DESCRIPTION := I_DESCRIPTION;
    END IF;

    IF (I_TYPE='SHORT') THEN
      T_DESCRIPTION :=SUBSTR(T_DESCRIPTION,1,10);
    ELSE -- DETAIL
       IF (NVL(I_LBL_DESTGROUP,'_') !='MRO') THEN
        T_DESCRIPTION := I_WORKTYPE || '|' ||
                   SUBSTR(T_DESCRIPTION,1,
                   (29-LENGTH(I_WORKTYPE)));
        END IF;

        IF (NVL(I_LBL_DESTGROUP,'_') ='MRO')  THEN
         T_DESCRIPTION := SUBSTR(I_WORKTYPE || '|' ||
          SUBSTR(T_DESCRIPTION, 1,
          (29-LENGTH(I_WORKTYPE || '|' || '|' ||
          NVL(I_LBL_VALUESTREAM,' '))))
          || '|' || NVL(I_LBL_VALUESTREAM,' '),
          1,30);

        END IF;
     END IF;

    RETURN T_DESCRIPTION;
  END;



 /*********************************************************************
 FUNCTION TO INSERT RECORD INTO JOB/WORKORDER INTERFACE
 TABLE ON FMS SIDE
*********************************************************************/
FUNCTION   INSERT_WOJOB_INTFC(I_WONUM IN WORKORDER.WONUM%TYPE,
             I_DESCRIPTION IN WORKORDER.DESCRIPTION%TYPE,
             I_DESCSHORT   IN WORKORDER.DESCRIPTION%TYPE,
             I_LDKEY IN LONGDESCRIPTION.LDKEY%TYPE,
             I_PROJECT_ID IN LBL_V_PROJACT.LBL_PROJECT_ID%TYPE,
             I_ACTIVITY_ID IN LBL_V_PROJACT.LBL_ACTIVITY_ID%TYPE,
             I_STATUS  IN WORKORDER.STATUS%TYPE)
             RETURN VARCHAR2
IS
   T_LDTEXT LONGDESCRIPTION.LDTEXT%TYPE :=NULL;

BEGIN

   BEGIN
    SELECT LDTEXT INTO T_LDTEXT
    FROM   LONGDESCRIPTION
    WHERE   LDKEY=I_LDKEY
    AND     LDOWNERTABLE='WORKORDER'
    AND     LANGCODE='EN'
    AND     LDOWNERCOL='DESCRIPTION';

   EXCEPTION WHEN NO_DATA_FOUND THEN
     T_LDTEXT :=NULL;
   END;

   -- INSERT THE DATA INTO THE STAGING TABLE
   -- USE THE DATA FROM STAGING TABLE TO INSERT INTO THE
   -- TARGET TABLE OVER THE DB LINK
   -- THIS IS A WORK AROUND FOR ORA-22992 ERROR

   INSERT INTO BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT
   ( SETID, CHARTFIELD1, PROJECT_ID, ACTIVITY_ID,
     TRANSACTION_DATE, EFF_STATUS,
     DESCR, DESCRSHORT, PROCESSED_SW, ERRORMSG, SYSTEM_SOURCE,
     DESCRLONG
     ) VALUES
    ('SHARE',I_WONUM, I_PROJECT_ID, I_ACTIVITY_ID,
      SYSDATE, I_STATUS,
      I_DESCRIPTION,I_DESCSHORT ,'N',' ','MAX',
      T_LDTEXT
      )  ;


    RETURN 'SUCCESS';
END;


/**********************************************************************
 FUNCTION TO RETURN THE ASSET TYPE FOR A  GIVEN ITEM GROUP.
 OVERLOADED FUNCTION - IF THE ITEM GROUP IS NULL, THEN IT CHECKS
 WHETHER ASSET TYPE NEEDS TO BE RETURNED FOR A GIVEN GLACCOUNT, ELSE
 IT FINDS OUT THE ASSET TYPE BASED UPON THE LOOKUP TABLE
 ***********************************************************************/
 FUNCTION GET_ASSET_TYPE (I_ITEMGROUP  IN ITEM.ITEMNUM%TYPE,
                          I_ACCOUNT    IN CHARTOFACCOUNTS.GLACCOUNT%TYPE)
                          RETURN VARCHAR2
 IS

   T_ASSET_TYPE VARCHAR2(100) := NULL;
   T_ROWCOUNT   NUMBER(5) :=0;

 BEGIN

   IF (I_ITEMGROUP IS NULL) THEN

        SELECT COUNT(*) INTO T_ROWCOUNT
        FROM BATCH_MAXIMO.LBL_STORES_FEED_DEFAULTS C
        WHERE C.ISSUE_GL_ACCT=I_ACCOUNT
        OR C.RETURN_GL_ACCT=I_ACCOUNT
        OR C.OVER_GL_ACCT=I_ACCOUNT
        OR C.SHORT_GL_ACCT=I_ACCOUNT;

        IF (T_ROWCOUNT =0) THEN
          RETURN T_ASSET_TYPE ;
        ELSE
          RETURN 'REQUIRED';
        END IF;

  END IF;


  BEGIN
    SELECT ASSET_TYPE
    INTO   T_ASSET_TYPE
    FROM   BATCH_MAXIMO.LBL_ITEMGROUP
    WHERE  ITEMGROUP=I_ITEMGROUP;

   EXCEPTION WHEN OTHERS THEN
     NULL;
  END;

   RETURN T_ASSET_TYPE;

 END;




/**************************************************************
 FUNCTION TO SEND WORK ORDER INFORMATION TO FMS
**************************************************************/
FUNCTION SENDWO2FMS(I_ORGID  IN MAXIMO.SITE.ORGID%TYPE,
                    I_SITEID IN MAXIMO.SITE.SITEID%TYPE)
                    RETURN  VARCHAR2
  IS
    T_ROW_FOUND          NUMBER(5) :=0;
    T_FRST_WO_APPR_DT    WORKORDER.CHANGEDATE%TYPE;
    T_WOSTATUS_STR_T     VARCHAR2(2000);
    T_MAXWO2FMS_DTTM     WORKORDER.CHANGEDATE%TYPE;
    T_LBL_RETRYIFACEDT   WORKORDER.CHANGEDATE%TYPE;
    T_EXEC_START_DTTM    WORKORDER.CHANGEDATE%TYPE;
    T_RETURN             VARCHAR2(2000) := 'SUCCESS';
    T_PS_PROJECT_ID      LBL_V_PROJACT.LBL_PROJECT_ID%TYPE;
    T_PS_ACTIVITY_ID     LBL_V_PROJACT.LBL_ACTIVITY_ID%TYPE;

    T_PSCH_EXISTS        NUMBER(5) :=0;
    T_PSCH_DESC          BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT.DESCR%TYPE;
    T_PSCH_SHRTDSC       BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT.DESCRSHORT%TYPE;
    T_PSCH_STATUS        BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT.EFF_STATUS%TYPE;
    T_EFFDT              BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT.TRANSACTION_DATE%TYPE;
    --*************************************************************
    -- CURSOR TO FETCH THE QUALIFYING RECORDS FROM WORKORDER TABLE
    -- BASED ON THE PASS NUMBER RECEIVED FROM ARGUMENT
    ----*************************************************************
    CURSOR WORKORDERS_CUR IS
     SELECT A.ORGID, A.SITEID, A.WONUM, A.STATUS, A.GLACCOUNT, A.SUPERVISOR,
            A.DESCRIPTION, A.STATUSDATE, A.WORKTYPE,A.CHANGEDATE,
            DECODE(A.HASLD,0,NULL ,A.WORKORDERID) LDKEY, -- MXES
            TRUNC(MAXIMO.LBL_MAXIMO_PKG.GET_FRST_APPR_DATE(A.ORGID, A.SITEID,
            A.WONUM)) FRST_APPR_DATE ,
            A.LBL_DESTGROUP,
            A.LBL_VALUESTREAM ,
            B.LBL_PROJECT_ID,
            B.LBL_ACTIVITY_ID
    FROM   MAXIMO.WORKORDER A, MAXIMO.LBL_V_PROJACT B
    WHERE  A.ORGID=B.ORGID
    AND    A.GLACCOUNT=B.GLACCOUNT
    AND    A.ORGID=I_ORGID
    AND    A.SITEID=I_SITEID
    AND    A.WORKTYPE   NOT IN (SELECT WORKTYPE.WORKTYPE FROM WORKTYPE WHERE
                                WORKTYPE.TYPE ='NOCHARGE') -- NON-CHARGEABLE WORK TYPES
    AND    A.STATUS NOT IN ('WAPPR','RFI') -- BYPASS WAITING FOR APPORVAL AND REQ FOR INFO
    AND   (A.CHANGEDATE       >  T_MAXWO2FMS_DTTM --DATETIME WHEN THE PROGRAM WAS EXECUTED LAST
    OR     A.LBL_RETRYIFACEDT >  T_MAXWO2FMS_DTTM)--RETRY DATETIME
    ORDER BY A.WONUM, A.CHANGEDATE
    FOR UPDATE OF LBL_RETRYIFACEDT, LBL_DTSENTTOFMS ;

  BEGIN

     DBMS_OUTPUT.ENABLE(1000000);

    -- GET THE PROGRAM EXECUTION START DATE/TIME ALSO
    -- GET RETRY DATE TIME (NEXT DAY)
    SELECT SYSDATE, SYSDATE+1
    INTO   T_EXEC_START_DTTM , T_LBL_RETRYIFACEDT
    FROM DUAL;


    -- GET THE DATETIME WHEN THIS PROGRAM WAS LAST EXECUTED
    BEGIN
     SELECT TO_DATE(VARVALUE,'DD-MON-YYYY HH24:MI:SS')
     INTO T_MAXWO2FMS_DTTM
     --FROM BATCH_MAXIMO.LBL_MAXVARS
     FROM  LBL_MAXVARS
     WHERE VARNAME='MAXWO2FMS_DTTM'
     AND   ORGID=I_ORGID
     AND   SITEID=I_SITEID;
     EXCEPTION WHEN NO_DATA_FOUND THEN
        T_RETURN :='ERROR: MAXWO2FMS MISSING IN LBL_MAXVARS';
        RETURN T_RETURN;
     END;


     -- GET THE DATETIME FROM WHEN THE WORK ORDER RECORDS
     -- SHOULD BE CONSIDERED FOR F$M
      BEGIN
        SELECT TO_DATE(VARVALUE,'MM-DD-YYYY')
        INTO T_FRST_WO_APPR_DT
        --FROM BATCH_MAXIMO.LBL_MAXVARS
        FROM  LBL_MAXVARS
        WHERE VARNAME='FRST_WO_APPR_DT'
        AND   ORGID=I_ORGID
        AND   SITEID=I_SITEID;

        EXCEPTION WHEN NO_DATA_FOUND THEN
            T_RETURN :='ERROR: FRST_WO_APP_DT MISSING IN LBL_MAXVARS';
            RETURN T_RETURN;
       END;

       -- GET WORK ORDER APPROVAL STATUS SYNONYMS
       T_WOSTATUS_STR_T :=LBL_MXPSIFACE_PKG.WO_APPR_SYNONYMS;

       -- DELETE ALL PRIOR ROWS FROM THE STAGING TABLE
       DELETE FROM BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT;


    --*******************************************************************
    -- START READING THE QUALIFYING WORK ORDER RECORDS BASED ON THE CURSOR
    --*********************************************************************
    <<WO_OUTER_LOOP>>
    FOR WORKORDERS_REC_T IN WORKORDERS_CUR

    LOOP
       -- SKIP WORKORDERS THAT WERE APPROVED BEFORE F$M CUT OFF DATE
       CONTINUE WO_OUTER_LOOP WHEN (WORKORDERS_REC_T.FRST_APPR_DATE <
                                    T_FRST_WO_APPR_DT);

       -- CHECK WHETHER THE COMBINATION OF WORK ORDER NUMBER
       -- PROJECT AND ACTIVITY ALREADY EXISTS IN CHART FIELD1 TABLE
       BEGIN
         SELECT 1, EFF_STATUS, DESCR, DESCRSHORT, EFFDT
         INTO   T_PSCH_EXISTS, T_PSCH_STATUS, T_PSCH_DESC, T_PSCH_SHRTDSC, T_EFFDT
         FROM   PS_ZH_CHRTF_EFF_VW A
         WHERE  A.SETID='SHARE'  -- TBD ??
         AND    A.CHARTFIELD1=WORKORDERS_REC_T.WONUM;
         --AND    A.PROJECT_ID=WORKORDERS_REC_T.PROJECT_ID
         --AND    A.ACTIVITY_ID=WORKORDERS_REC_T.ACTIVITY_ID;
       EXCEPTION WHEN NO_DATA_FOUND THEN
         T_PSCH_EXISTS :=0;
         T_PSCH_STATUS :=NULL;
         T_PSCH_DESC :=NULL;
         T_PSCH_SHRTDSC :=NULL;
         T_EFFDT :=NULL;
       END ;

       -- *************************************
       -- WORK ORDER STATUS = CANCEL OR CLOSE
       -- ************************************
       IF (WORKORDERS_REC_T.STATUS IN ('CAN','CLOSE'))  THEN

         IF (WORKORDERS_REC_T.STATUS='CAN' AND T_PSCH_EXISTS=0) THEN
            --RECORD DOES NOT EXIST IN PS CHART FIELD 1 TABLE
            --DO NOT SEND CANCEL RECORD IF WAS NOT PREVIOUSLY
            --ESTABLISHED AS VALID CHARTFIELD1
           CONTINUE WO_OUTER_LOOP;
         END IF; -- IF (WORKORDERS_REC_T.STATUS='CAN' AND T_PSCH_EXISTS=0)

         IF (WORKORDERS_REC_T.STATUS='CLOSE' AND T_PSCH_EXISTS=0)  THEN
           -- RECORD DOES NOT EXIST IN PS CHART FIELD1 TABLE
           -- SEND NEW ACTIVE RECORD AND MARK THAT WORK ORDER
           -- FOR THE FUTURE RE-TRANSMISSION
           T_RETURN := INSERT_WOJOB_INTFC(WORKORDERS_REC_T.WONUM,
              LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
             'DETAIL',WORKORDERS_REC_T.LBL_DESTGROUP,
             WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- DETAILED DESC
              LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
             'SHORT',WORKORDERS_REC_T.LBL_DESTGROUP,
             WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- SHORT DESC
             WORKORDERS_REC_T.LDKEY,
             WORKORDERS_REC_T.LBL_PROJECT_ID,
             WORKORDERS_REC_T.LBL_ACTIVITY_ID,
             'A'); -- ACTIVE

             -- MARK WORK ORDER FOR RE-TRANSMISSION
             UPDATE WORKORDER
             SET LBL_RETRYIFACEDT=T_LBL_RETRYIFACEDT, LBL_DTSENTTOFMS=SYSDATE
             WHERE ORGID=I_ORGID
             AND   SITEID=I_SITEID
             AND   WONUM=WORKORDERS_REC_T.WONUM;

             CONTINUE WO_OUTER_LOOP;
          END IF;  --IF (WORKORDERS_REC_T.STATUS='CLOSE' AND T_PSCH_EXISTS=0)

          -- SEND INACTIVE RECORD IF ACTIVE WORK ORDER, PROJECT AND ACTIVITY COMBO EXISTS
          IF (T_PSCH_STATUS ='A') THEN

            -- IF CANCEL/CLOSE DATE AND LAST EFFECTIVE DATE IS SAME, THEN
            -- DELAY ITS TRANSMISSION BY A DAY
            -- REVISION DURING TESTING
            IF (TRUNC(T_EFFDT) = TRUNC(SYSDATE)) THEN

              -- MARK WORK ORDER FOR RE-TRANSMISSION
              UPDATE WORKORDER
              SET LBL_RETRYIFACEDT=T_LBL_RETRYIFACEDT
              WHERE ORGID=I_ORGID
              AND   SITEID=I_SITEID
              AND   WONUM=WORKORDERS_REC_T.WONUM;


           ELSE

          -- SEND INACTIVE RECORD FOR CANCENCED WORK ORDER
           T_RETURN := INSERT_WOJOB_INTFC(WORKORDERS_REC_T.WONUM,
              LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
             'DETAIL',WORKORDERS_REC_T.LBL_DESTGROUP,
             WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- DETAILED DESC
              LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
             'SHORT',WORKORDERS_REC_T.LBL_DESTGROUP,
             WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- SHORT DESC
             WORKORDERS_REC_T.LDKEY,
             WORKORDERS_REC_T.LBL_PROJECT_ID,
             WORKORDERS_REC_T.LBL_ACTIVITY_ID,
             'I'); -- INACTIVE

              -- WORK ORDER IS NOT REQUIRED FOR RE-TRANSMISSION
             UPDATE WORKORDER
             SET LBL_RETRYIFACEDT=NULL
             WHERE ORGID=I_ORGID
             AND   SITEID=I_SITEID
             AND   WONUM=WORKORDERS_REC_T.WONUM;

           END IF; -- IF (TRUNC(T_EFFDT) = TRUC(SYSDASTE)) THEN

         END IF; -- IF (T_PSCH_STATUS ='A')

      END IF; -- IF (WORKORDERS_REC_T.STATUS IN 'CAN','CLOSE')


        -- WORK ORDER IS APPROVED, IN-PROGRESS, COMPLETED (AND AMONG ITS SYNONYMS)
        IF INSTR(T_WOSTATUS_STR_T, '|' || WORKORDERS_REC_T.STATUS || '|') > 0
         THEN
          IF (T_PSCH_EXISTS=0) THEN -- RECORD DOES NOT EXIST IN PS CHART FIELD1 TABLE
            -- SEND NEW ACTIVE RECORD IF WORK ORDER, PROJECT ACTIVITY DOES NOT EXIST IN CHART FLD1
           T_RETURN := INSERT_WOJOB_INTFC(WORKORDERS_REC_T.WONUM,
              LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
             'DETAIL',WORKORDERS_REC_T.LBL_DESTGROUP,
             WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- DETAILED DESC
              LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
             'SHORT',WORKORDERS_REC_T.LBL_DESTGROUP,
             WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- SHORT DESC
             WORKORDERS_REC_T.LDKEY,
             WORKORDERS_REC_T.LBL_PROJECT_ID,
             WORKORDERS_REC_T.LBL_ACTIVITY_ID,
             'A'); -- ACTIVE


              -- WORK ORDER
             UPDATE WORKORDER
             SET   LBL_DTSENTTOFMS=SYSDATE
             WHERE ORGID=I_ORGID
             AND   SITEID=I_SITEID
             AND   WONUM=WORKORDERS_REC_T.WONUM;

           /* THIS BLOCK IS COMMENTED AS ONCE THE DETAILS ABOUT THE WORK ORDER
              ARE SENT TO FMS, THERE IS NO NEED TO SEND ANY UPDATES

             ELSE
            -- IF ACTIVE WORK ORDER, PROJECT AND ACTIVITY EXISTS, THEN, CHECK WHETHER
            -- THE SHORT OR DETAILED DESCRIPTION IS CHANGED. IF IT IS CHANGED, THEN
            -- SEND A NEW RECORD
             IF (T_PSCH_STATUS ='A') THEN

              BEGIN



               T_PS_PROJECT_ID  := NULL;
               T_PS_ACTIVITY_ID := NULL;

               SELECT PROJECT_ID, ACTIVITY_ID
               INTO  T_PS_PROJECT_ID, T_PS_ACTIVITY_ID
               FROM  PS_ZH_PRJACO_AL_VW
               WHERE BUSINESS_UNIT='LBNL'
               AND   CHARTFIELD1 =WORKORDERS_REC_T.WONUM;

              EXCEPTION WHEN OTHERS THEN
                NULL;
              END ;

               IF (T_PS_PROJECT_ID  != WORKORDERS_REC_T.LBL_PROJECT_ID OR
                   T_PS_ACTIVITY_ID != WORKORDERS_REC_T.LBL_ACTIVITY_ID) THEN

               ((T_PSCH_DESC !=  LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
                'DETAIL',WORKORDERS_REC_T.LBL_DESTGROUP,
                WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM)) OR
                (T_PSCH_SHRTDSC !=  LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
                'SHORT',WORKORDERS_REC_T.LBL_DESTGROUP,
                WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM)))) THEN

                -- SEND NEW ACTIVE RECORD
              T_RETURN := INSERT_WOJOB_INTFC(WORKORDERS_REC_T.WONUM,
                 LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
                 'DETAIL',WORKORDERS_REC_T.LBL_DESTGROUP,
                 WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- DETAILED DESC
                 LBL_MXPSIFACE_PKG.PREPARE_DESCRIPTION(WORKORDERS_REC_T.DESCRIPTION,
                 'SHORT',WORKORDERS_REC_T.LBL_DESTGROUP,
                 WORKORDERS_REC_T.WORKTYPE,WORKORDERS_REC_T.LBL_VALUESTREAM), -- SHORT DESC
                 WORKORDERS_REC_T.LDKEY,
                 WORKORDERS_REC_T.LBL_PROJECT_ID,
                  WORKORDERS_REC_T.LBL_ACTIVITY_ID,
                  'A'); -- ACTIVE



            END IF; --   IF (T_PS_PROJECT_ID != WORKORDERS_REC_T.LBL_PROJECT_ID OR

          END IF ; COMMENTED TILL HERE */--  IF (T_PSCH_STATUS ='A' AND .....

         END IF; --   IF (T_PSCH_EXISTS=0)

        END IF; --   IF INSTR(T_WOSTATUS_STR_T, '|' || WORKORDERS_REC_T.STATUS || '|') > 0

      END LOOP;

    -- NOW INSERT THE DATA FROM STAGING TABLES
    -- TO PEOPLESOFT INTERFACE TABLE
    INSERT INTO PS_ZH_WO_JOB_UPDT
   ( SETID, CHARTFIELD1, PROJECT_ID, ACTIVITY_ID,
     TRANSACTION_DATE, EFF_STATUS,
     DESCR, DESCRSHORT, PROCESSED_SW, ERRORMSG, SYSTEM_SOURCE,
     DESCRLONG)
     SELECT  SETID, CHARTFIELD1, PROJECT_ID, ACTIVITY_ID,
     TRANSACTION_DATE, EFF_STATUS,
     DESCR, DESCRSHORT, PROCESSED_SW, ERRORMSG, SYSTEM_SOURCE,
     DESCRLONG
    FROM BATCH_MAXIMO.LBL_GT_PS_ZH_WO_JOB_UPDT;

     /************************************************************
     FINALLY,UPDATE LBL_MAXVARS TABLE WITH LAST EXTRACTION DATE
     SET THE RETRY IFACE DATE TO NULL, IF THE RETRY DATE IS EARLIER
     THAN THE LAST EXTRACTION DATE AND COMMIT THE DB CHANGES
    ************************************************************/

    --UPDATE BATCH_MAXIMO.LBL_MAXVARS
    UPDATE LBL_MAXVARS
    SET    VARVALUE=TO_CHAR(T_EXEC_START_DTTM,'DD-MON-YYYY HH24:MI:SS')
    WHERE  VARNAME='MAXWO2FMS_DTTM'
    AND    ORGID=I_ORGID
    AND    SITEID=I_SITEID;




    RETURN 'SUCCESS';

  END;

/*******************************************************************************
 FUNCTION TO INSERT ROW INTO LBL_PROJ_FEEDERS TABLE FOR PROJECT RELATED FEEDERS
*******************************************************************************/
FUNCTION INSERT_LBL_PROJ_FEEDERS(ORGID_T IN BATCH_MAXIMO.LBL_PROJ_FEEDERS.ORGID%TYPE,
           SITEID_T           IN         BATCH_MAXIMO.LBL_PROJ_FEEDERS.SITEID%TYPE,
           PROJ_TRANS_TYPE_T  IN BATCH_MAXIMO.LBL_PROJ_FEEDERS.PROJ_TRANS_TYPE%TYPE,
           FISCAL_YEAR_T   IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.FISCAL_YEAR%TYPE,
           ACCOUNTING_PERIOD_T IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.ACCOUNTING_PERIOD%TYPE,
           JOURNAL_ID_T        IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.JOURNAL_ID%TYPE,
           RECORD_ID_T         IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.RECORD_ID%TYPE,
           TRANS_DATE_T        IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.TRANS_DATE%TYPE,
           ENTRY_TYPE_T        IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.ENTRY_TYPE%TYPE,
           LBL_PROJECT_ID_T    IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.LBL_PROJECT_ID%TYPE,
           LBL_ACTIVITY_ID_T   IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.LBL_ACTIVITY_ID%TYPE,
           ACCOUNT_T           IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.ACCOUNT%TYPE,
           WONUM_T             IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.WONUM%TYPE,
           TRANSTYPE_T         IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.TRANSTYPE%TYPE,
           RESOURCE_TYPE_T     IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.RESOURCE_TYPE%TYPE,
           RESOURCE_CATEGORY_T  IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.RESOURCE_CATEGORY%TYPE,
           LINE_DESCR_T       IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.LINE_DESCR%TYPE,
           UNIT_OF_MEASURE_T  IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.UNIT_OF_MEASURE%TYPE,
           DR_CR_T            IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.DR_CR%TYPE,
           RESOURCE_AMOUNT_T  IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.RESOURCE_AMOUNT%TYPE,
           INACTIVE_T         IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.INACTIVE%TYPE,
           ANALYSIS_TYPE_T    IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.ANALYSIS_TYPE%TYPE,
           DEPARTMENT_CODE_T  IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.DEPARTMENT_CODE%TYPE,
           FUND_CODE_T        IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.FUND_CODE%TYPE,
           ASSET_TYPE_T       IN  BATCH_MAXIMO.LBL_PROJ_FEEDERS.ASSET_TYPE%TYPE)
       RETURN VARCHAR2
   IS
         RETURN_T VARCHAR2(50) :='SUCCESS';
   BEGIN

        INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDERS(ORGID, SITEID, FISCAL_YEAR,ACCOUNTING_PERIOD,
        JOURNAL_ID,
        PROJ_TRANS_TYPE ,RECORD_ID,TRANS_DATE,ENTRY_TYPE,LBL_PROJECT_ID,LBL_ACTIVITY_ID,
        ACCOUNT,WONUM,TRANSTYPE,RESOURCE_TYPE,RESOURCE_CATEGORY,LINE_DESCR,
        UNIT_OF_MEASURE,DR_CR,RESOURCE_AMOUNT,INACTIVE,CHANGEDATE,ANALYSIS_TYPE,
        DEPARTMENT_CODE, FUND_CODE, ASSET_TYPE)
        VALUES
        (ORGID_T, SITEID_T, FISCAL_YEAR_T,ACCOUNTING_PERIOD_T,
         JOURNAL_ID_T,
         PROJ_TRANS_TYPE_T,RECORD_ID_T,TRANS_DATE_T,ENTRY_TYPE_T, LBL_PROJECT_ID_T,LBL_ACTIVITY_ID_T,
         ACCOUNT_T,WONUM_T, TRANSTYPE_T,RESOURCE_TYPE_T,RESOURCE_CATEGORY_T,LINE_DESCR_T,
         UNIT_OF_MEASURE_T,DR_CR_T,RESOURCE_AMOUNT_T,INACTIVE_T,SYSDATE,ANALYSIS_TYPE_T,
         DEPARTMENT_CODE_T, FUND_CODE_T,ASSET_TYPE_T );

      RETURN RETURN_T;
   END;


/**************************************************************
 FUNCTION TO GENERATE STORES FEEDERS
**************************************************************/
FUNCTION GENERATE_STORES_FEEDER(I_ORGID  IN MAXIMO.SITE.ORGID%TYPE,
                                I_SITEID IN MAXIMO.SITE.SITEID%TYPE)
                    RETURN  VARCHAR2
 IS

 ORGID_T               SITE.ORGID%TYPE;
 SITEID_T              SITE.SITEID%TYPE;
 FISCAL_YEAR_T         BATCH_MAXIMO.LBL_PROJ_FEEDERS.FISCAL_YEAR%TYPE;
 ACCOUNTING_PERIOD_T   BATCH_MAXIMO.LBL_PROJ_FEEDERS.ACCOUNTING_PERIOD%TYPE;
 TRANS_DATE_T          BATCH_MAXIMO.LBL_PROJ_FEEDERS.TRANS_DATE%TYPE;
 STR_FEEDER_DEF_T      BATCH_MAXIMO.LBL_STORES_FEED_DEFAULTS%ROWTYPE;
 T_PERIOD_START_DATE   FINANCIALPERIODS.PERIODSTART%TYPE;
 T_PERIOD_END_DATE     FINANCIALPERIODS.PERIODEND%TYPE;
 JOURNAL_ID_T          BATCH_MAXIMO.LBL_PROJ_FEEDERS.JOURNAL_ID%TYPE;
 PROJECT_ID_T          LBL_V_PROJACT.LBL_PROJECT_ID%TYPE;
 ACTIVITY_ID_T         LBL_V_PROJACT.LBL_ACTIVITY_ID%TYPE;
 EXISTS_T              NUMBER(5);


 -- CURSOR FOR ISSUES AND RETURNS
 CURSOR ISSUES_RETURN_CUR IS
  SELECT NVL(A.REFWO,' ') REFWO, A.GLDEBITACCT,B.LBL_PROJECT_ID, B.LBL_ACTIVITY_ID,
         DECODE(B.ACTIVE,1,0,1) INACTIVE, -- INACTIVE
         A.ISSUETYPE,
         LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED') ASSET_TYPE,
         SUM(ABS(A.LINECOST)) LINECOST
  FROM MATUSETRANS A, LBL_V_PROJACT B
  WHERE A.ORGID=B.ORGID
  AND A.GLDEBITACCT=B.GLACCOUNT
  AND A.STORELOC NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
  AND A.ITEMNUM  NOT IN ('DIESEL','UNLEADED')
  AND A.TRANSDATE >= T_PERIOD_START_DATE
  AND A.TRANSDATE < T_PERIOD_END_DATE
  AND A.ORGID=ORGID_T
  AND A.SITEID=SITEID_T
  GROUP BY A.REFWO, A.GLDEBITACCT,B.LBL_PROJECT_ID,
           B.LBL_ACTIVITY_ID, B.ACTIVE, A.ISSUETYPE,
           LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED')
  ORDER BY ISSUETYPE, REFWO;

  -- CURSOR FOR OVERAGES
  CURSOR OVERAGES_CUR IS
    SELECT  LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED') ASSET_TYPE,
    SUM(ABS(A.LINECOST)) LINECOST
    FROM  MAXIMO.INVTRANS A
    WHERE A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    AND  (SUBSTR(A.GLDEBITACCT,1,4) = '1624' OR A.GLDEBITACCT='151924')
    AND   A.TRANSTYPE NOT IN ('ROUNDADJ')
    AND   A.STORELOC  NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   A.ITEMNUM   NOT IN ('DIESEL','UNLEADED')
    AND   A.TRANSDATE >= T_PERIOD_START_DATE
    AND   A.TRANSDATE < T_PERIOD_END_DATE
    AND   A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    GROUP BY  LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED')
    HAVING SUM(A.LINECOST) IS NOT NULL;


  -- CURSOR FOR SHORTAGES
   CURSOR SHORTAGES_CURSOR IS
    SELECT  LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED') ASSET_TYPE,
    SUM(ABS(A.LINECOST)) LINECOST
    FROM MAXIMO.INVTRANS A
    WHERE A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    AND  (SUBSTR(A.GLCREDITACCT,1,4) = '1625' OR A.GLCREDITACCT='151925')
    AND   A.TRANSTYPE NOT IN ('ROUNDADJ')
    AND   A.STORELOC NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   A.ITEMNUM NOT IN ('DIESEL','UNLEADED')
    AND   A.TRANSDATE >= T_PERIOD_START_DATE
    AND   A.TRANSDATE < T_PERIOD_END_DATE
    AND   A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    GROUP BY   LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED')
    HAVING SUM(A.LINECOST) IS NOT NULL;


 -- CURSOR FOR VALUE ADJUSTMENTS
   CURSOR VALUEADJ_CUR IS
      SELECT  A.ITEMNUM, NVL(A.OTHERADJVALUE,0) ADJ_VALUE,
            LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),' ') ASSET_TYPE
      FROM  BATCH_MAXIMO.LBL_ITEMSUMMARY A
      WHERE A.ITEMNUM NOT IN ('DIESEL','UNLEADED')
      AND   A.ORGID=ORGID_T
      AND   A.SITEID=SITEID_T
      AND   A.FISCAL_YEAR=FISCAL_YEAR_T
      AND   A.ACCOUNTING_PERIOD=ACCOUNTING_PERIOD_T
      AND   NVL(A.OTHERADJVALUE,0) !=0
      AND   NVL(A.OTHERADJUNITS,0)=0
      ORDER BY A.ITEMNUM;

  RECORD_GL_ID_T BATCH_MAXIMO.LBL_PROJ_FEEDERS.RECORD_ID%TYPE :=0;
  RETURN_T       VARCHAR2(50);
  ACCT_T         BATCH_MAXIMO.LBL_PROJ_FEEDERS.ACCOUNT%TYPE;
  LINE_DESCR_T   BATCH_MAXIMO.LBL_PROJ_FEEDERS.LINE_DESCR%TYPE;
  DR_CR_T        BATCH_MAXIMO.LBL_PROJ_FEEDERS.DR_CR%TYPE;
  T_ASSET_TYPE   BATCH_MAXIMO.lbl_proj_feeders.asset_type%TYPE;

 BEGIN

    IF (I_ORGID IS NULL OR LENGTH(I_ORGID)=0) THEN
       ORGID_T :='LBNL';
    ELSE
       ORGID_T :=I_ORGID;
    END IF;

    IF (I_SITEID IS NULL OR LENGTH(I_SITEID)=0) THEN
       SITEID_T:='FAC';
    ELSE
       SITEID_T :=I_SITEID;
    END IF;

    BEGIN

     -- GET THE DETAILS ABOUT THE STORES FEEDER DEFAULTS
     SELECT * INTO STR_FEEDER_DEF_T
     FROM BATCH_MAXIMO.LBL_STORES_FEED_DEFAULTS
     WHERE ORGID=ORGID_T
     AND   SITEID=SITEID_T;

     EXCEPTION  WHEN NO_DATA_FOUND THEN
       RETURN 'ERROR: STORES FEEDER DEFAULTS MISSING';

    END ;

    -- GET JOURNAL ID (COMMON TO ALL THE TRANSACTIONS)
    SELECT BATCH_MAXIMO.LBL_JOURNAL_SEQ.NEXTVAL
    INTO  JOURNAL_ID_T
    FROM  DUAL;


   -- GET THE VALUES OF JOURNAL DATE, FISCAL YEAR, ACCOUNTINT_PERIOD
   -- FROM THE FINANCIALPERIODS TABLE

    SELECT TRUNC(X.PERIODEND-1),TO_NUMBER(SUBSTR(X.FINANCIALPERIOD,1,4)),
    TO_NUMBER(SUBSTR(X.FINANCIALPERIOD, 5,2)), PERIODSTART, PERIODEND
    INTO   TRANS_DATE_T, FISCAL_YEAR_T, ACCOUNTING_PERIOD_T, T_PERIOD_START_DATE, T_PERIOD_END_DATE
    FROM   FINANCIALPERIODS X
    WHERE  X.FINANCIALPERIOD=(SELECT MIN(Y.FINANCIALPERIOD) FROM FINANCIALPERIODS Y
    WHERE  (NVL(Y.CLOSEDBY,' ') NOT LIKE '%SIS%') AND ORGID=ORGID_T)
    AND    ORGID=ORGID_T;

    -- DELETE ALL THE PREVIOUSLY INSERTED ROWS
    -- FOR THAT FY, AP AND PROJ_TRANS_TYPE

    DELETE FROM BATCH_MAXIMO.LBL_PROJ_FEEDERS A
    WHERE A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    AND   A.FISCAL_YEAR=FISCAL_YEAR_T
    AND   A.ACCOUNTING_PERIOD=ACCOUNTING_PERIOD_T
    AND   A.PROJ_TRANS_TYPE=STR_FEEDER_DEF_T.PROJ_TRANS_TYPE
    AND   A.LBL_PROJ_FEED1 IS NULL;

  --***********************************
  -- START PROCESSING THE TRANSACTIONS
  --***********************************
   FOR  ISSUES_RETURN_REC IN ISSUES_RETURN_CUR

    LOOP

     --**************
     -- GL ENTRY
     --**************

     IF (ISSUES_RETURN_REC.ISSUETYPE='ISSUE') THEN
       ACCT_T :=STR_FEEDER_DEF_T.ISSUE_PROJ_ACCT;
       LINE_DESCR_T :='SUMMARY:ISSUES(GL ENTRY)';
       DR_CR_T :='DR';
     END IF;

     IF (ISSUES_RETURN_REC.ISSUETYPE='RETURN') THEN
      ACCT_T :=STR_FEEDER_DEF_T.RETURN_PROJ_ACCT;
      LINE_DESCR_T :='SUMMARY:RETURNS(GL ENTRY)';
      DR_CR_T :='CR';
     END IF;

      -- CHECK WHETHER THE PROJECT IS ACTIVE,ELSE
      -- POST TO DROP OUT PROJECT/ACT ID
      PROJECT_ID_T    := NULL;
      ACTIVITY_ID_T   := NULL;

      BEGIN

       SELECT 1
       INTO  EXISTS_T
       FROM  MAXIMO.LBL_V_PROJACT A
       WHERE A.LBL_PROJECT_ID=ISSUES_RETURN_REC.LBL_PROJECT_ID
       AND   A.LBL_ACTIVITY_ID=ISSUES_RETURN_REC.LBL_ACTIVITY_ID
       AND   A.ACTIVE=1;
       -- ACTIVE PROJ/ACT ID
       PROJECT_ID_T  :=ISSUES_RETURN_REC.LBL_PROJECT_ID;
       ACTIVITY_ID_T :=ISSUES_RETURN_REC.LBL_ACTIVITY_ID;

      EXCEPTION WHEN OTHERS  THEN
        PROJECT_ID_T  := STR_FEEDER_DEF_T.DROP_PROJ_ID;
        ACTIVITY_ID_T := STR_FEEDER_DEF_T.DROP_ACT_ID;
      END;

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL, ACCT_T) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := ISSUES_RETURN_REC.ASSET_TYPE;
      END IF;

      RECORD_GL_ID_T := RECORD_GL_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T ,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     PROJECT_ID_T, ACTIVITY_ID_T,
     ACCT_T ,
     ISSUES_RETURN_REC.REFWO, ISSUES_RETURN_REC.ISSUETYPE,
     NULL,NULL, -- RESOURCE TYPE, RESOURCE CATEGORY TO BE DETERMINED AT THE TIME OF FORMATTING
     LINE_DESCR_T ,
     'EA',
     DR_CR_T,
     ISSUES_RETURN_REC.LINECOST,
     ISSUES_RETURN_REC.INACTIVE,
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL, -- DEPT, FUND CODE
     T_ASSET_TYPE
     );

     --*************************
     -- GL RELATED ENTRY OFFSET
     --*************************

     IF (ISSUES_RETURN_REC.ISSUETYPE='ISSUE') THEN
       ACCT_T :=STR_FEEDER_DEF_T.ISSUE_GL_ACCT;
       LINE_DESCR_T :='SUMMARY:ISSUES(GL ENTRY)';
       DR_CR_T :='CR';
     END IF;

     IF (ISSUES_RETURN_REC.ISSUETYPE='RETURN') THEN
      ACCT_T :=STR_FEEDER_DEF_T.RETURN_GL_ACCT;
      LINE_DESCR_T :='SUMMARY:RETURNS(GL ENTRY)';
      DR_CR_T :='DR';
     END IF;


      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL, ACCT_T) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := ISSUES_RETURN_REC.ASSET_TYPE;
      END IF;

     -- SEPAPARE ID FOR  GL ENTRIES
     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;

     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T ,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     NULL, NULL,-- LBL_PROJECT_ID, LBL_ACTIVITY_ID,
     ACCT_T ,
     NULL, --REFWO,
     ISSUES_RETURN_REC.ISSUETYPE,
     NULL,NULL, -- RESOURCE TYPE, RESOURCE CATEGORY TO BE DETERMINED AT THE TIME OF FORMATTING
     LINE_DESCR_T ,
     'EA',
     DR_CR_T,
     ISSUES_RETURN_REC.LINECOST,
     ISSUES_RETURN_REC.INACTIVE,
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL,  -- DEPT, FUND CODE
     T_ASSET_TYPE
     );

   END LOOP;

  --*********
  -- OVERAGES
  --*********
  FOR  OVERAGES_REC IN OVERAGES_CUR

    LOOP

     --*****************
     -- GL RELATED ENTRY
     --*****************

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.OVER_GL_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := OVERAGES_REC.ASSET_TYPE;
      END IF;

     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T, JOURNAL_ID_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     NULL,NULL, -- PROJECT ID, ACTIVITY ID,
     STR_FEEDER_DEF_T.OVER_GL_ACCT,
     NULL, 'OVERAGE', -- WORK ORDER NUMBER, TRANSTYPE
      NULL,NULL, -- RESOURCE TYPE, RESOURCE CATEGORY TO BE DETERMINED AT THE TIME OF FORMATTING
     'OVERAGES-GL ENTRY' ,
     'EA',
     'DR',
     OVERAGES_REC.LINECOST,
     0, -- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL,NULL ,-- DEPT, FUND
     T_ASSET_TYPE
     );

    --*****************************************
    -- OFFSET FOR OVERAGE
    --*****************************************


      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.OVER_PROJ_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := OVERAGES_REC.ASSET_TYPE;
      END IF;

    RECORD_GL_ID_T := RECORD_GL_ID_T + 1;


     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     STR_FEEDER_DEF_T.OVER_PROJ_ID, STR_FEEDER_DEF_T.OVER_ACTIVITY_ID,
     STR_FEEDER_DEF_T.OVER_PROJ_ACCT,
     NULL, 'OVERAGE', -- WORK ORDER NUMBER, TRANSTYPE
     NULL,NULL, -- RESOURCE TYPE, RESOURCE CATEGORY TO BE DETERMINED AT THE TIME OF FORMATTING
     'OVERAGES-PROJECT ENTRY' ,
     'EA',
     'CR',
     OVERAGES_REC.LINECOST,
     0,-- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL , -- DEPT, FUND
     T_ASSET_TYPE
     );

    END LOOP;

  --*********
  -- SHORTAGES
  --*********
  FOR  SHORTAGES_REC IN SHORTAGES_CURSOR

    LOOP

     --*****************
     -- GL RELATED ENTRY
     --*****************

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.SHORT_GL_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := SHORTAGES_REC.ASSET_TYPE;
      END IF;

     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     NULL,NULL, -- PROJECT ID, ACTIVITY ID,
     STR_FEEDER_DEF_T.SHORT_GL_ACCT,
     NULL, 'SHORTAGE', -- WORK ORDER NUMBER, TRANSTYPE
     NULL,NULL, -- RESOURCE TYPE, RESOURCE CATEGORY TO BE DETERMINED AT THE TIME OF FORMATTING
     'SHORTAGES-GL ENTRY' ,
     'EA',
     'CR',
     SHORTAGES_REC.LINECOST,
     0, -- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL, -- DEPT, FUND
     T_ASSET_TYPE
     );


     --************************
     -- GL RELATED OFFSET ENTRY
     --************************

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.SHORT_PROJ_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := SHORTAGES_REC.ASSET_TYPE;
      END IF;

     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- PROJECT RELATED
     STR_FEEDER_DEF_T.SHORT_PROJ_ID, STR_FEEDER_DEF_T.SHORT_ACTIVITY_ID,
     STR_FEEDER_DEF_T.SHORT_PROJ_ACCT,
     NULL, 'SHORTAGE', -- WORK ORDER NUMBER, TRANSTYPE
     NULL,NULL, -- RESOURCE TYPE, RESOURCE CATEGORY TO BE DETERMINED AT THE TIME OF FORMATTING
     'SHORTAGES-PROJECT ENTRY' ,
     'EA',
     'DR',
     SHORTAGES_REC.LINECOST,
      0, -- INACTIVE
      STR_FEEDER_DEF_T.ANALYSIS_TYPE,
      NULL, NULL, -- DEPT, FUND
      T_ASSET_TYPE
     );


    END LOOP;
 /*
  --******************************
  -- VALUE ADJUSTMENTS (POSITIVE)
  --*******************************
  FOR  VALUEADJ_REC IN VALUEADJ_CUR

    LOOP

     --*****************
     -- GL RELATED ENTRY
     --*****************

     IF (VALUEADJ_REC.ADJ_VALUE >0) THEN

      LINE_DESCR_T :='VALUE ADJ-POS-GL ENTRY: ' || VALUEADJ_REC.ITEMNUM;
      DR_CR_T :='DR';


     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE, JOURNAL_ID_T,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     ' ',' ', -- PROJECT ID, ACTIVITY ID,
     STR_FEEDER_DEF_T.VALADJ_GL_ACCT,
     ' ', 'VALUE-ADJ', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.VALADJ_RES_TYPE,STR_FEEDER_DEF_T.VALADJ_RES_CATG,
     LINE_DESCR_T ,
     'EA',
     DR_CR_T,
     ABS(VALUEADJ_REC.ADJ_VALUE),
      0, -- INACTIVE
      STR_FEEDER_DEF_T.ANALYSIS_TYPE,
      NULL, NULL -- DEPT FUND CODE
     );


     --**************
     -- GL OFFSET ENTRY
     --**************


      LINE_DESCR_T :='VALUE ADJ-POS-PROJ ENTRY: ' || VALUEADJ_REC.ITEMNUM;
      DR_CR_T :='CR';


     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;
     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE, JOURNAL_ID_T,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- PROJECT RELATED
     STR_FEEDER_DEF_T.VALADJ_POS_PROJECT_ID, STR_FEEDER_DEF_T.VALADJ_POS_ACTIVITY_ID,
     STR_FEEDER_DEF_T.VALADJ_PROJ_ACCT,
     ' ', 'VALUE-ADJ', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.OVSH_RES_TYPE, STR_FEEDER_DEF_T.OVSH_RES_CATG,
     LINE_DESCR_T,
     'EA',
     DR_CR_T,
    ABS(VALUEADJ_REC.ADJ_VALUE),
     0, -- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL -- DEPT, FUND CODE
    );

   END IF; --IF (VALUEADJ_REC.ADJ_VALUE >0) THEN

   END LOOP;


  --******************************
  -- VALUE ADJUSTMENTS (NEGATIVE)
  --*******************************
  FOR  VALUEADJ_REC IN VALUEADJ_CUR

    LOOP

     --*****************
     -- GL RELATED ENTRY
     --*****************

     IF (VALUEADJ_REC.ADJ_VALUE < 0) THEN


     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;


     LINE_DESCR_T :='VALUE ADJ-POS-PROJ ENTRY: ' || VALUEADJ_REC.ITEMNUM;
     DR_CR_T :='DR';


     RECORD_GL_ID_T := RECORD_GL_ID_T + 1;
     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE, JOURNAL_ID_T,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- PROJECT RELATED
     STR_FEEDER_DEF_T.VALADJ_NEG_PROJECT_ID, STR_FEEDER_DEF_T.VALADJ_NEG_ACTIVITY_ID,
     STR_FEEDER_DEF_T.VALADJ_PROJ_ACCT,
     ' ', 'VALUE-ADJ', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.OVSH_RES_TYPE, STR_FEEDER_DEF_T.OVSH_RES_CATG,
     LINE_DESCR_T,
     'EA',
     DR_CR_T,
    ABS(VALUEADJ_REC.ADJ_VALUE),
     0, -- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL -- DEPT, FUND CODE
    );

     --**************
     -- GL OFFSET ENTRY
     --**************
     LINE_DESCR_T :='VALUE ADJ-POS-GL ENTRY: ' || VALUEADJ_REC.ITEMNUM;
     DR_CR_T :='CR';

      RECORD_GL_ID_T := RECORD_GL_ID_T + 1;
     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE, JOURNAL_ID_T,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,
     RECORD_GL_ID_T, TRANS_DATE_T,
     'GL', -- GL RELATED
     ' ',' ', -- PROJECT ID, ACTIVITY ID,
     STR_FEEDER_DEF_T.VALADJ_GL_ACCT,
     ' ', 'VALUE-ADJ', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.VALADJ_RES_TYPE,STR_FEEDER_DEF_T.VALADJ_RES_CATG,
     LINE_DESCR_T ,
     'EA',
     DR_CR_T,
     ABS(VALUEADJ_REC.ADJ_VALUE),
      0, -- INACTIVE
      STR_FEEDER_DEF_T.ANALYSIS_TYPE,
      NULL, NULL -- DEPT FUND CODE
     );


   END IF; --IF (VALUEADJ_REC.ADJ_VALUE >0) THEN

   END LOOP;
  */


 RETURN 'SUCCESS';

 END;

 /**************************************************************
 FUNCTION TO GENERATE STORES FEEDERS
**************************************************************/
FUNCTION GENERATE_STORES_PROJ_FEEDER(I_ORGID  IN MAXIMO.SITE.ORGID%TYPE,
                                I_SITEID IN MAXIMO.SITE.SITEID%TYPE)
                    RETURN  VARCHAR2
 IS

 ORGID_T               SITE.ORGID%TYPE;
 SITEID_T              SITE.SITEID%TYPE;
 FISCAL_YEAR_T         BATCH_MAXIMO.LBL_PROJ_FEEDERS.FISCAL_YEAR%TYPE;
 ACCOUNTING_PERIOD_T   BATCH_MAXIMO.LBL_PROJ_FEEDERS.ACCOUNTING_PERIOD%TYPE;
 TRANS_DATE_T          BATCH_MAXIMO.LBL_PROJ_FEEDERS.TRANS_DATE%TYPE;
 STR_FEEDER_DEF_T      BATCH_MAXIMO.LBL_STORES_FEED_DEFAULTS%ROWTYPE;
 T_PERIOD_START_DATE   FINANCIALPERIODS.PERIODSTART%TYPE;
 T_PERIOD_END_DATE     FINANCIALPERIODS.PERIODEND%TYPE;
 JOURNAL_ID_T          BATCH_MAXIMO.LBL_PROJ_FEEDERS.JOURNAL_ID%TYPE;
 PROJECT_ID_T          LBL_V_PROJACT.LBL_PROJECT_ID%TYPE;
 ACTIVITY_ID_T         LBL_V_PROJACT.LBL_ACTIVITY_ID%TYPE;


 EXISTS_T              NUMBER(5);


 -- CURSOR FOR ISSUES AND RETURNS
 CURSOR ISSUES_RETURN_CUR IS
  SELECT NVL(A.REFWO,' ') REFWO, A.GLDEBITACCT,B.LBL_PROJECT_ID, B.LBL_ACTIVITY_ID,
         DECODE(B.ACTIVE,1,0,1) INACTIVE, -- INACTIVE
         A.ISSUETYPE,
         LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED') ASSET_TYPE,
         SUM(ABS(A.LINECOST)) LINECOST
  FROM MATUSETRANS A, LBL_V_PROJACT B
  WHERE A.ORGID=B.ORGID
  AND A.GLDEBITACCT=B.GLACCOUNT
  AND A.STORELOC NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
  AND A.ITEMNUM  NOT IN ('DIESEL','UNLEADED')
  AND A.TRANSDATE >= T_PERIOD_START_DATE
  AND A.TRANSDATE < T_PERIOD_END_DATE
  AND A.ORGID=ORGID_T
  AND A.SITEID=SITEID_T
  GROUP BY A.REFWO, A.GLDEBITACCT,B.LBL_PROJECT_ID,
           B.LBL_ACTIVITY_ID, B.ACTIVE, A.ISSUETYPE,
           LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED')
  ORDER BY ISSUETYPE, REFWO;

  -- CURSOR FOR OVERAGES
  CURSOR OVERAGES_CUR IS
    SELECT  LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED') ASSET_TYPE,
    SUM(ABS(A.LINECOST)) LINECOST
    FROM  MAXIMO.INVTRANS A
    WHERE A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    AND  (SUBSTR(A.GLDEBITACCT,1,4) = '1624' OR A.GLDEBITACCT='151924')
    AND   A.TRANSTYPE NOT IN ('ROUNDADJ')
    AND   A.STORELOC  NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   A.ITEMNUM   NOT IN ('DIESEL','UNLEADED')
    AND   A.TRANSDATE >= T_PERIOD_START_DATE
    AND   A.TRANSDATE < T_PERIOD_END_DATE
    AND   A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    GROUP BY  LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED')
    HAVING SUM(A.LINECOST) IS NOT NULL;


  -- CURSOR FOR SHORTAGES
   CURSOR SHORTAGES_CURSOR IS
    SELECT  LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED') ASSET_TYPE,
    SUM(ABS(A.LINECOST)) LINECOST
    FROM MAXIMO.INVTRANS A
    WHERE A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    AND  (SUBSTR(A.GLCREDITACCT,1,4) = '1625' OR A.GLCREDITACCT='151925')
    AND   A.TRANSTYPE NOT IN ('ROUNDADJ')
    AND   A.STORELOC NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   A.ITEMNUM NOT IN ('DIESEL','UNLEADED')
    AND   A.TRANSDATE >= T_PERIOD_START_DATE
    AND   A.TRANSDATE < T_PERIOD_END_DATE
    AND   A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    GROUP BY   LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),'NOTUSED')
    HAVING SUM(A.LINECOST) IS NOT NULL;


 -- CURSOR FOR VALUE ADJUSTMENTS
   CURSOR VALUEADJ_CUR IS
      SELECT  A.ITEMNUM, NVL(A.OTHERADJVALUE,0) ADJ_VALUE,
            LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(SUBSTR(A.ITEMNUM,1,2),' ') ASSET_TYPE
      FROM  BATCH_MAXIMO.LBL_ITEMSUMMARY A
      WHERE A.ITEMNUM NOT IN ('DIESEL','UNLEADED')
      AND   A.ORGID=ORGID_T
      AND   A.SITEID=SITEID_T
      AND   A.FISCAL_YEAR=FISCAL_YEAR_T
      AND   A.ACCOUNTING_PERIOD=ACCOUNTING_PERIOD_T
      AND   NVL(A.OTHERADJVALUE,0) !=0
      AND   NVL(A.OTHERADJUNITS,0)=0
      ORDER BY A.ITEMNUM;

  RECORD_PROJ_ID_T BATCH_MAXIMO.LBL_PROJ_FEEDERS.RECORD_ID%TYPE :=0;
  RETURN_T       VARCHAR2(50);
  ACCT_T         BATCH_MAXIMO.LBL_PROJ_FEEDERS.ACCOUNT%TYPE;
  LINE_DESCR_T   BATCH_MAXIMO.LBL_PROJ_FEEDERS.LINE_DESCR%TYPE;
  DR_CR_T        BATCH_MAXIMO.LBL_PROJ_FEEDERS.DR_CR%TYPE;
  T_ASSET_TYPE   BATCH_MAXIMO.lbl_proj_feeders.asset_type%TYPE;

 BEGIN

    IF (I_ORGID IS NULL OR LENGTH(I_ORGID)=0) THEN
       ORGID_T :='LBNL';
    ELSE
       ORGID_T :=I_ORGID;
    END IF;

    IF (I_SITEID IS NULL OR LENGTH(I_SITEID)=0) THEN
       SITEID_T:='FAC';
    ELSE
       SITEID_T :=I_SITEID;
    END IF;

    BEGIN

     -- GET THE DETAILS ABOUT THE STORES FEEDER DEFAULTS
     SELECT * INTO STR_FEEDER_DEF_T
     FROM BATCH_MAXIMO.LBL_STORES_FEED_DEFAULTS
     WHERE ORGID=ORGID_T
     AND   SITEID=SITEID_T;

     EXCEPTION  WHEN NO_DATA_FOUND THEN
       RETURN 'ERROR: STORES FEEDER DEFAULTS MISSING';

    END ;

    -- GET JOURNAL ID (COMMON TO ALL THE TRANSACTIONS)
    SELECT BATCH_MAXIMO.LBL_JOURNAL_SEQ.NEXTVAL
    INTO  JOURNAL_ID_T
    FROM  DUAL;


   -- GET THE VALUES OF JOURNAL DATE, FISCAL YEAR, ACCOUNTINT_PERIOD
   -- FROM THE FINANCIALPERIODS TABLE

    SELECT TRUNC(X.PERIODEND-1),TO_NUMBER(SUBSTR(X.FINANCIALPERIOD,1,4)),
    TO_NUMBER(SUBSTR(X.FINANCIALPERIOD, 5,2)), PERIODSTART, PERIODEND
    INTO   TRANS_DATE_T, FISCAL_YEAR_T, ACCOUNTING_PERIOD_T, T_PERIOD_START_DATE, T_PERIOD_END_DATE
    FROM   FINANCIALPERIODS X
    WHERE  X.FINANCIALPERIOD=(SELECT MIN(Y.FINANCIALPERIOD) FROM FINANCIALPERIODS Y
    WHERE  (NVL(Y.CLOSEDBY,' ') NOT LIKE '%STG%') AND ORGID=ORGID_T)
    AND    ORGID=ORGID_T;

    -- DELETE ALL THE PREVIOUSLY INSERTED ROWS
    -- FOR THAT FY, AP AND PROJ_TRANS_TYPE

    DELETE FROM BATCH_MAXIMO.LBL_PROJ_FEEDERS A
    WHERE A.ORGID=ORGID_T
    AND   A.SITEID=SITEID_T
    AND   A.FISCAL_YEAR=FISCAL_YEAR_T
    AND   A.ACCOUNTING_PERIOD=ACCOUNTING_PERIOD_T
    AND   A.PROJ_TRANS_TYPE=STR_FEEDER_DEF_T.PROJ_TRANS_TYPE
    AND   A.LBL_PROJ_FEED1 IS NULL;

  --***********************************
  -- START PROCESSING THE TRANSACTIONS
  --***********************************
   FOR  ISSUES_RETURN_REC IN ISSUES_RETURN_CUR

    LOOP

     --**************
     -- PROJ ENTRY
     --**************

     IF (ISSUES_RETURN_REC.ISSUETYPE='ISSUE') THEN
       ACCT_T :=STR_FEEDER_DEF_T.ISSUE_PROJ_ACCT;
       LINE_DESCR_T :='SUMMARY:ISSUES(PROJ ENTRY)';
       DR_CR_T :='DR';
     END IF;

     IF (ISSUES_RETURN_REC.ISSUETYPE='RETURN') THEN
      ACCT_T :=STR_FEEDER_DEF_T.RETURN_PROJ_ACCT;
      LINE_DESCR_T :='SUMMARY:RETURNS(PROJ ENTRY)';
      DR_CR_T :='CR';
     END IF;

      -- CHECK WHETHER THE PROJECT IS ACTIVE,ELSE
      -- POST TO DROP OUT PROJECT/ACT ID
      PROJECT_ID_T    := NULL;
      ACTIVITY_ID_T   := NULL;

      BEGIN

       SELECT 1
       INTO  EXISTS_T
       FROM  MAXIMO.LBL_V_PROJACT A
       WHERE A.LBL_PROJECT_ID=ISSUES_RETURN_REC.LBL_PROJECT_ID
       AND   A.LBL_ACTIVITY_ID=ISSUES_RETURN_REC.LBL_ACTIVITY_ID
       AND   A.ACTIVE=1;
       -- ACTIVE PROJ/ACT ID
       PROJECT_ID_T  :=ISSUES_RETURN_REC.LBL_PROJECT_ID;
       ACTIVITY_ID_T :=ISSUES_RETURN_REC.LBL_ACTIVITY_ID;

      EXCEPTION WHEN OTHERS  THEN
        PROJECT_ID_T  := STR_FEEDER_DEF_T.DROP_PROJ_ID;
        ACTIVITY_ID_T := STR_FEEDER_DEF_T.DROP_ACT_ID;
      END;





      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL, ACCT_T) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := ISSUES_RETURN_REC.ASSET_TYPE;
      END IF;

      RECORD_PROJ_ID_T := RECORD_PROJ_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T ,
     RECORD_PROJ_ID_T, TRANS_DATE_T,
     'PROJ', -- PROJ RELATED
     PROJECT_ID_T, ACTIVITY_ID_T,
     ACCT_T ,
     ISSUES_RETURN_REC.REFWO, ISSUES_RETURN_REC.ISSUETYPE,
     STR_FEEDER_DEF_T.DEF_RESOURCE_TYPE ,STR_FEEDER_DEF_T.DEF_RESOURCE_CATEGORY,
     LINE_DESCR_T ,
     'EA',
     DR_CR_T,
     ISSUES_RETURN_REC.LINECOST,
     ISSUES_RETURN_REC.INACTIVE,
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL, -- DEPT, FUND CODE
     T_ASSET_TYPE
     );

     --*************************
     -- PROJ RELATED ENTRY OFFSET
     --*************************

     IF (ISSUES_RETURN_REC.ISSUETYPE='ISSUE') THEN
       ACCT_T :=STR_FEEDER_DEF_T.ISSUE_PROJ_ACCT;
       LINE_DESCR_T :='SUMMARY:ISSUES(PROJ ENTRY)';
       DR_CR_T :='CR';

     END IF;

     IF (ISSUES_RETURN_REC.ISSUETYPE='RETURN') THEN
      ACCT_T :=STR_FEEDER_DEF_T.RETURN_PROJ_ACCT;
      LINE_DESCR_T :='SUMMARY:RETURNS(PROJ ENTRY)';
      DR_CR_T :='DR';
     END IF;


      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL, ACCT_T) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := ISSUES_RETURN_REC.ASSET_TYPE;
      END IF;

     -- SEPAPARE ID FOR  PROJ  ENTRIES
     RECORD_PROJ_ID_T := RECORD_PROJ_ID_T + 1;

     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T ,
     RECORD_PROJ_ID_T, TRANS_DATE_T,
     'PROJ', -- PROJ  RELATED
     STR_FEEDER_DEF_T.INVENTORY_PROJ_ID, STR_FEEDER_DEF_T.INVENTORY_PROJ_ACT,
     ACCT_T ,
     NULL, --REFWO,
     ISSUES_RETURN_REC.ISSUETYPE,
     STR_FEEDER_DEF_T.DEF_RESOURCE_TYPE ,STR_FEEDER_DEF_T.DEF_RESOURCE_CATEGORY,
     LINE_DESCR_T ,
     'EA',
     DR_CR_T,
     ISSUES_RETURN_REC.LINECOST,
     ISSUES_RETURN_REC.INACTIVE,
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL,  -- DEPT, FUND CODE
     T_ASSET_TYPE
     );

   END LOOP;

  --*********
  -- OVERAGES
  --*********
  FOR  OVERAGES_REC IN OVERAGES_CUR

    LOOP

     --*****************
     -- PROJ RELATED ENTRY
     --*****************

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.OVER_PROJ_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := OVERAGES_REC.ASSET_TYPE;
      END IF;

     RECORD_PROJ_ID_T := RECORD_PROJ_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T, JOURNAL_ID_T,
     RECORD_PROJ_ID_T, TRANS_DATE_T,
     'PROJ', -- PROJ RELATED
     STR_FEEDER_DEF_T.INVENTORY_PROJ_ID,STR_FEEDER_DEF_T.INVENTORY_PROJ_ACT,
     STR_FEEDER_DEF_T.OVER_PROJ_ACCT,
     NULL, 'OVERAGE', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.DEF_RESOURCE_TYPE ,STR_FEEDER_DEF_T.DEF_RESOURCE_CATEGORY,
     'OVERAGES-PROJ ENTRY' ,
     'EA',
     'DR',
     OVERAGES_REC.LINECOST,
     0, -- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL,NULL ,-- DEPT, FUND
     T_ASSET_TYPE
     );

    --*****************************************
    -- OFFSET FOR OVERAGE
    --*****************************************


      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.OVER_PROJ_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := OVERAGES_REC.ASSET_TYPE;
      END IF;

    RECORD_PROJ_ID_T := RECORD_PROJ_ID_T + 1;


     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T,
     RECORD_PROJ_ID_T, TRANS_DATE_T,
     'PROJ', -- PROJ  RELATED
     STR_FEEDER_DEF_T.OVER_PROJ_ID, STR_FEEDER_DEF_T.OVER_ACTIVITY_ID,
     STR_FEEDER_DEF_T.OVER_PROJ_ACCT,
     NULL, 'OVERAGE', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.DEF_RESOURCE_TYPE ,STR_FEEDER_DEF_T.DEF_RESOURCE_CATEGORY,
     'OVERAGES-PROJECT ENTRY' ,
     'EA',
     'CR',
     OVERAGES_REC.LINECOST,
     0,-- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL , -- DEPT, FUND
     T_ASSET_TYPE
     );

    END LOOP;

  --*********
  -- SHORTAGES
  --*********
  FOR  SHORTAGES_REC IN SHORTAGES_CURSOR

    LOOP

     --*****************
     -- PROJ RELATED ENTRY
     --*****************

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.SHORT_PROJ_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := SHORTAGES_REC.ASSET_TYPE;
      END IF;

     RECORD_PROJ_ID_T := RECORD_PROJ_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T,
     RECORD_PROJ_ID_T, TRANS_DATE_T,
     'PROJ', -- PROJ RELATED
     STR_FEEDER_DEF_T.INVENTORY_PROJ_ID,STR_FEEDER_DEF_T.INVENTORY_PROJ_ACT, -- PROJECT ID, ACTIVITY ID,
     STR_FEEDER_DEF_T.SHORT_PROJ_ACCT,
     NULL, 'SHORTAGE', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.DEF_RESOURCE_TYPE ,STR_FEEDER_DEF_T.DEF_RESOURCE_CATEGORY,
     'SHORTAGES-PROJ ENTRY' ,
     'EA',
     'CR',
     SHORTAGES_REC.LINECOST,
     0, -- INACTIVE
     STR_FEEDER_DEF_T.ANALYSIS_TYPE,
     NULL, NULL, -- DEPT, FUND
     T_ASSET_TYPE
     );


     --************************
     -- PROJ RELATED OFFSET ENTRY
     --************************

      -- DETERMINE WHAT VALUE TO WRITE ASSET TYPE
      IF (LBL_MXPSIFACE_PKG.GET_ASSET_TYPE(NULL,  STR_FEEDER_DEF_T.SHORT_PROJ_ACCT) IS NULL) THEN
        T_ASSET_TYPE := NULL;
      ELSE
        T_ASSET_TYPE := SHORTAGES_REC.ASSET_TYPE;
      END IF;

     RECORD_PROJ_ID_T := RECORD_PROJ_ID_T + 1;

     -- INSERT ROW IN LBL_PROJ_FEEDERS TABLE
     RETURN_T :=LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T,
     SITEID_T, STR_FEEDER_DEF_T.PROJ_TRANS_TYPE,
     FISCAL_YEAR_T,   ACCOUNTING_PERIOD_T,  JOURNAL_ID_T,
     RECORD_PROJ_ID_T, TRANS_DATE_T,
     'PROJ', -- PROJECT RELATED
     STR_FEEDER_DEF_T.SHORT_PROJ_ID, STR_FEEDER_DEF_T.SHORT_ACTIVITY_ID,
     STR_FEEDER_DEF_T.SHORT_PROJ_ACCT,
     NULL, 'SHORTAGE', -- WORK ORDER NUMBER, TRANSTYPE
     STR_FEEDER_DEF_T.DEF_RESOURCE_TYPE ,STR_FEEDER_DEF_T.DEF_RESOURCE_CATEGORY,
     'SHORTAGES-PROJECT ENTRY' ,
     'EA',
     'DR',
     SHORTAGES_REC.LINECOST,
      0, -- INACTIVE
      STR_FEEDER_DEF_T.ANALYSIS_TYPE,
      NULL, NULL, -- DEPT, FUND
      T_ASSET_TYPE
     );


    END LOOP;

RETURN 'SUCCESS';

 END;


END;
