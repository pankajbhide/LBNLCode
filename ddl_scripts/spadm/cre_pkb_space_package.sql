-- Start of DDL Script for Package Body SPADM.SPACE_PACKAGE
-- Generated 21-Sep-2017 11:35:30 from SPADM@MMOPRD

CREATE OR REPLACE 
PACKAGE BODY space_package IS


--******************************************
--
--  PACKAGE BODY : SPACE_PACKAGE
--
--  CONNECT SPADM@MMOXXX 
--*****************************************
--DEFINE TABLE TYPE CONTAINING THE PROJECTS

TYPE PROJECT_TBL_TYPE IS
     TABLE OF  SPADM.SPACE_CHARGE_DISTRIBUTION.PROJECT_ID%TYPE
     INDEX BY BINARY_INTEGER;

-- THE INSTANCE OF PROJECT TABLE TYPE

PROJECT_TBL  PROJECT_TBL_TYPE;

 ORGID_T    LOCATIONS.ORGID%TYPE  :='LBNL';
 SITEID_T   LOCATIONS.SITEID%TYPE :='FAC';

/* FUNCTION TO GET THE DOMAIN DESCRIPTION FOR ALN DOMAIN */
FUNCTION GET_ALNDOMAIN_DESC(DOMAINID_I IN maximo.ALNDOMAIN.DOMAINID%TYPE,
                            VALUE_I    IN maximo.ALNDOMAIN.VALUE%TYPE)
                            RETURN     maximo.ALNDOMAIN.DESCRIPTION%TYPE
IS
 DESCRIPTION_O  maximo.ALNDOMAIN.DESCRIPTION%TYPE;
 BEGIN
   SELECT DESCRIPTION INTO DESCRIPTION_O FROM MAXIMO.ALNDOMAIN
   WHERE DOMAINID=RTRIM(DOMAINID_I) AND VALUE=RTRIM(VALUE_I);

   RETURN SUBSTR(DESCRIPTION_O,1,30);

    EXCEPTION

          WHEN OTHERS THEN
         DESCRIPTION_O := NULL;

    RETURN DESCRIPTION_O;

END;

/* PROCEDURE TO GET THE BUILDING DETAILS */
PROCEDURE GET_BUILDING_DETAILS(BUILDING_NUMBER_I   IN  SPADM.SPACE_BUILDING.BUILDING_NUMBER%TYPE,
                               BUILDING_RECORD_O   OUT SPADM.SPACE_BUILDING%ROWTYPE)

IS
 BEGIN

     SELECT * INTO BUILDING_RECORD_O FROM SPADM.SPACE_BUILDING
     WHERE  BUILDING_NUMBER=RTRIM(BUILDING_NUMBER_I);

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        BUILDING_RECORD_O := NULL;
        NULL;

          WHEN OTHERS THEN
        BUILDING_RECORD_O := NULL;
        NULL;
END;

/* PROCEDURE TO GET FLOOR INFORMATION */
PROCEDURE GET_FLOOR_DETAILS(BUILDING_NUMBER_I IN  SPADM.SPACE_FLOOR.BUILDING_NUMBER%TYPE,
                            FLOOR_NUMBER_I    IN  SPADM.SPACE_FLOOR.FLOOR_NUMBER%TYPE,
                            FLOOR_RECORD_O    OUT SPADM.SPACE_FLOOR%ROWTYPE)

IS
BEGIN
 SELECT * INTO FLOOR_RECORD_O
 FROM SPACE_FLOOR
 WHERE BUILDING_NUMBER=RTRIM(BUILDING_NUMBER_I) AND
       FLOOR_NUMBER=RTRIM(FLOOR_NUMBER_I);

 EXCEPTION
      WHEN NO_DATA_FOUND THEN
             FLOOR_RECORD_O  := NULL;
             NULL;

      WHEN OTHERS THEN
           FLOOR_RECORD_O := NULL;
             NULL;
END;

PROCEDURE GET_ROOM_DETAILS(BUILDING_NUMBER_I    IN SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE,
                           FLOOR_NUMBER_I       IN SPADM.SPACE_ROOM.FLOOR_NUMBER%TYPE,
                           ROOM_NUMBER_I        IN SPADM.SPACE_ROOM.FLOOR_NUMBER%TYPE,
                           ROOM_RECORD_O        OUT SPADM.SPACE_ROOM%ROWTYPE)
IS
BEGIN

    SELECT * INTO ROOM_RECORD_O
    FROM   SPADM.SPACE_ROOM
    WHERE  BUILDING_NUMBER=RTRIM(BUILDING_NUMBER_I)  AND
           FLOOR_NUMBER   =RTRIM(FLOOR_NUMBER_I)     AND
           ROOM_NUMBER    =RTRIM(ROOM_NUMBER_I);

  EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ROOM_RECORD_O := NULL;
         NULL;

           WHEN OTHERS THEN
           ROOM_RECORD_O := NULL;

END;

/* FUNCTION TO GET NAME OF PROJECT */
FUNCTION GET_PROJECT_NAME(PROJECT_ID_I  IN  maximo.lbl_v_coa.glaccount%TYPE)
                         RETURN maximo.lbl_v_coa.accountname%TYPE
IS
     DESCR_O       MAXIMO.LBL_V_COA.accountname%TYPE;
BEGIN
     SELECT accountname into descr_o
     from maximo.lbl_v_coa
     where glaccount=project_id_i
     and   active=1;

     RETURN DESCR_O;

    EXCEPTION

     WHEN OTHERS THEN
            DESCR_O := NULL;

         RETURN DESCR_O;
END;

/* FUNCTION TO GET DESCRIPTION OF ORGANIZATION LEVEL */
FUNCTION GET_LEVEL_DESC (LEVEL1_I  IN SPADM.SPACE_ROOM.ORG_LEVEL_1_CODE%TYPE,
                         LEVEL2_I  IN SPADM.SPACE_ROOM.ORG_LEVEL_2_CODE%TYPE,
                         LEVEL3_I  IN SPADM.SPACE_ROOM.ORG_LEVEL_3_CODE%TYPE,
                         LEVEL4_I  IN SPADM.SPACE_ROOM.ORG_LEVEL_4_CODE%TYPE,
                         LEVEL_NUMBER_I IN NUMBER)
                         RETURN EDW_SHARE.ORG_DEPARTMENT.DESCR%TYPE
IS
DESCR_O    EDW_SHARE.ORG_DEPARTMENT.DESCR%TYPE;
DESCR_O_T  EDW_SHARE.ORG_DEPARTMENT.DESCR%TYPE;
BEGIN
      IF LEVEL_NUMBER_I = 1 THEN
          SELECT DESCR INTO DESCR_O_T FROM EDW_SHARE.ORG_DEPARTMENT
          WHERE DEPTID=RTRIM(LEVEL1_I);

                  DESCR_O := DESCR_O_T;
              RETURN DESCR_O;


      ELSIF LEVEL_NUMBER_I = 2 THEN
          SELECT DESCR INTO DESCR_O_T FROM EDW_SHARE.ORG_GROUP
          WHERE DEPTID=RTRIM(LEVEL1_I)     AND
                ZZ_GROUP=RTRIM(LEVEL2_I);

                  DESCR_O := DESCR_O_T;
              RETURN DESCR_O;

      ELSIF LEVEL_NUMBER_I = 3 THEN
          SELECT DESCR INTO DESCR_O_T FROM EDW_SHARE.ORG_UNIT
          WHERE DEPTID=RTRIM(LEVEL1_I)     AND
                ZZ_GROUP=RTRIM(LEVEL2_I)   AND
                ZZ_UNIT=RTRIM(LEVEL3_I);

                  DESCR_O := DESCR_O_T;
              RETURN DESCR_O;

      ELSIF LEVEL_NUMBER_I = 4 THEN
          SELECT DESCR INTO DESCR_O_T FROM EDW_SHARE.ORG_LEVEL4
          WHERE DEPTID=RTRIM(LEVEL1_I)     AND
                ZZ_GROUP=RTRIM(LEVEL2_I)   AND
                ZZ_UNIT=RTRIM(LEVEL3_I)    AND
                ZZ_LEVEL4=RTRIM(LEVEL4_I);

                DESCR_O := DESCR_O_T;
              RETURN DESCR_O;
      END IF;

      EXCEPTION

        WHEN OTHERS THEN
            DESCR_O_T := NULL;


        DESCR_O := DESCR_O_T;
            RETURN DESCR_O;
END;

/* FUNCTION TO FORMAT THE INPUT STRING FOR NUMBER OF CHARACTERS SPECIFIED
   USED FOR BUIDING AND ROOM NUMBERING */
FUNCTION FORMAT_STR(STR_I IN VARCHAR2,
                    NO_OF_DIGITS_I IN NUMBER)
                    RETURN VARCHAR2
IS
  LENGTH_T NUMBER(3);
  STR_O    VARCHAR2(10);
  STR_T    VARCHAR2(10);
  REMAINING_STR_T       VARCHAR2(10);
  LAST_DIGIT_T VARCHAR2(1);
  IS_ALPHA NUMBER(3);
BEGIN

           IS_ALPHA := 0;
           STR_T := LTRIM(RTRIM(STR_I));
           LENGTH_T := LENGTH(STR_T);
           IF    (LENGTH_T = NO_OF_DIGITS_I) OR (UPPER(SUBSTR(STR_T,1,1)) BETWEEN 'A' AND 'Z')THEN
                  STR_O := STR_T;
           ELSE
                 LAST_DIGIT_T := SUBSTR(STR_T, LENGTH_T, 1);
               IF UPPER(LAST_DIGIT_T) BETWEEN 'A' AND 'Z' THEN
                           IS_ALPHA := 1;
                           IF LENGTH_T=1 THEN
                              LENGTH_T := 1;
                           ELSE
                              LENGTH_T :=(LENGTH_T -1);
                           END IF;

                           REMAINING_STR_T := SUBSTR(STR_T,1,LENGTH_T);
                        ELSE
                           REMAINING_STR_T := STR_T;
                     END IF;

                   IF IS_ALPHA = 1 THEN
                           STR_O := LPAD(REMAINING_STR_T, (NO_OF_DIGITS_I-1),'0') || LAST_DIGIT_T;
                     ELSE
                           STR_O := LPAD (REMAINING_STR_T, (NO_OF_DIGITS_I-1),'0');
                     END IF;

                   STR_O := LTRIM(RTRIM(STR_O));
               END IF;

RETURN STR_O;
END;

/* PROCEDURE TO PREPARE LOCATION CODE */
FUNCTION PREPARE_LOCATION(BUILDING_NUMBER_I IN   SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE,
                          FLOOR_NUMBER_I    IN   SPADM.SPACE_ROOM.FLOOR_NUMBER%TYPE,
                          ROOM_NUMBER_I     IN   SPADM.SPACE_ROOM.ROOM_NUMBER%TYPE)
         RETURN LOCATIONS.LOCATION%TYPE
IS
BUILDING_NUMBER_T SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE;
ROOM_NUMBER_T     SPADM.SPACE_ROOM.ROOM_NUMBER%TYPE;
LOCATION_O        LOCATIONS.LOCATION%TYPE;
BEGIN

     IF ROOM_NUMBER_I IS NOT NULL THEN

             BUILDING_NUMBER_T := LTRIM(RTRIM(SUBSTR(BUILDING_NUMBER_I,1,4)));
             BUILDING_NUMBER_T := FORMAT_STR(BUILDING_NUMBER_T, 4);

             IF (LENGTH(ROOM_NUMBER_I) <= 5) THEN  
             
             ROOM_NUMBER_T     := LTRIM(RTRIM(SUBSTR(ROOM_NUMBER_I,1,5)));
             ROOM_NUMBER_T     := FORMAT_STR(ROOM_NUMBER_T, 5);
             
             END IF;
             -- ROOM CAN HAVE UPTO 6 CHARACTERS REVISED BY PANKAJ ON 8/28/12  
             
            IF (LENGTH(TRIM(ROOM_NUMBER_I)) > 5) THEN 
             
             ROOM_NUMBER_T     := LTRIM(RTRIM(SUBSTR(ROOM_NUMBER_I,1,6)));
             ROOM_NUMBER_T     := FORMAT_STR(ROOM_NUMBER_T, 6);
             
             END IF;

         LOCATION_O := LTRIM(RTRIM((BUILDING_NUMBER_T|| '-' || ROOM_NUMBER_T)));

     ELSIF FLOOR_NUMBER_I IS NOT NULL THEN

         BUILDING_NUMBER_T := LTRIM(RTRIM(SUBSTR(BUILDING_NUMBER_I,1,4)));
             BUILDING_NUMBER_T := FORMAT_STR(BUILDING_NUMBER_T, 4);
         LOCATION_O := LTRIM(RTRIM(BUILDING_NUMBER_T || '-FL' ||   LTRIM(RTRIM(SUBSTR(FLOOR_NUMBER_I,1,2)))));

     ELSIF BUILDING_NUMBER_I IS NOT NULL THEN

         BUILDING_NUMBER_T := LTRIM(RTRIM(SUBSTR(BUILDING_NUMBER_I,1,4)));
             BUILDING_NUMBER_T := FORMAT_STR(BUILDING_NUMBER_T, 4);
         LOCATION_O := LTRIM(RTRIM(BUILDING_NUMBER_T));


     END IF;


                RETURN LOCATION_O;
END;

/* FUNCTION TO RETURN THE NEXT LDKEY USED FOR LONGDESCRIPTION TABLE */
/* THIS FUNCTION ASSUMES THAT THE LDKEY IS GENERATED FOR THE 
   LOCATIONS TABLE.............. MXES */
FUNCTION GET_LDKEY RETURN NUMBER
IS
  LDKEY_O LONGDESCRIPTION.LDKEY%TYPE;
BEGIN

  SELECT MAXIMO.LOCATIONSSEQ.NEXTVAL 
  INTO LDKEY_O 
  FROM DUAL;

  RETURN LDKEY_O;
END;

/* FUNCTION TO GET THE LONG DESCRIPTION TEXT FROM LONGDESCRIPTION TABLE */
FUNCTION GET_LDTEXT(LDKEY_I  IN LONGDESCRIPTION.LDKEY%TYPE,
                    LDOWNERTABLE_I  IN LONGDESCRIPTION.LDOWNERTABLE%TYPE,
                    LDOWNERCOL_I    IN LONGDESCRIPTION.LDOWNERCOL%TYPE)
                    RETURN VARCHAR2  -- FOR ORACLE FORMS COMPATIBILITY (MXES) 
                    --RETURN LONGDESCRIPTION.LDTEXT%TYPE
IS
 LDTEXT_CLOB_T LONGDESCRIPTION.LDTEXT%TYPE;
 LDTEXT_VARCHAR_T VARCHAR2(32000) :=NULL;
 
BEGIN
      SELECT LDTEXT INTO LDTEXT_CLOB_T FROM LONGDESCRIPTION
      WHERE   LDOWNERTABLE=LDOWNERTABLE_I   AND
              LDOWNERCOL=LDOWNERCOL_I       AND
              LDKEY=LDKEY_I;
       BEGIN 
        LDTEXT_VARCHAR_T := DBMS_LOB.SUBSTR(LDTEXT_CLOB_T,32000,1);
               
       EXCEPTION 
        WHEN OTHERS THEN 
          NULL;
       END;                   
 
    RETURN LDTEXT_VARCHAR_T;

    EXCEPTION

      WHEN OTHERS THEN
          NULL;

     RETURN LDTEXT_VARCHAR_T;
END;

/* INSERT INTO MAXIMO TABLES */
PROCEDURE INSERT_LOCATION_TABLES(LOCATION_I IN LOCATIONS.LOCATION%TYPE,
                                 PARENT_I   IN LOCHIERARCHY.PARENT%TYPE,
                                 LDKEY_I    IN LONGDESCRIPTION.LDKEY%TYPE,
                                 LDTEXT_I   IN LONGDESCRIPTION.LDTEXT%TYPE,
                                 CHANGEBY_I IN LOCATIONS.CHANGEBY%TYPE)
IS
   TBL_ROWS_COUNT_T NUMBER(4);
   ANCESTOR_ROWS_CNT NUMBER(4);
   LOCANCESTOR_T LOCANCESTOR.ANCESTOR%TYPE;
   PARENT_T  LOCHIERARCHY.PARENT%TYPE;
   LOCATION_T    LOCATIONS.LOCATION%TYPE;
   CURSOR LOCANCESTOR_CUR IS SELECT  ANCESTOR FROM LOCANCESTOR
                             WHERE   LOCATION=PARENT_T;
                             
   
BEGIN
   
    -- INSERT RECORD INTO MAXIMO LOCOPER TABLE

    TBL_ROWS_COUNT_T :=0;
    LOCATION_T := LTRIM(RTRIM(LOCATION_I));
    PARENT_T := LTRIM(RTRIM(PARENT_I));

    SELECT COUNT(*) INTO TBL_ROWS_COUNT_T
    FROM MAXIMO.LOCOPER
    WHERE LOCATION=LOCATION_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF TBL_ROWS_COUNT_T = 0 THEN
          INSERT INTO LOCOPER (LOCATION, ORGID,SITEID, LOCOPERID) 
          VALUES (LOCATION_T,ORGID_T, SITEID_T, MAXIMO.LOCOPERSEQ.NEXTVAL); -- MXES 
    END IF;

    -- INSERT RECORD IN MAXIMO LOCHIERARCHY TABLE
    TBL_ROWS_COUNT_T :=0;
     SELECT COUNT(*) INTO TBL_ROWS_COUNT_T
     FROM LOCHIERARCHY
     WHERE LOCATION=LOCATION_T AND
           PARENT=PARENT_T     AND
           ORGID=ORGID_T       AND 
           SITEID=SITEID_T;
        

    IF TBL_ROWS_COUNT_T = 0  THEN
         INSERT INTO LOCHIERARCHY(LOCATION,PARENT,SYSTEMID,CHILDREN,
         ORGID, SITEID, LOCHIERARCHYID)
         VALUES (LOCATION_T, PARENT_T, 'PRIMARY',0, 
         ORGID_T, SITEID_T,MAXIMO.LOCHIERARCHYSEQ.NEXTVAL); -- MXES 
    END IF;


    -- NOW CHANGE PARENT RECORD TO INDICATE THAT IT HAS CHILD
    -- SET CHILDREN FLAG TO 1

    TBL_ROWS_COUNT_T :=0;
     SELECT COUNT(*) INTO TBL_ROWS_COUNT_T
     FROM LOCHIERARCHY
     WHERE LOCATION=PARENT_T  
     AND   ORGID=ORGID_T      
     AND   SITEID=SITEID_T;
        

     IF TBL_ROWS_COUNT_T > 0 THEN
        UPDATE LOCHIERARCHY A
        SET   A.CHILDREN=1   -- MXES 
        WHERE A.LOCATION=PARENT_T
        AND   A.ORGID=ORGID_T
        AND   A.SITEID=SITEID_T;
     END IF;


    -- INSERT RECORD/S INTO MAXIMO LOCANCESTOR
    TBL_ROWS_COUNT_T :=0;
    SELECT COUNT(*) INTO TBL_ROWS_COUNT_T  FROM LOCANCESTOR
    WHERE LOCATION=LOCATION_T AND
          ANCESTOR=LOCATION_T AND
          ORGID=ORGID_T       AND
          SITEID=SITEID_T;

    IF TBL_ROWS_COUNT_T = 0 THEN

     -- INSERT ITS OWN RECORD
      INSERT INTO LOCANCESTOR(LOCATION,ANCESTOR,SYSTEMID,
                   ORGID,SITEID,LOCANCESTOR.LOCANCESTORID)
         VALUES (LOCATION_T, LOCATION_T,'PRIMARY',
                 ORGID_T, SITEID_T, MAXIMO.LOCANCESTORSEQ.NEXTVAL); -- MXES 

     -- NOW START INSERTING FOR ITS ANCESTORS
        IF NOT LOCANCESTOR_CUR%ISOPEN THEN
               OPEN LOCANCESTOR_CUR;
        END IF;
        
        LOOP
            FETCH LOCANCESTOR_CUR INTO LOCANCESTOR_T;

            EXIT WHEN LOCANCESTOR_CUR%NOTFOUND;
              LOCANCESTOR_T := LTRIM(RTRIM(LOCANCESTOR_T));
              ANCESTOR_ROWS_CNT :=0;
              
                   SELECT COUNT(*) INTO ANCESTOR_ROWS_CNT FROM LOCANCESTOR
                   WHERE LOCATION=LOCATION_T    AND
                         ANCESTOR=LOCANCESTOR_T AND
                         SYSTEMID='PRIMARY'     AND 
                         ORGID=ORGID_T          AND 
                         SITEID=SITEID_T;
                         
                   IF ANCESTOR_ROWS_CNT = 0 THEN
                      INSERT INTO LOCANCESTOR (LOCATION,ANCESTOR,SYSTEMID,
                                  ORGID, SITEID, LOCANCESTOR.LOCANCESTORID)
                      VALUES (LOCATION_T,LOCANCESTOR_T,'PRIMARY',
                            ORGID_T, SITEID_T, MAXIMO.LOCANCESTORSEQ.NEXTVAL);
                   END IF;
           END LOOP;
           
                 IF LOCANCESTOR_CUR%ISOPEN THEN
                    CLOSE LOCANCESTOR_CUR;
                END IF;
                
             END IF;  -- IF COUNT OF LOCANCESTOR IS = 0
             
             -- ADDED BY PANKAJ ON 4/21/10
             UPDATE LOCATIONS
             SET STATUS='OPERATING'
             WHERE LOCATION=LOCATION_I;
             

        -- INSERT RECORD INTO LONGDESCRIPTION TABLE IF APPLICABLE
        IF (LDKEY_I IS NOT NULL) AND (LDTEXT_I IS NOT NULL) THEN
             TBL_ROWS_COUNT_T := 0;
           SELECT COUNT(*) INTO  TBL_ROWS_COUNT_T
           FROM LONGDESCRIPTION
           WHERE LDKEY=LDKEY_I 
           AND  LDOWNERTABLE='LOCATIONS' 
           AND  LDOWNERCOL='DESCRIPTION';
           
           -- MXES 
           IF TBL_ROWS_COUNT_T = 0  THEN
              INSERT INTO LONGDESCRIPTION (LDKEY, LDOWNERTABLE, LDOWNERCOL,LDTEXT,
                                           LANGCODE, LONGDESCRIPTION.LONGDESCRIPTIONID)
              VALUES (LDKEY_I, 'LOCATIONS','DESCRIPTION',LDTEXT_I,
                      'EN', MAXIMO.LONGDESCRIPTIONSEQ.NEXTVAL);
                      
              UPDATE LOCATIONS
              SET HASLD=1
              WHERE LOCATION=LOCATION_I;
                   
           END IF;
                   
        END IF;
END;

/* PROCEDURE TO INSERT BUILDING DETAILS INTO THE TABLES OTHER THAN THE BASE VIEW */
PROCEDURE INSERT_BUILDING(BUILDING_NUMBER_I IN SPADM.SPACE_BUILDING.BUILDING_NUMBER%TYPE,
                          LOCALITY_I        IN SPADM.SPACE_BUILDING.LOCALITY%TYPE,
                          NO_OF_FLOORS_I    IN NUMBER,
                          LDKEY_I           IN LONGDESCRIPTION.LDKEY%TYPE,
                          LDTEXT_I          IN VARCHAR2, -- FORMS COMATIBILITY (MXES) 
                          --LDTEXT_I          IN LONGDESCRIPTION.LDTEXT%TYPE,
                          INACTIVE_I        IN SPADM.SPACE_BUILDING.INACTIVE%TYPE,
                          CHANGEBY_I        IN LOCATIONS.CHANGEBY%TYPE)
IS
   PARENT_T     LOCHIERARCHY.PARENT%TYPE;
   LOCATION_T LOCATIONS.LOCATION%TYPE;
   FLOOR_NUMBER_T LOCATIONS.LOCATION%TYPE;
   NO_OF_FLOORS_T NUMBER;
   FLOOR_DESCRIPTION_T LOCATIONS.DESCRIPTION%TYPE;
   TBL_ROWS_COUNT_T NUMBER;
   LDTEXT_T  LONGDESCRIPTION.ldtext%TYPE :=NULL;

BEGIN

     -- DECIDE THE PARENT LOCATION FOR THE BUILDING
     PARENT_T := LTRIM(RTRIM(LOCALITY_I));

     -- GET LOCATION CODE FOR MAXIMO TABLES
     LOCATION_T := PREPARE_LOCATION(BUILDING_NUMBER_I, NULL, NULL);

     BEGIN
       LDTEXT_T := TO_CLOB(LDTEXT_I);
     EXCEPTION WHEN 
      OTHERS THEN
        NULL; 
     END;
     -- NOW INSERT INTO OTHER LOCATION RELATED TABLES
     INSERT_LOCATION_TABLES(LOCATION_T, PARENT_T, LDKEY_I, LDTEXT_T, CHANGEBY_I);

     -- ALSO INSERT RECORDS FOR FLOOR ENTITY
     NO_OF_FLOORS_T := 1;

     IF (NO_OF_FLOORS_I IS NOT NULL) AND (NO_OF_FLOORS_I > 0) THEN

        -- PARENT BECOMES THE BUILDING
        PARENT_T := LOCATION_T;

      WHILE (NO_OF_FLOORS_T <= NO_OF_FLOORS_I)
      LOOP

          FLOOR_NUMBER_T :=LTRIM(RTRIM(TO_CHAR(NO_OF_FLOORS_T)));
          FLOOR_DESCRIPTION_T := 'BUILDING: ' || LTRIM(RTRIM(BUILDING_NUMBER_I)) || ' FLOOR: ' || FLOOR_NUMBER_T;

        -- GET FLOOR LOCATION CODE FOR MAXIMO TABLES
           LOCATION_T := PREPARE_LOCATION(BUILDING_NUMBER_I, FLOOR_NUMBER_T, NULL);

        -- INSERT FLOOR RECORD INTO LOCATIONS TABLE
        TBL_ROWS_COUNT_T :=0;
        SELECT COUNT(*) INTO TBL_ROWS_COUNT_T  FROM LOCATIONS
                WHERE LOCATION=LOCATION_T;
        IF TBL_ROWS_COUNT_T = 0 THEN
              INSERT INTO LOCATIONS (LOCATION, DESCRIPTION, TYPE,
                                     CONTROLACC, GLACCOUNT, CHANGEBY, CHANGEDATE,
                                     DISABLED, LO1, LO2, LO4, GISPARAM1,
                                     ORGID, SITEID, LOCATIONS.LOCATIONSID,
                                     LANGCODE)
                     VALUES (LOCATION_T, FLOOR_DESCRIPTION_T, 'OPERATING',
                      ' ',' ',CHANGEBY_I, SYSDATE,
                      INACTIVE_I, BUILDING_NUMBER_I, FLOOR_NUMBER_T, FLOOR_NUMBER_T,'F',
                      ORGID_T, SITEID_T, MAXIMO.LOCATIONSSEQ.NEXTVAL,  -- MXES 
                      'EN');
        END IF;

        -- NOW INSERT INTO OTHER LOCATION RELATED TABLES
       INSERT_LOCATION_TABLES(LOCATION_T, PARENT_T, NULL, NULL, CHANGEBY_I);
       NO_OF_FLOORS_T := NO_OF_FLOORS_T  + 1;

      END LOOP;

    END IF;     -- NO OF FLOORS ARE NOT NULL AND > 0
END;

/* PROCEDURE TO INSERT FLOOR DETAILS INTO THE TABLES OTHER THAN THE
   BASE VIEW */
PROCEDURE INSERT_FLOOR(BUILDING_NUMBER_I IN SPADM.SPACE_FLOOR.BUILDING_NUMBER%TYPE,
                       FLOOR_NUMBER_I    IN SPADM.SPACE_FLOOR.FLOOR_NUMBER%TYPE,  
                       INACTIVE_I        IN SPADM.SPACE_FLOOR.INACTIVE%TYPE,
                       LEVEL_NUMBER_I    IN SPADM.SPACE_FLOOR.LEVEL_NUMBER%TYPE,
                       CHANGEBY_I        IN LOCATIONS.CHANGEBY%TYPE)
 IS
   
   LOCATION_T LOCATIONS.LOCATION%TYPE;
   
BEGIN

                       
   -- GET LOCATION CODE FOR MAXIMO TABLES
     LOCATION_T := PREPARE_LOCATION(BUILDING_NUMBER_I, FLOOR_NUMBER_I, NULL);
     
     -- NOW INSERT INTO OTHER LOCATION RELATED TABLES
      INSERT_LOCATION_TABLES(LOCATION_T, BUILDING_NUMBER_I, NULL, NULL, 'ARCHIBUS');
      
 END;
                     

/* PROCEDURE TO INSERT ROOM DETAILS INTO THE TABLES OTHER THAN THE BASE VIEW */
PROCEDURE INSERT_ROOM(BUILDING_NUMBER_I IN SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE,
                      FLOOR_NUMBER_I    IN SPADM.SPACE_ROOM.FLOOR_NUMBER%TYPE,
                      ROOM_NUMBER_I     IN SPADM.SPACE_ROOM.ROOM_NUMBER%TYPE,
                      LDKEY_I           IN LONGDESCRIPTION.LDKEY%TYPE,
                      LDTEXT_I          IN VARCHAR2, -- FORMS COMPATIBILITY (MXES)
                      --LDTEXT_I          IN LONGDESCRIPTION.LDTEXT%TYPE,
                      INACTIVE_I        IN SPADM.SPACE_ROOM.INACTIVE%TYPE,
                      CHANGEBY_I        IN LOCATIONS.CHANGEBY%TYPE)
IS
PARENT_T        LOCATIONS.LOCATION%TYPE;
FLOOR_EXISTS_T NUMBER;
LOCATION_T LOCATIONS.LOCATION%TYPE;
LDTEXT_T  LONGDESCRIPTION.ldtext%TYPE :=NULL;
BEGIN

     BEGIN
       LDTEXT_T := TO_CLOB(LDTEXT_I);
     EXCEPTION WHEN 
      OTHERS THEN
        NULL; 
     END;
     
   -- GET THE PARENT LOCATION CODE FOR THE ROOM
      PARENT_T := PREPARE_LOCATION(BUILDING_NUMBER_I, FLOOR_NUMBER_I, NULL);
      

   -- ENSURE THAT PARENT EXISTS IN LOCATIONS TABLE
   FLOOR_EXISTS_T :=0;
   SELECT COUNT(*) INTO FLOOR_EXISTS_T FROM LOCATIONS
   WHERE LOCATION=PARENT_T
   AND   ORGID=ORGID_T
   AND   SITEID=SITEID_T;

   IF FLOOR_EXISTS_T > 0 THEN

      -- GET LOCATION CODE FOR THE ROOM
         LOCATION_T := PREPARE_LOCATION(BUILDING_NUMBER_I, FLOOR_NUMBER_I, ROOM_NUMBER_I);

      -- NOW INSERT INTO OTHER LOCATION RELATED TABLES
      INSERT_LOCATION_TABLES(LOCATION_T, PARENT_T, LDKEY_I, LDTEXT_T, CHANGEBY_I);
   END IF;


END;

/* GET DEFAULT PROJECT ID FOR LEVEL1 ORG UNIT (DIVISION) */
FUNCTION GET_DEFAULT_PROJECT(LEVEL1_I   IN  SPADM.SPACE_ROOM.ORG_LEVEL_1_CODE%TYPE)
                             RETURN MAXIMO.LBL_V_COA.glaccount%TYPE
IS
    PROJECT_ID_O  MAXIMO.LBL_V_COA.glaccount%TYPE;
BEGIN
      SELECT PROJECT_ID INTO PROJECT_ID_O FROM SPADM.SPACE_DEFAULT_PROJECT
      WHERE ORG_LEVEL_1_CODE=RTRIM(LEVEL1_I);

          RETURN PROJECT_ID_O;

      EXCEPTION

      WHEN OTHERS THEN
            PROJECT_ID_O := NULL;
          RETURN PROJECT_ID_O;

END;

/* FUNCTION TO INSERT DEFAULT PROJECT WITH 100% FOR A ROOM */
PROCEDURE INSERT_DEFAULT_PROJECT(BUILDING_NUMBER_I IN SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE,
           FLOOR_NUMBER_I    IN SPADM.SPACE_ROOM.FLOOR_NUMBER%TYPE,
           ROOM_NUMBER_I     IN SPADM.SPACE_ROOM.ROOM_NUMBER%TYPE,
           LOCATION_I        IN LOCATIONS.LOCATION%TYPE,
           LEVEL1_I          IN SPADM.SPACE_ROOM.ORG_LEVEL_1_CODE%TYPE)
IS
   DEFAULT_PROJECT_ID_T MAXIMO.LBL_V_COA.glaccount%TYPE;
   REC_CNT_T    NUMBER(5);
   RECORD_ID_T  SPADM.SPACE_CHARGE_DISTRIBUTION.RECORD_ID%TYPE;
BEGIN

   -- GET DEFAULT PROJECT FOR THIS DIVISION
   DEFAULT_PROJECT_ID_T := SPACE_PACKAGE.GET_DEFAULT_PROJECT(LEVEL1_I);

   -- DO ONLY IF IT HAS DEFAULT PROJECT
   IF DEFAULT_PROJECT_ID_T IS NOT NULL THEN

      -- DELETE RECORDS FROM SPACE_CHARGE_DISTRIBUTION TABLE

      SELECT COUNT(*) INTO REC_CNT_T
      FROM SPADM.SPACE_CHARGE_DISTRIBUTION
      WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
      AND   FLOOR_NUMBER=FLOOR_NUMBER_I
      AND   ROOM_NUMBER=ROOM_NUMBER_I;

      IF REC_CNT_T > 0 THEN
         DELETE FROM SPADM.SPACE_CHARGE_DISTRIBUTION
         WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
         AND   FLOOR_NUMBER=FLOOR_NUMBER_I
         AND   ROOM_NUMBER=ROOM_NUMBER_I;
      END IF;

      SELECT SPACE_SEQ.NEXTVAL INTO RECORD_ID_T FROM DUAL;

      -- NOW INSERT RECORD
      INSERT INTO SPADM.SPACE_CHARGE_DISTRIBUTION
      (RECORD_ID, LOCATION, PROJECT_ID,
       BUILDING_NUMBER, FLOOR_NUMBER, ROOM_NUMBER,
       CHARGED_TO_PERCENT, CHANGEBY, CHANGEDATE) VALUES
       (RECORD_ID_T, LOCATION_I, DEFAULT_PROJECT_ID_T,
        BUILDING_NUMBER_I, FLOOR_NUMBER_I, ROOM_NUMBER_I,
        100, 'SPADM',SYSDATE);
   END IF;

   END;

/* GET CURRENT RECHRAGE RATE FOR CURRENT USE AND LOCALITY */
FUNCTION GET_RECHARGE_RATE(CURRENT_USE_I IN SPACE_CHARGE_RATE.CURRENT_USE%TYPE,
                           REPORT_CATEGORY_I IN SPACE_CHARGE_RATE.REPORT_CATEGORY%TYPE)
                           RETURN SPACE_CHARGE_RATE.RECHARGE_RATE%TYPE
IS
  RECHARGE_RATE_T   SPACE_CHARGE_RATE.RECHARGE_RATE%TYPE;

BEGIN

  RECHARGE_RATE_T   :=0;

  BEGIN 
  
    SELECT NVL(RECHARGE_RATE,0) INTO RECHARGE_RATE_T
    FROM  SPADM.SPACE_CHARGE_RATE
     WHERE REPORT_CATEGORY=REPORT_CATEGORY_I
     AND   CURRENT_USE=CURRENT_USE_I
     AND   EFFDT = (SELECT MAX(A.EFFDT) FROM
                          SPADM.SPACE_CHARGE_RATE A WHERE
                          REPORT_CATEGORY=REPORT_CATEGORY_I  AND
              CURRENT_USE=CURRENT_USE_I);
   EXCEPTION WHEN OTHERS THEN
     NULL;
     
   END;

 RETURN RECHARGE_RATE_T;

 END;


FUNCTION PREPARE_OLD_LOCATION(BUILDING_NUMBER_I IN SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE,
                          FLOOR_NUMBER_I    IN SPADM.SPACE_ROOM.FLOOR_NUMBER%TYPE,
                          ROOM_NUMBER_I     IN SPADM.SPACE_ROOM.ROOM_NUMBER%TYPE)
                       RETURN LOCATIONS.LOCATION%TYPE
IS

BUILDING_NUMBER_T  CHAR(3);
ROOM_NUMBER_T      CHAR(5);
BUILDING_NUMBER_II CHAR(4);
ROOM_NUMBER_II     CHAR(5);

LOCATION_O        LOCATIONS.LOCATION%TYPE;
BEGIN

         BUILDING_NUMBER_II := BUILDING_NUMBER_I;
         ROOM_NUMBER_II := ROOM_NUMBER_I;


     IF ROOM_NUMBER_II IS NOT NULL THEN

                 IF SUBSTR(BUILDING_NUMBER_II,1,1) !='0' THEN
           BUILDING_NUMBER_T := SUBSTR(BUILDING_NUMBER_II,1,3);
                 ELSE
                   BUILDING_NUMBER_T := SUBSTR(BUILDING_NUMBER_II,2,3);
                 END IF;

                 ROOM_NUMBER_T     := ROOM_NUMBER_II;

         LOCATION_O := LTRIM(RTRIM(BUILDING_NUMBER_T || ROOM_NUMBER_T));

     ELSIF FLOOR_NUMBER_I IS NOT NULL THEN

         IF SUBSTR(BUILDING_NUMBER_II,1,1) !='0' THEN
           BUILDING_NUMBER_T := SUBSTR(BUILDING_NUMBER_II,1,3);
                 ELSE
                   BUILDING_NUMBER_T := SUBSTR(BUILDING_NUMBER_II,2,3);
                 END IF;

         LOCATION_O := LTRIM(RTRIM(BUILDING_NUMBER_T || 'FL' || FLOOR_NUMBER_I));

     ELSIF BUILDING_NUMBER_II IS NOT NULL THEN

             IF SUBSTR(BUILDING_NUMBER_II,1,1) !='0' THEN
           LOCATION_O := LTRIM(RTRIM('BLDG' || SUBSTR(BUILDING_NUMBER_II,1,3)));
                 ELSE
                   LOCATION_O := LTRIM(RTRIM('BLDG' || SUBSTR(BUILDING_NUMBER_II,2,3)));
                 END IF;

     END IF;

                RETURN LOCATION_O;
  END;

/* PROCEDURETO GET THE EMPLOYEE INFORMATION */
FUNCTION GET_EMPLOYEE_NAME(EMPLOYEE_ID_I  IN EDW_SHARE.PEOPLE_CURRENT.EMPLOYEE_ID%TYPE)
                           RETURN EDW_SHARE.PEOPLE_CURRENT.EMPLOYEE_NAME%TYPE
IS

 EMPLOYEE_NAME_O EDW_SHARE.PEOPLE_CURRENT.EMPLOYEE_NAME%TYPE;

 BEGIN
   SELECT EMPLOYEE_NAME INTO EMPLOYEE_NAME_O
   FROM EDW_SHARE.PEOPLE_CURRENT
   WHERE EMPLOYEE_ID=EMPLOYEE_ID_I;

      RETURN EMPLOYEE_NAME_O;

    EXCEPTION
         WHEN OTHERS THEN
         EMPLOYEE_NAME_O :=NULL;
     RETURN EMPLOYEE_NAME_O;
END;

/* PROCEDURE TO ENSURE WHETHER THE INPUT STRING CONTAINS ALPHANUMERIC
   CHARACTERS */
FUNCTION IS_ALPHA_NUMERIC(STRING_I IN SPADM.SPACE_ROOM.DIVISION_COMMENTS%TYPE)
                           RETURN BOOLEAN
IS

 LENGTH_T   NUMBER(3);
 CNT_T      NUMBER(3);
 CHAR_T     VARCHAR2(1);
 RET_T      BOOLEAN;

 BEGIN

 RET_T := TRUE;

 LENGTH_T := LENGTH(LTRIM(RTRIM(STRING_I)));
 CNT_T :=1;

 IF (LENGTH_T > 0) THEN

 WHILE (CNT_T <= LENGTH_T)

  LOOP

    CHAR_T := SUBSTR(STRING_I,CNT_T,1);
    IF UPPER(CHAR_T) NOT BETWEEN 'A' AND 'Z' AND
       CHAR_T        NOT BETWEEN '0' AND '9' THEN
        RET_T := FALSE;
    END IF;
    CNT_T := CNT_T + 1;

  END LOOP;

 END IF;

 RETURN RET_T;

END;

-- PROCEDURE TO GET REF CURSOR FOR OCCUPANT INFORMATION
/*
PROCEDURE GET_OCCUPANT_DETAIL(OCC_RESULTSET IN OUT OCCUPANT_REF_CUR,
                              BUILDING_NUMBER_I IN SPADM.SPACE_ROOM.BUILDING_NUMBER%TYPE,
                  ROOM_NUMBER_I     IN SPADM.SPACE_ROOM.ROOM_NUMBER%TYPE)

IS
  BEGIN

      IF OCC_RESULTSET%ISOPEN THEN
          CLOSE OCC_RESULTSET;
      END IF;

      OPEN OCC_RESULTSET FOR
        SELECT A.EMPLOYEE_NAME EMPLOYEE_NAME,
        A.WORK_PHONE||' MS'||A.MAIL_STOP||' ORG:'||A.ORG_CODE EMPLOYEE_DETAILS,
        B.ZZ_BLDG BUILDING_NUMBER,  B.ZZ_ROOM ROOM_NUMBER
        FROM EDW_SHARE.PEOPLE_CURRENT A, HRADM.PS_ZZ_WRK_LOCATION B
        WHERE A.EMPLOYEE_ID = B.EMPLID
    AND   B.ZZ_BLDG=BUILDING_NUMBER_I
    AND   B.ZZ_ROOM=ROOM_NUMBER_I
    ORDER BY EMPLOYEE_NAME;
 END;
*/

-- PROCEDURE TO GET REF CURSOR FOR PI INFORMATION
PROCEDURE GET_PI_CONTACT_DETAIL(TEAM_RESULTSET IN OUT TEAM_REF_CUR,
                                TYPE_I  SPADM.SPACE_ROOM.CURRENT_USE_DETAIL%TYPE,
                                PROJECT_ID_I IN SPADM.SPACE_CHARGE_DISTRIBUTION.PROJECT_ID%TYPE)

IS
  BEGIN

      IF TEAM_RESULTSET%ISOPEN THEN
          CLOSE TEAM_RESULTSET;
      END IF;

      /*OPEN TEAM_RESULTSET FOR
        SELECT A.EMPLID, A.TEAM_MEMBER, A.PROJECT_ID
        FROM EDW_SHARE.PROJECT_TEAM A
        WHERE A.PROJECT_ID=PROJECT_ID_I
    AND A.ROLE_TYPE=LTRIM(RTRIM(TYPE_I))
    ORDER BY A.TEAM_MEMBER; */
 END;

 FUNCTION GET_PERIOD_TYPE(YY_I IN SPADM.SPACE_CHARGE_TRANS.FISCAL_YEAR%TYPE,
                         MM_I IN SPADM.SPACE_CHARGE_TRANS.ACCOUNTING_PERIOD%TYPE)
             RETURN SPADM.SPACE_ROOM.SPACE_TYPE%TYPE
IS
  TYPE_O SPADM.SPACE_ROOM.SPACE_TYPE%TYPE;
  CURR_PERIOD_T  VARCHAR2(6);
  INP_PERIOD_T  VARCHAR2(6);
  CURR_FISCAL_YEAR_T SPADM.SPACE_CHARGE_TRANS.FISCAL_YEAR%TYPE;
  CURR_ACC_PERIOD_T  SPADM.SPACE_CHARGE_TRANS.ACCOUNTING_PERIOD%TYPE;
BEGIN

   INP_PERIOD_T  :=LTRIM(RTRIM(TO_CHAR(YY_I,'9999'))) || LPAD(LTRIM(RTRIM(TO_CHAR(MM_I,'99'))),2,'0');

   -- CHANGED BY PANKAJ ON 04/15/03 FOR THE ACCELERATED GL CLOSE
   --
   -- CURR_FISCAL_YEAR_T := ISS.CURRENT_FISCAL_YEAR;
   -- CURR_ACC_PERIOD_T  := ISS.CURRENT_FISCAL_MONTH;

   SELECT TO_NUMBER(SUBSTR(A.FINANCIALPERIOD,1,4)),
   TO_NUMBER(SUBSTR(A.FINANCIALPERIOD,5,2))
   INTO  CURR_FISCAL_YEAR_T, CURR_ACC_PERIOD_T
   FROM FINANCIALPERIODS A
   WHERE A.FINANCIALPERIOD=(SELECT MIN(B.FINANCIALPERIOD)
   FROM MAXIMO.FINANCIALPERIODS B WHERE NVL(CLOSEDBY,' ') NOT LIKE '%SPA01%');

   CURR_PERIOD_T :=LTRIM(RTRIM(TO_CHAR(CURR_FISCAL_YEAR_T,'9999'))) || LPAD(LTRIM(RTRIM(TO_CHAR(CURR_ACC_PERIOD_T,'99'))),2,'0');

   IF INP_PERIOD_T = CURR_PERIOD_T THEN
       TYPE_O := 'C';
   ELSIF INP_PERIOD_T > CURR_PERIOD_T THEN
       TYPE_O := 'F';
   ELSIF INP_PERIOD_T < CURR_PERIOD_T THEN
       TYPE_O := 'P';
   END IF;

   RETURN TYPE_O;

END;


FUNCTION GET_PERIOD_DATE(YY_I IN SPADM.SPACE_CHARGE_TRANS.FISCAL_YEAR%TYPE,
                         MM_I IN SPADM.SPACE_CHARGE_TRANS.ACCOUNTING_PERIOD%TYPE,
                         TYPE_I IN SPADM.SPACE_ROOM.SPACE_TYPE%TYPE)
                         RETURN DATE
IS
  DATE_O DATE;
  YY_T  SPADM.SPACE_CHARGE_TRANS.FISCAL_YEAR%TYPE;
  MM_T  SPADM.SPACE_CHARGE_TRANS.ACCOUNTING_PERIOD%TYPE;
  YY_T_C VARCHAR2(4);  -- ADDED BY PANKAJ ON 04/15/03
  MM_T_C VARCHAR2(2);

BEGIN

   IF TYPE_I !='C' THEN  -- PREVIOUS PERIOD
      IF MM_I=1 THEN
         MM_T :=12;
         YY_T :=YY_I -1;
      ELSE
         MM_T :=MM_I -1;
         YY_T :=YY_I;
      END IF;
   ELSE    -- CURRENT
      MM_T := MM_I;
      YY_T := YY_I;
   END IF;

   /*DATE_O :=ISS.FISCAL_MONTH_YEAR_TO_DATE(MM_T, YY_T, TRUE);
   DATE_O :=TRUNC(LAST_DAY(DATE_O)); */

   -- CODE CHANGED BY PANKAJ IN 04/15/03 FOR THE
   -- ACCELERATED GL CLOSING

   YY_T_C := LTRIM(TO_CHAR(YY_T));
   MM_T_C := LTRIM(LPAD(TO_CHAR(MM_T),2,'0'));

   SELECT TRUNC(PERIODEND-1) INTO DATE_O
   FROM MAXIMO.FINANCIALPERIODS A
   WHERE SUBSTR(A.FINANCIALPERIOD,1,4)=YY_T_C
   AND SUBSTR(A.FINANCIALPERIOD,5,2)=MM_T_C;

   RETURN DATE_O;

   EXCEPTION

     WHEN OTHERS THEN
            DATE_O := NULL;

         RETURN DATE_O;

END;

-- PROCEDURE TO INITIALIZE THE PROJECT ARRAY TABLE
PROCEDURE TBL_INIT(
          BUILDING_NUMBER_I IN SPACE_CHARGE_DISTRIBUTION.BUILDING_NUMBER%TYPE,
          FLOOR_NUMBER_I    IN SPACE_CHARGE_DISTRIBUTION.FLOOR_NUMBER%TYPE,
          ROOM_NUMBER_I     IN SPACE_CHARGE_DISTRIBUTION.ROOM_NUMBER%TYPE,
          CHANGEBY_I        IN SPACE_CHARGE_DISTRIBUTION.CHANGEBY%TYPE)
IS
TOTAL_ROWS_T  NUMBER(7) :=0;

BEGIN

       SELECT COUNT(*) INTO TOTAL_ROWS_T
       FROM  LBL_SPACE_CHARGE_DISTRIBUTION
       WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
       AND   FLOOR_NUMBER=FLOOR_NUMBER_I
       AND   ROOM_NUMBER=ROOM_NUMBER_I
       AND   CHANGEBY=CHANGEBY_I;

       IF TOTAL_ROWS_T > 0 THEN
         DELETE FROM LBL_SPACE_CHARGE_DISTRIBUTION
         WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
         AND   FLOOR_NUMBER=FLOOR_NUMBER_I
         AND   ROOM_NUMBER=ROOM_NUMBER_I
         AND   CHANGEBY=CHANGEBY_I;
      END IF;

END;

-- PROCEDURE TO DELETE ROW FROM PL/SQL TABLE
PROCEDURE TBL_DELETE(
          BUILDING_NUMBER_I IN SPACE_CHARGE_DISTRIBUTION.BUILDING_NUMBER%TYPE,
          FLOOR_NUMBER_I    IN SPACE_CHARGE_DISTRIBUTION.FLOOR_NUMBER%TYPE,
          ROOM_NUMBER_I     IN SPACE_CHARGE_DISTRIBUTION.ROOM_NUMBER%TYPE,
          PROJECT_ID_I      IN SPACE_CHARGE_DISTRIBUTION.PROJECT_ID%TYPE,
          CHARGED_TO_PERCENT_I IN SPACE_CHARGE_DISTRIBUTION.CHARGED_TO_PERCENT%TYPE,
          CHANGEBY_I        IN SPACE_CHARGE_DISTRIBUTION.CHANGEBY%TYPE)
IS

TOTAL_ROWS_T  NUMBER(7) :=0;
CHARGED_TO_PERCENT_T SPACE_CHARGE_DISTRIBUTION.CHARGED_TO_PERCENT%TYPE;

BEGIN
     IF (BUILDING_NUMBER_I IS NOT NULL AND
          FLOOR_NUMBER_I IS NOT NULL AND
          ROOM_NUMBER_I  IS NOT NULL AND
          PROJECT_ID_I   IS NOT NULL AND
          CHANGEBY_I     IS NOT NULL ) THEN

       IF CHARGED_TO_PERCENT_I IS NULL THEN
           CHARGED_TO_PERCENT_T :=0;
       ELSE
           CHARGED_TO_PERCENT_T :=CHARGED_TO_PERCENT_I;
       END IF;

       SELECT COUNT(*) INTO TOTAL_ROWS_T
       FROM LBL_SPACE_CHARGE_DISTRIBUTION
       WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
       AND   FLOOR_NUMBER=FLOOR_NUMBER_I
       AND   ROOM_NUMBER=ROOM_NUMBER_I
       AND   PROJECT_ID=PROJECT_ID_I
       AND   CHARGED_TO_PERCENT=CHARGED_TO_PERCENT_T
       AND   CHANGEBY=CHANGEBY_I;

       IF TOTAL_ROWS_T > 0 THEN
         DELETE FROM LBL_SPACE_CHARGE_DISTRIBUTION
         WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
         AND   FLOOR_NUMBER=FLOOR_NUMBER_I
         AND   ROOM_NUMBER=ROOM_NUMBER_I
         AND   PROJECT_ID=PROJECT_ID_I
         AND   CHARGED_TO_PERCENT=CHARGED_TO_PERCENT_T
         AND   CHANGEBY=CHANGEBY_I;
      END IF;
   END IF;
END;

-- PROCEDURE TO UPDATE ROWS TO THE PROJECT TABLE
PROCEDURE TBL_UPD(BUILDING_NUMBER_I IN SPACE_CHARGE_DISTRIBUTION.BUILDING_NUMBER%TYPE,
          FLOOR_NUMBER_I       IN SPACE_CHARGE_DISTRIBUTION.FLOOR_NUMBER%TYPE,
          ROOM_NUMBER_I        IN SPACE_CHARGE_DISTRIBUTION.ROOM_NUMBER%TYPE,
          PROJECT_ID_I         IN SPACE_CHARGE_DISTRIBUTION.PROJECT_ID%TYPE,
          CHARGED_TO_PERCENT_I IN SPACE_CHARGE_DISTRIBUTION.CHARGED_TO_PERCENT%TYPE,
          CHANGEBY_I           IN SPACE_CHARGE_DISTRIBUTION.CHANGEBY%TYPE)
IS
         TOTAL_ROWS_T  NUMBER(7) :=0;
BEGIN
      IF (BUILDING_NUMBER_I IS NOT NULL AND
          FLOOR_NUMBER_I IS NOT NULL AND
          ROOM_NUMBER_I  IS NOT NULL AND
          PROJECT_ID_I   IS NOT NULL AND
          CHANGEBY_I     IS NOT NULL)  THEN


       SELECT COUNT(*) INTO TOTAL_ROWS_T
       FROM  LBL_SPACE_CHARGE_DISTRIBUTION
       WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
       AND   FLOOR_NUMBER=FLOOR_NUMBER_I
       AND   ROOM_NUMBER=ROOM_NUMBER_I
       AND   PROJECT_ID=PROJECT_ID_I
       AND   CHANGEBY=CHANGEBY_I;

       IF TOTAL_ROWS_T =1 THEN
          UPDATE LBL_SPACE_CHARGE_DISTRIBUTION
          SET   CHARGED_TO_PERCENT=CHARGED_TO_PERCENT_I
          WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
          AND   FLOOR_NUMBER=FLOOR_NUMBER_I
          AND   ROOM_NUMBER=ROOM_NUMBER_I
          AND   PROJECT_ID=PROJECT_ID_I
          AND   CHANGEBY=CHANGEBY_I;
      END IF;
     END IF;
END;

-- PROCEDURE TO ADD ROWS TO THE PROJECT TABLE
PROCEDURE TBL_ADD(BUILDING_NUMBER_I IN SPACE_CHARGE_DISTRIBUTION.BUILDING_NUMBER%TYPE,
          FLOOR_NUMBER_I    IN SPACE_CHARGE_DISTRIBUTION.FLOOR_NUMBER%TYPE,
          ROOM_NUMBER_I     IN SPACE_CHARGE_DISTRIBUTION.ROOM_NUMBER%TYPE,
          PROJECT_ID_I      IN SPACE_CHARGE_DISTRIBUTION.PROJECT_ID%TYPE,
          CHARGED_TO_PERCENT_I IN SPACE_CHARGE_DISTRIBUTION.CHARGED_TO_PERCENT%TYPE,
          CHANGEBY_I        IN SPACE_CHARGE_DISTRIBUTION.CHANGEBY%TYPE)

IS
         TOTAL_ROWS_T  NUMBER(7) :=0;
BEGIN
      IF (BUILDING_NUMBER_I IS NOT NULL AND
          FLOOR_NUMBER_I IS NOT NULL AND
          ROOM_NUMBER_I  IS NOT NULL AND
          PROJECT_ID_I   IS NOT NULL AND
          CHANGEBY_I     IS NOT NULL)   THEN

       SELECT COUNT(*) INTO TOTAL_ROWS_T
       FROM  LBL_SPACE_CHARGE_DISTRIBUTION
       WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
       AND   FLOOR_NUMBER=FLOOR_NUMBER_I
       AND   ROOM_NUMBER=ROOM_NUMBER_I
       AND   PROJECT_ID=PROJECT_ID_I
       AND   CHANGEBY=CHANGEBY_I;

       IF TOTAL_ROWS_T = 0 THEN
          INSERT INTO LBL_SPACE_CHARGE_DISTRIBUTION(
          BUILDING_NUMBER, FLOOR_NUMBER, ROOM_NUMBER, PROJECT_ID,
          CHARGED_TO_PERCENT, CHANGEBY)
          VALUES
          (BUILDING_NUMBER_I, FLOOR_NUMBER_I, ROOM_NUMBER_I, PROJECT_ID_I,
          CHARGED_TO_PERCENT_I, CHANGEBY_I);
      END IF;
    END IF;
END;


FUNCTION  TBL_CHECK(
          BUILDING_NUMBER_I IN SPACE_CHARGE_DISTRIBUTION.BUILDING_NUMBER%TYPE,
          FLOOR_NUMBER_I    IN SPACE_CHARGE_DISTRIBUTION.FLOOR_NUMBER%TYPE,
          ROOM_NUMBER_I     IN SPACE_CHARGE_DISTRIBUTION.ROOM_NUMBER%TYPE,
          PROJECT_ID_I      IN SPACE_CHARGE_DISTRIBUTION.PROJECT_ID%TYPE,
          CHANGEBY_I        IN SPACE_CHARGE_DISTRIBUTION.CHANGEBY%TYPE)
         RETURN BOOLEAN
IS

TOTAL_ROWS_T  NUMBER(7) :=0;

BEGIN

   SELECT COUNT(*) INTO TOTAL_ROWS_T
   FROM  LBL_SPACE_CHARGE_DISTRIBUTION
   WHERE BUILDING_NUMBER=BUILDING_NUMBER_I
   AND   FLOOR_NUMBER=FLOOR_NUMBER_I
   AND   ROOM_NUMBER=ROOM_NUMBER_I
   AND   PROJECT_ID=PROJECT_ID_I
   AND   CHANGEBY=CHANGEBY_I;

IF TOTAL_ROWS_T > 0 THEN
  RETURN TRUE;
ELSE
  RETURN FALSE;
END IF;

END;



-- FUNCTION TO HANLDE CLOBS 
FUNCTION LBL_LONG_TO_CLOB (
          LONG_I LONG)
         RETURN CLOB
    
  IS 
   CLOB_T CLOB :=NULL;      
BEGIN
    BEGIN 
     CLOB_T := TO_CLOB(LONG_I);
    EXCEPTION 
      WHEN OTHERS THEN
        NULL;
    END;
    
    RETURN CLOB_T;
END;

         
FUNCTION LBL_VARCHAR_TO_CLOB(
         VARCHAR_I VARCHAR2)
          RETURN CLOB
  IS 
   CLOB_T CLOB :=NULL;      
   
BEGIN
    BEGIN 
     CLOB_T := TO_CLOB(VARCHAR_I);
    EXCEPTION 
     WHEN OTHERS THEN 
       NULL;
   END;
    RETURN CLOB_T;
END;


FUNCTION LBL_CLOB_TO_LONG(
         CLOB_I CLOB)
         RETURN LONG
 IS          
         
   LONG_T LONG :=NULL;
   VARCHAR2_T VARCHAR2(32000) :=NULL;
  BEGIN 
     
      BEGIN 
      
       VARCHAR2_T := DBMS_LOB.SUBSTR(CLOB_I,32000,1);
       LONG_T := VARCHAR2_T;
       
      EXCEPTION 
       WHEN OTHERS THEN 
         NULL;
      END;
     RETURN LONG_T;
 END;           


-- FUNCTION TO INSERT/UPDATE RECORDS IN LONG DESCRIPTION TABLE
FUNCTION INS_UPD_LONGDESCRIPTION(
          LDKEY_I           IN NUMBER,
          LDTEXT_I          IN VARCHAR2,
          LOCATION_I        IN LOCATIONS.LOCATION%TYPE)
          RETURN VARCHAR2     
IS
   LDTEXT_T  LONGDESCRIPTION.LDTEXT%TYPE;
   LDTEXT_T1 LONGDESCRIPTION.LDTEXT%TYPE;
BEGIN
      IF (LDTEXT_I IS NULL OR LENGTH(LTRIM(RTRIM(LDTEXT_I))) =0) THEN
      
              
         BEGIN
           DELETE FROM MAXIMO.LONGDESCRIPTION
           WHERE  LDKEY=LDKEY_I 
           AND    LDOWNERTABLE='LOCATIONS'
           AND    ldownercol='DESCRIPTION';
         
           UPDATE MAXIMO.LOCATIONS
           SET HASLD=0
           WHERE LOCATION=LOCATION_I
           AND   locationsid=LDKEY_I;
           
       EXCEPTION
        WHEN OTHERS THEN 
          NULL;        
       END;
       
       RETURN '1';
       
     ELSE  -- LDTEXT CONTAINS SOME VALUE 
     
     LDTEXT_T := LTRIM(RTRIM(LDTEXT_I));
                                                                 
      BEGIN
        SELECT LDTEXT INTO  LDTEXT_T1
        FROM MAXIMO.LONGDESCRIPTION
        WHERE  LDKEY=LDKEY_I 
        AND    LDOWNERTABLE='LOCATIONS'
        AND    LONGDESCRIPTION.ldownercol='DESCRIPTION';
        
        --LDTEXT_T := SPACE_PACKAGE.lbl_varchar_to_clob(LTRIM(RTRIM(LDTEXT_I)));
        -- COMMENTED BY PANKAJ ON 3/28/10 
              
        UPDATE MAXIMO.LONGDESCRIPTION
        SET LDTEXT=LDTEXT_T
        WHERE  LDKEY=LDKEY_I 
        AND    LDOWNERTABLE='LOCATIONS'
        AND    ldownercol='DESCRIPTION';
        
        UPDATE MAXIMO.LOCATIONS
        SET HASLD=1
        WHERE LOCATION=LOCATION_I
        AND   locationsid=LDKEY_I;
        
      EXCEPTION WHEN NO_DATA_FOUND THEN
      
        INSERT INTO LONGDESCRIPTION (LDKEY, LDOWNERTABLE, LDOWNERCOL,LDTEXT,
                                     LANGCODE, LONGDESCRIPTION.LONGDESCRIPTIONID)
              VALUES (LDKEY_I, 'LOCATIONS','DESCRIPTION',LDTEXT_T,
                      'EN', MAXIMO.LONGDESCRIPTIONSEQ.NEXTVAL);
                      
              UPDATE LOCATIONS
              SET HASLD=1
              WHERE LOCATION=LOCATION_I;
      END;
      
      RETURN '1';
     
     END IF;
     
 END;                  
         
           
       
         

END;
/

-- Grants for Package Body
GRANT EXECUTE ON space_package TO public
/


-- End of DDL Script for Package Body SPADM.SPACE_PACKAGE

