/************************************************************************
*
* PROGRAM NAME          : CALC_FLEET_FEEDER_ESTIMATES.SQL
*
*
* DESCRIPTION           : THIS PL/SQL SCRIPT CALCULATES THE NUMBER OF MILES
*                         DRIVEN BY EACH VEHICLE DURING THE MONTH. LATER IT
*                         TAKES THE BASE RATE OF EACH VEHICLE AND GENERATE
*                         LBL_INVOICELINES. IT ALSO READS RECORDS FROM 
*                         MATUSETRANS AND TOOLTRANS TABLES FOR ANY COSTS BOOKED 
*                         FOR THE MONTH.
*
* AUTHOR                : PANKAJ BHIDE
*
* DATE WRITTEN          : 01-APR-2009
*
* DATE MODIFIED         : 
*                        17-MAY-11  PANKAJ - FOR VEHICLES DECOMMISSIONED,
*                                            LOOK INTO ASSETSTATUS TABLE
*                                            TO FIND OUT WHETHER IT WAS 
*                                            DECOMMISIONED DURING THIS MONTH.
*
*                        12-JUL-14  PANKAJ - CHANGES FOR F$M REMOVED SECTIONS
*                                            FOR PV_PROJECT
*
*                        22-FEB-17  PANKAJ - TRUNCATED DATE PART FOR INVOICE
*                                            NUYMBER
*************************************************************************/
WHENEVER SQLERROR EXIT 1 ROLLBACK;

DECLARE

     REC_CNT_T           NUMBER(5);
     FINANCIALPERIOD_T   INVOICE.FINANCIALPERIOD%TYPE;
     INVOICE_REC_T       INVOICE%ROWTYPE;
     INVOICELINE_REC_T   INVOICELINE%ROWTYPE;
     TRANSACTION_DT_T    INVOICE.STATUSDATE%TYPE;
     LAST_MONTH_MILES_T  ASSETMETER.LASTREADING%TYPE;
     MILES_IN_MONTH_T    ASSETMETER.LASTREADING%TYPE;
     LINECOST_T          INVOICELINE.LINECOST%TYPE;
     DESCRIPTION_T       INVOICELINE.DESCRIPTION%TYPE;
     INVOICELINENUM_T    INVOICELINE.INVOICELINENUM%TYPE :=0;
     TOOLUNIT_T          INVOICELINE.INVOICEUNIT%TYPE;
     PROJECT_DESC_T      CHARTOFACCOUNTS.accountname%TYPE;
     DEFAULT_GLACCOUNT_T INVOICECOST.GLDEBITACCT%TYPE :='360199';
     GLDEBITACCT_T       INVOICECOST.GLDEBITACCT%TYPE;
     ICT1_T              INVOICECOST.ICT1%TYPE;
     TOTALCOST_T         INVOICE.TOTALCOST%TYPE;
     START_MONTH_DATE_T  INVOICE.STATUSDATE%TYPE;
     ORGID_T             ASSET.ORGID%TYPE;
     SITEID_T            ASSET.SITEID%TYPE;

    /* CURSOR TO READ ALL ACTIVE VEHICLES */
    CURSOR ALL_VEHICLES_MILE_CUR IS
    SELECT NVL(REPLACE(C.LASTREADING, ','),0) LASTREADING,  -- CHANGED ON 12/18/09
           A.GLACCOUNT, A.LOCATION,
           B.ASSETNUM, B.BASE_RATE, B.MILEAGE_COST, B.ISPOOL
    FROM   MAXIMO.ASSET A, MAXIMO.LBL_VEHICLESPEC B, 
           MAXIMO.ASSETMETER C
    WHERE  A.ORGID=B.ORGID
    AND    A.SITEID=B.SITEID
    AND    A.ASSETNUM=B.ASSETNUM
    AND    B.ORGID=C.ORGID
    AND    B.SITEID=C.SITEID
    AND    B.ASSETNUM=C.ASSETNUM
    AND    A.ORGID=ORGID_T
    AND    B.SITEID=SITEID_T
    AND    C.METERNAME='FLEET'
    AND    B.VEHICLE_CLASS IS NOT NULL
    AND    NVL(A.ISRUNNING,'1')='1'      -- MXES 
    ORDER BY A.ASSETNUM;

    /* CURSOR TO READ TOOLTRANS TABLE */
   CURSOR TOOLTRANS_CUR IS
   SELECT A.ITEMNUM, A.ASSETNUM, A.GLDEBITACCT, A.LOCATION, A.LINECOST, A.TOOLQTY,
          A.TOOLRATE
   FROM MAXIMO.TOOLTRANS A,  MAXIMO.ASSETMETER B
   WHERE  A.ASSETNUM=B.ASSETNUM
   AND    B.METERNAME='FLEET'
   AND    A.FINANCIALPERIOD=FINANCIALPERIOD_T
   AND    A.ITEMNUM LIKE 'POOL%'      -- MXES 
   AND    A.ORGID=ORGID_T
   AND    A.SITEID=SITEID_T
   ORDER BY A.ASSETNUM;

   /* CURSOR TO READ MATUSETRANS TABLE FOR BART TICKETS AND TOLLPASSES */
   CURSOR MATUSETRANS_CUR IS
   SELECT A.ASSETNUM, A.GLDEBITACCT, A.LOCATION, A.LINECOST, A.UNITCOST,
          A.ITEMNUM, ABS(A.QUANTITY) QUANTITY
   FROM   MAXIMO.MATUSETRANS A
   WHERE  A.ORGID=ORGID_T
   AND    A.SITEID=SITEID_T
   AND    A.FINANCIALPERIOD=FINANCIALPERIOD_T
   AND    A.STORELOC='FLEET'
   AND    SUBSTR(A.ITEMNUM,1,4) IN ('BART','TOLL','NMRC')
   ORDER BY A.ASSETNUM;

   /* CURSOR TO PROCESS VEHICLES THAT ARE INACTIVATED DURING THE MONTH */
   CURSOR INACTIVE_VEH_CURSOR IS
   SELECT A.ASSETNUM, 
          NVL(REPLACE(E.LASTREADING, ','),0) LASTREADING,
          E.LASTREADINGDATE,
          A.GLACCOUNT, A.LOCATION,
          D.BASE_RATE, D.MILEAGE_COST, D.ISPOOL
   FROM   MAXIMO.ASSET A, MAXIMO.LBL_VEHICLESPEC D, MAXIMO.ASSETMETER E
   WHERE  A.ORGID=D.ORGID
   AND    A.SITEID=D.SITEID
   AND    A.ASSETNUM=D.ASSETNUM
   AND    D.ORGID=E.ORGID
   AND    D.SITEID=E.SITEID
   AND    D.ASSETNUM=E.ASSETNUM
   AND    E.METERNAME='FLEET'    -- MXES 
   AND    D.VEHICLE_CLASS IS NOT NULL
   AND    A.ISRUNNING='0'        -- MXES 
   AND    A.ASSETNUM IN (SELECT Z.ASSETNUM FROM ASSETSTATUS Z
                         WHERE  Z.SITEID=A.SITEID 
                         AND    Z.ASSETNUM=A.ASSETNUM
                         AND    Z.ISRUNNING=0
                         AND    Z.CHANGEDATE BETWEEN START_MONTH_DATE_T 
                         AND TRANSACTION_DT_T);
   
    -- COMMENTED BY PANKAJ ON 5/17/11    
   /*AND    A.ASSETNUM IN (SELECT DISTINCT B.ASSETNUM FROM MAXIMO.ASSETHISTORY B,
          MAXIMO.WORKORDER C, MAXIMO.WOSTATUS D
   WHERE  C.ORGID=B.ORGID
   AND    C.SITEID=B.SITEID
   AND    C.WONUM=B.WONUM
   AND    C.ASSETNUM=B.ASSETNUM
   AND    C.ORGID=D.ORGID
   AND    C.SITEID=D.SITEID
   AND    C.WONUM=D.WONUM
   AND    B.WONUM=D.WONUM
   -- ADDED BY PANKAJ ON 5/16/11
   AND   (UPPER(C.DESCRIPTION) LIKE ('%REMOVE%') OR 
          UPPER(C.DESCRIPTION) LIKE ('%DECOMMISION%') ) 
   --AND    D.STATUS NOT IN ('WAPPR','CAN','RFI')
   AND    D.STATUS IN ('CLOSE')
   AND    C.ORGID=ORGID_T
   AND    C.SITEID=SITEID_T
   AND    TRUNC(D.CHANGEDATE) BETWEEN START_MONTH_DATE_T AND TRANSACTION_DT_T); */


   -- CURSOR TO GET THE LIST OF INVOICE NUMBERS WHICH CAN BE DELETED   
   CURSOR LBL_INVOICE_TO_BE_DELETED_CUR IS
    SELECT INVOICENUM FROM BATCH_MAXIMO.LBL_INVOICE_MXES
    WHERE  ORGID=ORGID_T
    AND    SITEID=SITEID_T
    AND    INVOICENUM LIKE 'FLEET%'
    AND    (SYSDATE-INVOICEDATE) > 100
    FOR UPDATE;

  SNAPSHOT_CNT_T  NUMBER(10) :=0;

/*********************************************************************
  MAIN PROGRAM STARTS FROM HERE
 *********************************************************************/
BEGIN

/* COMMENTED FOR F$M 
-- FIRSTLY CHECK WHETHER THE SNAPSHOT TITLED DW.PV_PROJECT IS
-- REFRESHED OR NOT

WHILE SNAPSHOT_CNT_T=0

 LOOP

   SELECT COUNT(*) INTO SNAPSHOT_CNT_T FROM DW.PV_PROJECT;
   IF SNAPSHOT_CNT_T != 0 THEN
      EXIT;
   ELSE
     -- SLEEP FOR 2 MINUTES
     DBMS_LOCK.SLEEP(120);
   END IF;

  END LOOP;
COMMENTED FOR F$M */

    -- MXES 
    ORGID_T   :=UPPER('&1');
    SITEID_T  :=UPPER('&2');
   
    IF (ORGID_T IS NULL OR LENGTH(ORGID_T)=0) THEN
       ORGID_T :='LBNL';
    END IF;
     
    IF (SITEID_T IS NULL OR LENGTH(SITEID_T)=0) THEN
       SITEID_T :='FAC';
    END IF;

-- FIND OUT WHICH PERIOD TO PROCESS 
    
SELECT B.FINANCIALPERIOD, TRUNC(B.PERIODSTART),  SYSDATE
INTO   FINANCIALPERIOD_T, START_MONTH_DATE_T,  TRANSACTION_DT_T
FROM   FINANCIALPERIODS B
WHERE  B.FINANCIALPERIOD=(SELECT MIN(C.FINANCIALPERIOD) FROM FINANCIALPERIODS C
WHERE  (NVL(C.CLOSEDBY,' ') NOT LIKE '%MOT%') AND C.ORGID=ORGID_T)
AND    B.ORGID=ORGID_T;



-- PREPARE INVOICE HEADER RECORD

--INVOICE_REC_T.INVOICENUM :='FLEET' || '-'|| TO_CHAR(TRANSACTION_DT_T,'DD-MON-YY HH24:MI');

INVOICE_REC_T.INVOICENUM :='FLEET' || '-'|| TO_CHAR(TRANSACTION_DT_T,'DD-MON-YYYY');
INVOICE_REC_T.INVOICEDATE := TRANSACTION_DT_T;
INVOICE_REC_T.DESCRIPTION := 'FLEET: ESTIMATED MONTHLY RECHARGES FOR-' || FINANCIALPERIOD_T;
INVOICE_REC_T.DOCUMENTTYPE :='INVOICE';
INVOICE_REC_T.STATUS :='APPR';
INVOICE_REC_T.STATUSDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.ENTERDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.ENTERBY :='MAXIMO';
INVOICE_REC_T.CHANGEDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.CHANGEBY :='MAXIMO';
INVOICE_REC_T.HISTORYFLAG :='1';
INVOICE_REC_T.TOTALCOST :=0;
INVOICE_REC_T.FINANCIALPERIOD :=FINANCIALPERIOD_T;


-- NOW  DELETE ALL THE RECORDS FROM THE TABLES WHERE THE FEEDER TRANSACTIONS
-- WILL BE INSERTED. THIS WILL ENABLE THE USERS TO EXECUTE THIS PROGRAM
-- AGAIN IF THE FEEDER NEEDS TO BE SENT AGAIN TO FMS

DELETE FROM BATCH_MAXIMO.LBL_INVOICE_MXES
WHERE INVOICEDATE=TRANSACTION_DT_T
AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

DELETE FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

DELETE FROM BATCH_MAXIMO.LBL_INVOICESTATUS_MXES
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;


DELETE FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;


SELECT DISTINCT COMPANY, CURRENCYCODE
INTO INVOICE_REC_T.VENDOR,INVOICE_REC_T.CURRENCYCODE
FROM MAXIMO.COMPANIES WHERE COMPANY='LBNL'
AND  ORGID=ORGID_T;

-- START INSERTING RECORD IN INVOICE AND INVOICESTATUS TABLES
SELECT COUNT(*) INTO REC_CNT_T
FROM BATCH_MAXIMO.LBL_INVOICESTATUS_MXES
WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   STATUS='ENTERED'
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

-- RELEASE 5.2 ADDED ORGID, SITEID
IF REC_CNT_T=0 THEN
  INSERT INTO BATCH_MAXIMO.LBL_INVOICESTATUS_MXES(INVOICENUM, VENDOR,
               STATUS, CHANGEDATE, CHANGEBY, ORGID, SITEID,
               INVOICESTATUSID) VALUES
               (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
               'ENTERED',TRANSACTION_DT_T,'MAXIMO', ORGID_T,SITEID_T,
               1);   -- MXES 
END IF;

SELECT COUNT(*) INTO REC_CNT_T FROM BATCH_MAXIMO.LBL_INVOICE_MXES
WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

IF REC_CNT_T =0 THEN
  INSERT INTO BATCH_MAXIMO.LBL_INVOICE_MXES
   (INVOICENUM, DESCRIPTION, VENDOR,
    CURRENCYCODE, DOCUMENTTYPE,
    STATUS, STATUSDATE,
    ENTERDATE, ENTERBY,
    CHANGEDATE, CHANGEBY,
    HISTORYFLAG, TOTALTAX1, TOTALTAX2, TOTALTAX3,TOTALTAX4,TOTALTAX5,
    INCLUSIVE1, INCLUSIVE2, INCLUSIVE3,INCLUSIVE4, INCLUSIVE5,
    TOTALCOST, FINANCIALPERIOD, INVOICEDATE,
    EINVOICE,
    ORGID, SITEID,
    INVOICEID, HASLD,
    LANGCODE) VALUES   -- REQUIRED FOR RELEASE 4.1.1, MXES 

    (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.DESCRIPTION, INVOICE_REC_T.VENDOR,
     INVOICE_REC_T.CURRENCYCODE, INVOICE_REC_T.DOCUMENTTYPE,
     INVOICE_REC_T.STATUS, INVOICE_REC_T.STATUSDATE,
     INVOICE_REC_T.ENTERDATE, INVOICE_REC_T.ENTERBY,
     INVOICE_REC_T.CHANGEDATE, INVOICE_REC_T.CHANGEBY,
     '1',0,0,0,0,0,
      '0','0','0','0','0',
      INVOICE_REC_T.TOTALCOST, INVOICE_REC_T.FINANCIALPERIOD, INVOICE_REC_T.INVOICEDATE,
      '0',
      ORGID_T,SITEID_T,
      1,'0',
      'EN');   -- MXES 
  END IF;

  SELECT COUNT(*) INTO REC_CNT_T FROM BATCH_MAXIMO.LBL_INVOICESTATUS_MXES
  WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
  AND   STATUS='APPR';

  IF REC_CNT_T =0  THEN
     INSERT INTO BATCH_MAXIMO.LBL_INVOICESTATUS_MXES(INVOICENUM, VENDOR,
                                      STATUS, CHANGEDATE, CHANGEBY,
                                                      ORGID, SITEID,
                                      INVOICESTATUSID) 
                                      VALUES
                   (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
                    'APPR',TRANSACTION_DT_T,'MAXIMO',
                             ORGID_T, SITEID_T,
                     1);
  END IF;


  -- START INSERTING RECORDS IN INVOICELINE TABLE

  FOR  ALL_VEHICLES_MILE_REC_T IN ALL_VEHICLES_MILE_CUR

   LOOP

     --****************************************
     -- CREATE INVOICE LINE FOR MILEAGE AMOUNT
     --****************************************

     IF (ALL_VEHICLES_MILE_REC_T.LASTREADING > 0)
     THEN

        LAST_MONTH_MILES_T  :=0;
        LAST_MONTH_MILES_T  := MAXIMO.LBL_MAXIMO_PKG.GET_LAST_MILEAGE(
                               ORGID_T, SITEID_T  ,   -- MXES 
                               ALL_VEHICLES_MILE_REC_T.ASSETNUM,
                               TRANSACTION_DT_T);
                               
        MILES_IN_MONTH_T :=(ALL_VEHICLES_MILE_REC_T.LASTREADING -LAST_MONTH_MILES_T);

        -- **************************************************************************
        -- IF ((MILES_IN_MONTH_T > 0) AND (ALL_VEHICLES_MILE_REC_T.MILEAGE_COST > 0))
        -- ALLOW TO HAVE NEGATIVE MILES
        IF ((MILES_IN_MONTH_T != 0) AND (ALL_VEHICLES_MILE_REC_T.MILEAGE_COST != 0))
             THEN
           LINECOST_T := (MILES_IN_MONTH_T * ALL_VEHICLES_MILE_REC_T.MILEAGE_COST);

              DESCRIPTION_T := 'MILEAGE COST: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM;

              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
              WHERE  ORGID=ORGID_T
              AND    SITEID=SITEID_T
              AND    INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND    INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO BATCH_MAXIMO.LBL_INVOICELINE_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                        INVOICEQTY, CONVERSION, INVOICEUNIT,
                        INVOICELINEID,
                        ORGID, SITEID, HASLD, LANGCODE, LINETYPE) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, ALL_VEHICLES_MILE_REC_T.MILEAGE_COST, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                         MILES_IN_MONTH_T,1, 'MILES',
                         1,
                         ORGID_T, SITEID_T,
                 '0','EN','SERVICE');

                -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                         AND   INVOICELINENUM=INVOICELINENUM_T;

                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                         -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(ALL_VEHICLES_MILE_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=ALL_VEHICLES_MILE_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;

                 IF REC_CNT_T = 0 THEN
                    INSERT INTO BATCH_MAXIMO.LBL_INVOICECOST_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                            UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                            ICT1, ORGID, SITEID, ENTEREDASTASK,
                    INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, ALL_VEHICLES_MILE_REC_T.ASSETNUM,
                     ALL_VEHICLES_MILE_REC_T.MILEAGE_COST, LINECOST_T, 100, INVOICELINENUM_T,
                     '0',ALL_VEHICLES_MILE_REC_T.LOCATION, MILES_IN_MONTH_T,
                             ICT1_T, ORGID_T,SITEID_T,'0',
                     1);
                 END IF;

              END IF;  -- REC_CNT_T =0

        END IF;     -- MILES_IN_MONTH_T != 0 AND MILEAGE_COST !=  0

      END IF;     -- LASTREADING > 0

     --*****************************************
     -- CREATE INVOICE LINE FOR BASE RATE AMOUNT
     --******************************************
     IF (ALL_VEHICLES_MILE_REC_T.BASE_RATE > 0)
     THEN
              LINECOST_T :=ALL_VEHICLES_MILE_REC_T.BASE_RATE ;

              DESCRIPTION_T := 'BASE RATE: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM;
              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
              WHERE ORGID=ORGID_T
              AND   SITEID=SITEID_T
              AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND   INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO BATCH_MAXIMO.LBL_INVOICELINE_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                        INVOICEQTY, CONVERSION, INVOICEUNIT, ORGID, SITEID,
                INVOICELINEID,  HASLD, LANGCODE,
                LINETYPE) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, LINECOST_T, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                 1,1,'BASERATE', ORGID_T, SITEID_T,
                 1,'0','EN',
                 'SERVICE');

                 -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                         AND   INVOICELINENUM=INVOICELINENUM_T;

                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                         -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(ALL_VEHICLES_MILE_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=ALL_VEHICLES_MILE_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;

                 IF REC_CNT_T = 0 THEN
                    INSERT INTO BATCH_MAXIMO.LBL_INVOICECOST_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                            UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                             ICT1, ORGID, SITEID, ENTEREDASTASK,
                     INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, ALL_VEHICLES_MILE_REC_T.ASSETNUM,
                     LINECOST_T, LINECOST_T, 0, INVOICELINENUM_T,
                     '0',ALL_VEHICLES_MILE_REC_T.LOCATION, 1,
                             ICT1_T, ORGID_T, SITEID_T, '0',
                     1);
                 END IF;

              END IF;  -- REC_CNT_T =0

       END IF;     -- BASE_RATE >  0

   END LOOP;

   --
   -- PROCESS ALL VEHICLES THOSE ARE INACTIVATED DURING THE MONTH
   --

   FOR INACTIVE_VEH_REC_T IN INACTIVE_VEH_CURSOR

    LOOP

        -- GET MILEAGE COST OF THE INACTIVED VEHICLE

        LAST_MONTH_MILES_T  :=0;
        LAST_MONTH_MILES_T  := MAXIMO.LBL_MAXIMO_PKG.GET_LAST_MILEAGE(
                               ORGID_T, SITEID_T,
                               INACTIVE_VEH_REC_T.ASSETNUM,
                               TRANSACTION_DT_T);
        MILES_IN_MONTH_T :=(INACTIVE_VEH_REC_T.LASTREADING - LAST_MONTH_MILES_T);

        IF ((MILES_IN_MONTH_T != 0) AND (INACTIVE_VEH_REC_T.MILEAGE_COST != 0))
             THEN
           LINECOST_T := (MILES_IN_MONTH_T * INACTIVE_VEH_REC_T.MILEAGE_COST);

              DESCRIPTION_T := 'MILEAGE COST: ' || INACTIVE_VEH_REC_T.ASSETNUM;

              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
              WHERE ORGID=ORGID_T
              AND   SITEID=SITEID_T
              AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND   INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO BATCH_MAXIMO.LBL_INVOICELINE_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                        INVOICEQTY, CONVERSION, INVOICEUNIT,
                        ORGID, SITEID, INVOICELINEID,
                 HASLD, LANGCODE, LINETYPE) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, INACTIVE_VEH_REC_T.MILEAGE_COST, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                         MILES_IN_MONTH_T,1, 'MILES',
                         ORGID_T, SITEID_T, 1,
                 '0','EN','SERVICE');

                -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                         AND   INVOICELINENUM=INVOICELINENUM_T;

                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                         -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(INACTIVE_VEH_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;

                 IF REC_CNT_T = 0 THEN
                    INSERT INTO BATCH_MAXIMO.LBL_INVOICECOST_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                            UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                            ICT1, ORGID, SITEID, ENTEREDASTASK,
                    INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, INACTIVE_VEH_REC_T.ASSETNUM,
                     INACTIVE_VEH_REC_T.MILEAGE_COST, LINECOST_T, 0, INVOICELINENUM_T,
                     '0',INACTIVE_VEH_REC_T.LOCATION, MILES_IN_MONTH_T,
                             ICT1_T, ORGID_T,SITEID_T, '0',
                     1);
                 END IF;

              END IF;  -- REC_CNT_T =0

         END IF;  -- ((MILES_IN_MONTH_T != 0)

     --****************************************************************
     -- CREATE INVOICE LINE FOR BASE RATE AMOUNT FOR INACTIVE VEHICLES
     --****************************************************************
     IF (INACTIVE_VEH_REC_T.BASE_RATE > 0)
        THEN
           LINECOST_T :=INACTIVE_VEH_REC_T.BASE_RATE ;

              DESCRIPTION_T := 'BASE RATE: ' || INACTIVE_VEH_REC_T.ASSETNUM;
              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
              WHERE ORGID=ORGID_T
              AND   SITEID=SITEID_T
              AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND   INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO BATCH_MAXIMO.LBL_INVOICELINE_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE, LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                        INVOICEQTY, CONVERSION, INVOICEUNIT,
                        ORGID, SITEID, INVOICELINEID,
                 HASLD, LANGCODE, LINETYPE) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, LINECOST_T, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                 1,1,'BASERATE',
                         ORGID_T,SITEID_T, 1,
                 '0','EN','SERVICE');

                 -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                         AND   INVOICELINENUM=INVOICELINENUM_T;

                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                     -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS
                     
                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(INACTIVE_VEH_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;

                 IF REC_CNT_T = 0 THEN
                    INSERT INTO BATCH_MAXIMO.LBL_INVOICECOST_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                            UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                            ICT1, ORGID, SITEID, ENTEREDASTASK, INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, INACTIVE_VEH_REC_T.ASSETNUM,
                     LINECOST_T, LINECOST_T, 0, INVOICELINENUM_T,
                     '0',INACTIVE_VEH_REC_T.LOCATION, 1,
                             ICT1_T, ORGID_T,SITEID_T, '0', 1);
                 END IF;

              END IF;  -- REC_CNT_T =0

       END IF;     -- BASE_RATE >  0

  END LOOP;

  -- START READING MATUSETRANS TABLE FOR BART TICKETS AND TOLL PASSES

  FOR MATUSETRANS_REC_T IN MATUSETRANS_CUR

    LOOP

      IF (MATUSETRANS_REC_T.LINECOST != 0) THEN

      INVOICELINENUM_T := INVOICELINENUM_T  + 1;

      SELECT COUNT(*) INTO REC_CNT_T
      FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
      WHERE  ORGID=ORGID_T
      AND    SITEID=SITEID_T
      AND    INVOICENUM=INVOICE_REC_T.INVOICENUM 
      AND    INVOICELINENUM=INVOICELINENUM_T;

      IF REC_CNT_T = 0 THEN

         IF MATUSETRANS_REC_T.ASSETNUM IS NOT NULL
         THEN
           DESCRIPTION_T :=RTRIM(MATUSETRANS_REC_T.ITEMNUM) || '-' || MATUSETRANS_REC_T.ASSETNUM;
         ELSE
           DESCRIPTION_T :=RTRIM(MATUSETRANS_REC_T.ITEMNUM);
         END IF;

         INSERT INTO BATCH_MAXIMO.LBL_INVOICELINE_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
         DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
         ENTERBY, ENTERDATE, LOADEDCOST, PRORATED,
         PRORATECOST, PRORATESERVICE,
             INVOICEQTY, CONVERSION, INVOICEUNIT,
             ORGID, SITEID,
         INVOICELINEID,
          HASLD, LANGCODE, LINETYPE) VALUES
         (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
          DESCRIPTION_T, MATUSETRANS_REC_T.UNITCOST, MATUSETRANS_REC_T.LINECOST,'0',0,0,0,0,0,
          INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, MATUSETRANS_REC_T.LINECOST,'0',
          0,'0',
              MATUSETRANS_REC_T.QUANTITY, 1, ' ',
              ORGID_T, SITEID_T, 1,
          '9','EN','SERVICE' );

          -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
          -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

          PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(MATUSETRANS_REC_T.GLDEBITACCT);

          IF PROJECT_DESC_T IS NULL
          THEN
              GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
              ICT1_T :='1';
          ELSE
              GLDEBITACCT_T :=MATUSETRANS_REC_T.GLDEBITACCT;
              ICT1_T := NULL;
          END IF;

         -- INSERT INTO INVOICECOST TABLE
         SELECT COUNT(*) INTO REC_CNT_T
         FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
         WHERE  ORGID=ORGID_T
         AND    SITEID=SITEID_T         
         AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
             AND    INVOICELINENUM=INVOICELINENUM_T;

         IF REC_CNT_T = 0 THEN
           INSERT INTO BATCH_MAXIMO.LBL_INVOICECOST_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
           GLDEBITACCT, ASSETNUM,
           UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
           CHARGESTORE, LOCATION, QUANTITY,
               ICT1, ORGID, SITEID, ENTEREDASTASK,
           INVOICECOSTID) VALUES
           (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
            GLDEBITACCT_T, MATUSETRANS_REC_T.ASSETNUM,
            MATUSETRANS_REC_T.UNITCOST, MATUSETRANS_REC_T.LINECOST, 0, INVOICELINENUM_T,
           '0',MATUSETRANS_REC_T.LOCATION, MATUSETRANS_REC_T.QUANTITY,
               ICT1_T, ORGID_T, SITEID_T, '0',
           1);
         END IF;

       END IF;  -- REC_CNT_T =0

      END IF;   -- LINECOST != 0

  END LOOP;

  -- START READING TOOLTRANS TABLE FOR POOL MILEAGES AND USAGES

  FOR TOOLTRANS_REC_T IN TOOLTRANS_CUR

    LOOP

     IF (TOOLTRANS_REC_T.LINECOST != 0) THEN

      INVOICELINENUM_T := INVOICELINENUM_T  + 1;

      SELECT COUNT(*) INTO REC_CNT_T
      FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
      WHERE ORGID=ORGID_T
      AND   SITEID=SITEID_T
      AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
      AND   INVOICELINENUM=INVOICELINENUM_T;

      IF REC_CNT_T = 0 THEN

         IF TOOLTRANS_REC_T.ITEMNUM='POOLMILE' THEN
           DESCRIPTION_T :='POOL MILEAGE: ' || TOOLTRANS_REC_T.ASSETNUM;
           TOOLUNIT_T := 'MILES';
         END IF;

         IF TOOLTRANS_REC_T.ITEMNUM='POOLUSG' THEN
           DESCRIPTION_T :='POOL USAGE: ' || TOOLTRANS_REC_T.ASSETNUM;
           TOOLUNIT_T :='USAGES';
         END IF;

         INSERT INTO BATCH_MAXIMO.LBL_INVOICELINE_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
         DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
         ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
         PRORATECOST, PRORATESERVICE,
             INVOICEQTY, CONVERSION, INVOICEUNIT,
             ORGID, SITEID,
         INVOICELINEID,
          HASLD, LANGCODE, LINETYPE) VALUES
         (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
          DESCRIPTION_T, TOOLTRANS_REC_T.TOOLRATE, TOOLTRANS_REC_T.LINECOST,'0',0,0,0,0,0,
          INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, TOOLTRANS_REC_T.LINECOST,'0',
          0,'0',
              TOOLTRANS_REC_T.TOOLQTY,1,TOOLUNIT_T,
              ORGID_T, SITEID_T, 1,
          '0','EN','SERVICE');

          -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
          -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

          PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(TOOLTRANS_REC_T.GLDEBITACCT);

          IF PROJECT_DESC_T IS NULL
          THEN
              GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
              ICT1_T :='1';
          ELSE
              GLDEBITACCT_T :=TOOLTRANS_REC_T.GLDEBITACCT;
              ICT1_T := NULL;
          END IF;

         -- INSERT INTO INVOICECOST TABLE
         SELECT COUNT(*) INTO REC_CNT_T
         FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
         WHERE  ORGID=ORGID_T
         AND    SITEID=SITEID_T
         AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
             AND    INVOICELINENUM=INVOICELINENUM_T;

         IF REC_CNT_T = 0 THEN
           INSERT INTO BATCH_MAXIMO.LBL_INVOICECOST_MXES (INVOICENUM, VENDOR, INVOICELINENUM,
           GLDEBITACCT, ASSETNUM,
           UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
           CHARGESTORE, LOCATION, QUANTITY,
                ICT1, ORGID, SITEID, ENTEREDASTASK,
            INVOICECOSTID) VALUES
           (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
            GLDEBITACCT_T, TOOLTRANS_REC_T.ASSETNUM,
            TOOLTRANS_REC_T.TOOLRATE, TOOLTRANS_REC_T.LINECOST, 0, INVOICELINENUM_T,
             '0',TOOLTRANS_REC_T.LOCATION, TOOLTRANS_REC_T.TOOLQTY,
                 ICT1_T, ORGID_T, SITEID_T,'0',
                 1);
                 
         END IF;

       END IF;  -- REC_CNT_T =0

      END IF;   -- LINECOST != 0

  END LOOP;

-- AT END UPDATE INVOICE AMOUNT FROM THE INVOICE LINE RECORDS AND
-- CLOSE THAT INVOICE

SELECT SUM(LINECOST) INTO TOTALCOST_T
FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND   INVOICENUM=INVOICE_REC_T.INVOICENUM;

UPDATE BATCH_MAXIMO.LBL_INVOICE_MXES
SET TOTALCOST=TOTALCOST_T, STATUS='CLOSE'
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND    INVOICENUM=INVOICE_REC_T.INVOICENUM;

SELECT COUNT(*) INTO REC_CNT_T
FROM BATCH_MAXIMO.LBL_INVOICESTATUS_MXES
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    STATUS='CLOSE';

IF REC_CNT_T=0 THEN
  INSERT INTO BATCH_MAXIMO.LBL_INVOICESTATUS_MXES(INVOICENUM, VENDOR,
             STATUS, CHANGEDATE, CHANGEBY,
                 ORGID, SITEID, INVOICESTATUSID) 
             VALUES
         (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
         'CLOSE',TRANSACTION_DT_T,'MAXIMO',
             ORGID_T, SITEID_T, 1);
END IF; 


-- NOW DELETE THE RECORDS FROM THE TABLES WHICH ARE OLDER THAN 100 DAYS

FOR LBL_INVOICE_TO_BE_DELETED_REC IN  LBL_INVOICE_TO_BE_DELETED_CUR 

  LOOP
   
    DELETE FROM BATCH_MAXIMO.LBL_INVOICELINE_MXES
    WHERE  INVOICENUM=LBL_INVOICE_TO_BE_DELETED_REC.INVOICENUM;

    DELETE FROM BATCH_MAXIMO.LBL_INVOICESTATUS_MXES
    WHERE  INVOICENUM=LBL_INVOICE_TO_BE_DELETED_REC.INVOICENUM;

    DELETE FROM BATCH_MAXIMO.LBL_INVOICECOST_MXES
    WHERE  INVOICENUM=LBL_INVOICE_TO_BE_DELETED_REC.INVOICENUM;

    DELETE FROM BATCH_MAXIMO.LBL_INVOICE_MXES
    WHERE CURRENT OF LBL_INVOICE_TO_BE_DELETED_CUR;

 END LOOP;      



END;
/

COMMIT;

