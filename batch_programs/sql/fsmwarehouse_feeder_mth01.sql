/************************************************************************
*
* PROGRAM NAME          : FSMWAREHOUSE_FEEDER_MTH01.SQL
*
*
* DESCRIPTION           : THIS PL/SQL SCRIPT CALCULATES RECHARGE AMOUNT 
*                         FOR THE ITEM STORED IN THE WAREHOUSE. 
*
*                         IT PERFORMS THE FOLLOWING:
*                         1) GET THE DETAILS OF THE FINANCIAL PERIOD FOR WHICH  
*                            THE FEEDER WILL BE PREPARED.

*                         2) DELETE ALL THE RECORDS FROM INVOICE RELATED TABLES
*                            IN CASE THE FEEDER NEEDS TO EXECUTED AGAIN.
*                      
*                         3) GET THE WAREHOUSE PARAMETER DETAILS FOR THE CURRENT
*                            DATE
* 
*                         4) START READING THE RECORDS FROM LBL_WRHSFEEDDTL TABLE
*                            (INACTIVE=0)
* 
*                         5) FOR EACH ROW, FIND OUT NUMBER OF DAYS THE ITEM IS
*                            LOCATED IN THE WAREHOUSE. IF THE NUMBER OF DAYS 
*                            EXCEEDS THE MINIMUM NUMBER OF DAYS (DEFINED IN 
*                            PARAMETER TABLE), THEN, CALCULATE THE CHARGE.
*                            
*                            CHARGE=AREA_SQ_FT * RECHARGE RATE
*                         
*                          6) INSERT THE ROWS IN INVOICE RELATED TABLES.
* 
*                          7) INSERT THE ROW IN LBL_WRHSFEEDHST TABLE.
*
*                          8) IF THE ITEM IS RETURNED DURING THE CURRENT MONTH,
*                             THEN, SET INACTIVE=1.
*  
*                          9) FOR ALL THE RECORDS IN  LBL_WRHSFEEDHST, SET THE 
*                             VALUE OF FINANCIALPERIOD TO THE NEXT FINANCIALPERIOD.
*
*                         10) FOR VAULTS - FIND OUT NUMBER OF UNIQUE VAULTS AND
*                             AND MULTIPLY IT WITH RATE PER VAULT STORED IN
*                             FEEDER SETUP TABLE.
*
*                         INSTRUCTIONS FOR RE-RUN: 
*                         1) FIND OUT FINANCIALPERIOD FOR WHICH THE PROGRAM 
*                            NEEDS TO BE RE-RUN. 
*                         2) DELETE ALL THE RECORDS FROM LBL_WRHSFEEDDTL TABLE.
*                         3) COPY ALL THE RECORDS FROM LBL_WRHSFEEDHST TABLE TO
*                            LBL_WRHSFEEDDTL TABLE
*                         4) UPDATE THE VALUE OF LBL_WRHSFEEDHDR TABLE
*                         5) ADJUST FINANCIALPERIODS TABLE, REMOVE STR07 FROM
*                            CLOSEBY COLUMN. 
*                        
*
* AUTHOR                : PANKAJ BHIDE
*
* DATE WRITTEN          : 28-MAR-2012
*
* DATE MODIFIED         :
*
* MODIFICATION HISTORTY : PANKAJ - FEB 27, 14 - REVISIONS FOR MAXIMO F$M PROJECT  
*
*                         PANKAJ - OCT 22, 15 - REVISIONS FOR MAXIMO 7.6
*******************************************************************************/
WHENEVER SQLERROR EXIT 1 ROLLBACK;

DECLARE

     REC_CNT_T           NUMBER(5);
     FINANCIALPERIOD_T   INVOICE.FINANCIALPERIOD%TYPE;
     NEXT_FINPERIOD_T    INVOICE.FINANCIALPERIOD%TYPE;
     INVOICE_REC_T       INVOICE%ROWTYPE;
     INVOICELINE_REC_T   INVOICELINE%ROWTYPE;
     TRANSACTION_DT_T    INVOICE.STATUSDATE%TYPE;
     LINECOST_T          INVOICELINE.LINECOST%TYPE;
     DESCRIPTION_T       INVOICELINE.DESCRIPTION%TYPE;
     INVOICELINENUM_T    INVOICELINE.INVOICELINENUM%TYPE :=0;
     PROJECT_DESC_T      MAXIMO.LBL_V_COA.accountname%TYPE;
     DEFAULT_GLACCOUNT_T INVOICECOST.GLDEBITACCT%TYPE :='360999';
     GLDEBITACCT_T       INVOICECOST.GLDEBITACCT%TYPE;
     ICT1_T              INVOICECOST.ICT1%TYPE;
     TOTALCOST_T         INVOICE.TOTALCOST%TYPE;
     ORGID_T             ASSET.ORGID%TYPE;
     SITEID_T            ASSET.SITEID%TYPE;
     START_MONTH_DATE_T  INVOICE.INVOICEDATE%TYPE;
     YEAR_T              INVOICE.FINANCIALPERIOD%TYPE;
     MONTH_T             INVOICE.FINANCIALPERIOD%TYPE;
     REC_LBL_WRHSFEEDDEF LBL_WRHSFEEDDEF%ROWTYPE; 
     NO_OF_DAYS_T NUMBER(5) :=0;
     CALCULATE_T  NUMBER(5) :=0;
     START_DATE_T        INVOICE.INVOICEDATE%TYPE;
     END_DATE_T          INVOICE.INVOICEDATE%TYPE;
     
     ROW_COUNT_T         NUMBER(10) :=0;
     KEY1_T              WORKORDER.DESCRIPTION%TYPE;
     PRV_VAULT_NUMBER    LBL_WRHSFEEDDTL.VAULT_NUMBER%TYPE;
     PRV_PROJECT_ID      LBL_WRHSFEEDDTL.PROJECT_ID%TYPE;
     PRV_PROJ_ACT_ID     LBL_WRHSFEEDDTL.PROJ_ACT_ID%TYPE;
     
     NEXT_START_T FINANCIALPERIODS.PERIODSTART%TYPE;
     NEXT_END_T   FINANCIALPERIODS.PERIODSTART%TYPE;
     JOURNAL_ID_T  BATCH_MAXIMO.LBL_PROJ_FEEDERS.JOURNAL_ID%TYPE;
     RETURN_T     VARCHAR2(50);
     PROJECT_ID_T  BATCH_MAXIMO.LBL_PROJ_FEEDERS.LBL_PROJECT_ID%TYPE;
     ACTIVITY_ID_T BATCH_MAXIMO.LBL_PROJ_FEEDERS.LBL_ACTIVITY_ID%TYPE;  
     DR_CR_T       BATCH_MAXIMO.LBL_PROJ_FEEDERS.DR_CR%TYPE;
     FISCAL_YEAR_T        NUMBER(4);
     ACCOUNTING_PERIOD_T  NUMBER(2);
     RECORD_ID_T    BATCH_MAXIMO.LBL_PROJ_FEEDERS.RECORD_ID%TYPE :=0;
     -- CURSOR TO READ NON-VALUT RECORDS FROM 
     -- WAREHOUSE FEEDER DETAILS TABLE 
     
     CURSOR LBL_WRHSFEEDDTL_CUR IS
      SELECT * FROM  LBL_WRHSFEEDDTL 
      WHERE VAULT_NUMBER IS NULL
      FOR UPDATE;
    
     -- CURSOR TO PROCESS VAULT RECORDS 
     CURSOR LBL_VAULT_TRANS_CUR IS 
      SELECT * FROM  LBL_WRHSFEEDDTL
      WHERE VAULT_NUMBER IS NOT NULL
      ORDER BY UPPER(VAULT_NUMBER), PROJ_ACT_ID
      FOR UPDATE; 

     SNAPSHOT_CNT_T  NUMBER(10) :=0;
     
      --************************************************ 
      -- PROCEDURE TO INSERT INVOICE DETAILS FOR VAULTS 
      --************************************************
      PROCEDURE INSERT_INVOICE(INVOICE_REC_I IN INVOICE%ROWTYPE,
                               REC2_LBL_WRHSFEEDDEF IN LBL_WRHSFEEDDEF%ROWTYPE,
                               PRV2_VAULT_NUMBER IN LBL_WRHSFEEDDTL.VAULT_NUMBER%TYPE,
                               PRV2_PROJ_ACT_ID  IN LBL_WRHSFEEDDTL.PROJ_ACT_ID%TYPE, -- F$M 
                               ORGID_I           IN   ASSET.ORGID%TYPE,
                               SITEID_I          IN   ASSET.SITEID%TYPE,
                               YEAR_I            IN   FINANCIALPERIODS.FINANCIALPERIOD%TYPE,
                               MONTH_I           IN   FINANCIALPERIODS.FINANCIALPERIOD%TYPE,
                               JOURNAL_ID_I      IN   BATCH_MAXIMO.LBL_PROJ_FEEDERS.JOURNAL_ID%TYPE)
                                      
      IS
        LINECOST2_T          INVOICELINE.LINECOST%TYPE;
        DESCRIPTION2_T       INVOICELINE.DESCRIPTION%TYPE;
        RECORD_ID_T          BATCH_MAXIMO.LBL_PROJ_FEEDERS.RECORD_ID%TYPE :=0;
        INVOICELINENUM2_T    INVOICELINE.INVOICELINENUM%TYPE; 
        REC_CNT_T            NUMBER(10) :=0;
        PROJECT2_DESC_T      MAXIMO.LBL_V_COA.accountname%TYPE;
        ICT1_T2              INVOICECOST.ICT1%TYPE;
        GLDEBITACCT2_T       INVOICECOST.GLDEBITACCT%TYPE;
        PROJECT_ID_T         LBL_V_COA.LBL_PROJECT_ID%TYPE;
        ACTIVITY_ID_T        LBL_V_COA.LBL_ACTIVITY_ID%TYPE;
        DR_CR_T              BATCH_MAXIMO.LBL_PROJ_FEEDERS.DR_CR%TYPE;
    
        
       BEGIN 
               
      --****************************************
     -- CREATE INVOICE LINE FOR LINECOST AMOUNT
     --****************************************
       
     LINECOST2_T :=REC2_LBL_WRHSFEEDDEF.RATE_PER_VAULT;          
            
     DESCRIPTION2_T := 'VAULT: ' || PRV2_VAULT_NUMBER || '-' || 
                     PRV2_PROJ_ACT_ID;

     SELECT MAX(RECORD_ID) INTO  RECORD_ID_T
     FROM   BATCH_MAXIMO.LBL_PROJ_FEEDERS
     WHERE  ORGID=ORGID_I
     AND    SITEID=SITEID_I
     AND    PROJ_TRANS_TYPE='STR'
     AND    FISCAL_YEAR=YEAR_I
     AND    ACCOUNTING_PERIOD=MONTH_I
     AND    JOURNAL_ID=JOURNAL_ID_I;
     
     SELECT MAX(INVOICELINENUM) INTO  INVOICELINENUM2_T
     FROM MAXIMO.INVOICELINE
     WHERE  ORGID=ORGID_I
     AND    SITEID=SITEID_I
     AND    INVOICENUM=INVOICE_REC_I.INVOICENUM ;
     
          
     INVOICELINENUM2_T := INVOICELINENUM2_T  + 1;
    

     SELECT COUNT(*) INTO REC_CNT_T
     FROM MAXIMO.INVOICELINE
     WHERE  ORGID=ORGID_I
     AND    SITEID=SITEID_I
     AND    INVOICENUM=INVOICE_REC_I.INVOICENUM 
     AND    INVOICELINENUM=INVOICELINENUM2_T;

     IF REC_CNT_T = 0 THEN
 
       INSERT INTO INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
       DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
       ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
       PRORATECOST, PRORATESERVICE,
       INVOICEQTY, CONVERSION, INVOICEUNIT,
       INVOICELINE.INVOICELINEID,
       ORGID, SITEID, HASLD, LANGCODE, LINETYPE, TAXEXEMPT) VALUES
       (INVOICE_REC_I.INVOICENUM,INVOICE_REC_I.VENDOR,INVOICELINENUM2_T,
        DESCRIPTION2_T, REC2_LBL_WRHSFEEDDEF.RATE_PER_VAULT, LINECOST2_T,'0',0,0,0,0,0,
        INVOICE_REC_I.ENTERBY,INVOICE_REC_I.INVOICEDATE, LINECOST2_T,'0',
        0,'0',
        1,1, 'EA',
        INVOICELINESEQ.NEXTVAL,
        ORGID_I, SITEID_I,
        '0','EN','SERVICE',1); 
        
     END IF; -- IF REC_CNT_T = 0 THEN

       -- INSERT INTO INVOICECOST TABLE
       
       SELECT MAX(INVOICELINENUM) INTO INVOICELINENUM2_T 
       FROM MAXIMO.INVOICECOST
       WHERE ORGID=ORGID_I
       AND   SITEID=SITEID_I
       AND   INVOICENUM=INVOICE_REC_I.INVOICENUM;
 
       INVOICELINENUM2_T := INVOICELINENUM2_T  + 1;
       
       SELECT COUNT(*) INTO REC_CNT_T
       FROM MAXIMO.INVOICECOST
       WHERE ORGID=ORGID_I
       AND   SITEID=SITEID_I
       AND   INVOICENUM=INVOICE_REC_I.INVOICENUM
       AND   INVOICELINENUM=INVOICELINENUM2_T;

       
       --PROJECT2_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(PRV2_PROJACT_ID);
       --REVISED FOR F$M 
       PROJECT2_DESC_T :=NULL;
       PROJECT_ID_T    := NULL;
       ACTIVITY_ID_T   :=NULL;
       
       BEGIN
         SELECT  V.ACCOUNTNAME, LBL_PROJECT_ID, LBL_ACTIVITY_ID
         INTO    PROJECT2_DESC_T, PROJECT_ID_T, ACTIVITY_ID_T
         FROM    MAXIMO.LBL_V_COA V
         WHERE   V.ORGID=ORGID_I
         AND     V.GLACCOUNT=PRV2_PROJ_ACT_ID;
       EXCEPTION WHEN OTHERS THEN 
         NULL;
       END; 

       IF PROJECT2_DESC_T IS NULL
         THEN
            --GLDEBITACCT2_T := REC2_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID;
            -- PER F$M SAME PROJECT ID 
            GLDEBITACCT2_T := PRV2_PROJ_ACT_ID;                     
            PROJECT_ID_T :=SUBSTR(REC2_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID,1, INSTR(REC2_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID,'.')-1); -- PROJECT ID
            ACTIVITY_ID_T := SUBSTR(REC2_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID, INSTR(REC2_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID,'.')+1, LENGTH(REC2_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID));      
            ICT1_T2 :='1';
         ELSE
            GLDEBITACCT2_T :=PRV2_PROJ_ACT_ID;
            ICT1_T2 := NULL;
       END IF;

       IF REC_CNT_T = 0 THEN
          INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
          GLDEBITACCT, 
          UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
          CHARGESTORE, LOCATION, QUANTITY,
          ICT1, ICT2, ORGID, SITEID, ENTEREDASTASK,
          INVOICECOST.INVOICECOSTID,
          MEMO) VALUES
          (INVOICE_REC_I.INVOICENUM,INVOICE_REC_I.VENDOR,INVOICELINENUM2_T,
           GLDEBITACCT2_T, 
           REC2_LBL_WRHSFEEDDEF.RATE_PER_VAULT, LINECOST2_T, 100, INVOICELINENUM2_T,
           '0',NULL, 1,
           ICT1_T2, NULL, ORGID_I,SITEID_I,'0',
           INVOICECOSTSEQ.NEXTVAL,
           SUBSTR('VAULT: ' ||PRV2_VAULT_NUMBER || '-' || PRV2_PROJ_ACT_ID,1,25)
           );
           
           --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF (LINECOST2_T >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
                
           RECORD_ID_T := RECORD_ID_T + 1;
                        
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_I, 
           SITEID_I, REC2_LBL_WRHSFEEDDEF.PROJ_TRANS_TYPE, TO_NUMBER(YEAR_I),
           TO_NUMBER(MONTH_I), JOURNAL_ID_I, RECORD_ID_T, 
           INVOICE_REC_I.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC2_LBL_WRHSFEEDDEF.GLDEBITACCT, ' ', 'VAULT-RECHARGE',
           REC2_LBL_WRHSFEEDDEF.RECHR_RES_TYPE, REC2_LBL_WRHSFEEDDEF.RECHR_RES_CATG,
           SUBSTR(PRV2_VAULT_NUMBER || '-' || PRV2_PROJ_ACT_ID,1,25), 'EA', 
           DR_CR_T,
           ABS(LINECOST2_T),
           NVL(ICT1_T2,0),-- INACTIVE
           REC2_LBL_WRHSFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- FUND CODE, DEPT CODE 
           NULL  -- ASSET_TYPE
           ); 

          -- OFFSETTING ENTRY
          IF (LINECOST2_T >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
                     
          RECORD_ID_T := RECORD_ID_T + 1;
          
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_I, 
           SITEID_I, REC2_LBL_WRHSFEEDDEF.PROJ_TRANS_TYPE, TO_NUMBER(YEAR_I),
           TO_NUMBER(MONTH_I), JOURNAL_ID_I, RECORD_ID_T, 
           INVOICE_REC_I.INVOICEDATE, 'PROJ-OFF',
           SUBSTR(REC2_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID,1, INSTR(REC2_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID,'.')-1), -- PROJECT ID
           SUBSTR(REC2_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID, INSTR(REC2_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID,'.')+1, LENGTH(REC2_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID)),
           REC2_LBL_WRHSFEEDDEF.GLCREDITACCT, ' ', 'VAULT-RECHARGE-OFF',
           REC2_LBL_WRHSFEEDDEF.RECV_RES_TYPE, REC2_LBL_WRHSFEEDDEF.RECV_RES_CATG,
           SUBSTR(PRV2_VAULT_NUMBER || '-' || PRV2_PROJ_ACT_ID,1,25), 'EA', 
           DR_CR_T,
           ABS(LINECOST2_T),
           NVL(ICT1_T2,0),   -- SAME AS REGULAR ENTRY 
           REC2_LBL_WRHSFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- FUND CODE, DEPT CODE
           NULL  -- ASSET_TYPE
           );
           
       END IF; -- IF REC_CNT_T = 0 THEN
       
   END ; -- END OF PROCEDURE   

/*********************************************************************
  MAIN PROGRAM STARTS FROM HERE
 *********************************************************************/
BEGIN

 DBMS_OUTPUT.ENABLE(1000000);
 
/* COMMENTED FOR F$M PROJECT  DW.PV_PROJECT IS NOT USED ANYMORE 
-- FIRSTLY CHECK WHETHER THE SNAPSHOT TITLED DW.PV_PROJECT IS
-- REFRESHED OR NOT

WHILE SNAPSHOT_CNT_T=0

 LOOP

   SELECT COUNT(*) INTO SNAPSHOT_CNT_T FROM DW.PV_PROJECT;
   IF SNAPSHOT_CNT_T != 0 THEN
      EXIT;
   ELSE
     -- SLEEP FOR 2 MINUTES
     DBMS_LOCK.SLEEP(120);
   END IF;

  END LOOP;
*/
    -- MXES 
    ORGID_T   :=UPPER('&1');
    SITEID_T  :=UPPER('&2');
   
    IF (ORGID_T IS NULL OR LENGTH(ORGID_T)=0) THEN
       ORGID_T :='LBNL';
    END IF;
     
    IF (SITEID_T IS NULL OR LENGTH(SITEID_T)=0) THEN
       SITEID_T :='FAC';
    END IF;
    
   -- GET THE ACCOUNTING PERIOD 
    
    SELECT B.FINANCIALPERIOD, TRUNC(B.PERIODSTART),   TRUNC(B.PERIODEND-1),
           TO_NUMBER(SUBSTR(B.FINANCIALPERIOD, 1,4)), TO_NUMBER(SUBSTR(B.FINANCIALPERIOD,5,2))
    INTO   FINANCIALPERIOD_T,   START_MONTH_DATE_T, TRANSACTION_DT_T,
           FISCAL_YEAR_T, ACCOUNTING_PERIOD_T
    FROM   FINANCIALPERIODS B
    WHERE  B.FINANCIALPERIOD=(SELECT MIN(C.FINANCIALPERIOD) FROM FINANCIALPERIODS C
     WHERE  (NVL(C.CLOSEDBY,' ') NOT LIKE '%STR%') AND C.ORGID=ORGID_T)
     AND    B.ORGID=ORGID_T;
  

    
-- GET NEXT FINACIALPERIOD 

YEAR_T  :=SUBSTR(FINANCIALPERIOD_T,1,4);
MONTH_T :=SUBSTR(FINANCIALPERIOD_T,5,2);

MONTH_T :=MONTH_T+1;

IF (MONTH_T=13) THEN
  MONTH_T :='01';
  YEAR_T  := TO_CHAR(YEAR_T+1);
ELSE
  MONTH_T := LPAD(TO_CHAR(MONTH_T),2,'0');
END IF;
 
NEXT_FINPERIOD_T := YEAR_T || MONTH_T;

   
-- GET THE LATEST WAREHOUSE FEEDER PARAMETER DETAILS
     
   SELECT  * INTO REC_LBL_WRHSFEEDDEF  
   FROM LBL_WRHSFEEDDEF  A
   WHERE A.ORGID=ORGID_T
   AND   A.SITEID=SITEID_T
   AND   A.FEEDER_ID='STR'
   AND   A.EFFDT = (SELECT MAX(B.EFFDT) 
    FROM LBL_WRHSFEEDDEF B
    WHERE B.ORGID=ORGID_T
    AND   B.SITEID=SITEID_T
    AND   B.FEEDER_ID='STR'
    AND   B.EFFDT <= SYSDATE);
 


   -- F$M REVISION 
   -- GET JOURNAL ID (COMMON TO ALL THE TRANSACTIONS)
    SELECT BATCH_MAXIMO.LBL_JOURNAL_SEQ.NEXTVAL 
    INTO  JOURNAL_ID_T
    FROM  DUAL;



-- PREPARE INVOICE HEADER RECORD

INVOICE_REC_T.INVOICENUM :='WAREHOUSE' || '-'|| FINANCIALPERIOD_T;
INVOICE_REC_T.INVOICEDATE := TRANSACTION_DT_T;
INVOICE_REC_T.DESCRIPTION := 'WAREHOUSE: MONTHLY RECHARGES FOR-' || FINANCIALPERIOD_T;
INVOICE_REC_T.DOCUMENTTYPE :='INVOICE';
INVOICE_REC_T.STATUS :='APPR';
INVOICE_REC_T.STATUSDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.ENTERDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.ENTERBY :='MAXIMO';
INVOICE_REC_T.CHANGEDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.CHANGEBY :='MAXIMO';
INVOICE_REC_T.HISTORYFLAG :='1';
INVOICE_REC_T.TOTALCOST :=0;
INVOICE_REC_T.FINANCIALPERIOD :=FINANCIALPERIOD_T;


-- NOW  DELETE ALL THE RECORDS FROM THE TABLES WHERE THE FEEDER TRANSACTIONS
-- WILL BE INSERTED. THIS WILL ENABLE THE USERS TO EXECUTE THIS PROGRAM
-- AGAIN IF THE FEEDER NEEDS TO BE SENT AGAIN TO FMS

DELETE FROM INVOICE
WHERE INVOICEDATE=TRANSACTION_DT_T
AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

DELETE FROM INVOICELINE
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

DELETE FROM INVOICESTATUS
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;


DELETE FROM INVOICECOST
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

DELETE FROM LBL_WRHSFEEDHST
WHERE ORGID=ORGID_T
AND   SITEID=SITEID_T
AND   FINANCIALPERIOD=FINANCIALPERIOD_T;

-- ADDED FOR F$M PROJECT
DELETE FROM BATCH_MAXIMO.LBL_PROJ_FEEDERS
WHERE ORGID=ORGID_T
AND   SITEID=SITEID_T
AND   FISCAL_YEAR=FISCAL_YEAR_T
AND   ACCOUNTING_PERIOD=ACCOUNTING_PERIOD_T
AND   PROJ_TRANS_TYPE=REC_LBL_WRHSFEEDDEF.PROJ_TRANS_TYPE
AND   LBL_PROJ_FEED1 IS NULL;  

SELECT DISTINCT COMPANY, CURRENCYCODE
INTO INVOICE_REC_T.VENDOR,INVOICE_REC_T.CURRENCYCODE
FROM MAXIMO.COMPANIES WHERE COMPANY='LBNL'
AND  ORGID=ORGID_T;

-- START INSERTING RECORD IN INVOICE AND INVOICESTATUS TABLES
SELECT COUNT(*) INTO REC_CNT_T
FROM MAXIMO.INVOICESTATUS
WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   STATUS='ENTERED'
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;


IF REC_CNT_T=0 THEN
  INSERT INTO MAXIMO.INVOICESTATUS(INVOICENUM, VENDOR,
               STATUS, CHANGEDATE, CHANGEBY, ORGID, SITEID,
               INVOICESTATUS.INVOICESTATUSID) VALUES
               (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
               'ENTERED',TRANSACTION_DT_T,'MAXIMO', ORGID_T,SITEID_T,
               INVOICESTATUSSEQ.NEXTVAL);   -- MXES 
END IF;

SELECT COUNT(*) INTO REC_CNT_T FROM MAXIMO.INVOICE
WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

IF REC_CNT_T =0 THEN
  INSERT INTO MAXIMO.INVOICE
   (INVOICENUM, DESCRIPTION, VENDOR,
    CURRENCYCODE, DOCUMENTTYPE,
    STATUS, STATUSDATE,
    ENTERDATE, ENTERBY,
    CHANGEDATE, CHANGEBY,
    HISTORYFLAG, TOTALTAX1, TOTALTAX2, TOTALTAX3,TOTALTAX4,TOTALTAX5,
    INCLUSIVE1, INCLUSIVE2, INCLUSIVE3,INCLUSIVE4, INCLUSIVE5,
    TOTALCOST, FINANCIALPERIOD, INVOICEDATE,
    EINVOICE,
    ORGID, SITEID,
    INVOICE.INVOICEID, HASLD,
    LANGCODE, GLPOSTDATE) VALUES   

    (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.DESCRIPTION, INVOICE_REC_T.VENDOR,
     INVOICE_REC_T.CURRENCYCODE, INVOICE_REC_T.DOCUMENTTYPE,
     INVOICE_REC_T.STATUS, INVOICE_REC_T.STATUSDATE,
     INVOICE_REC_T.ENTERDATE, INVOICE_REC_T.ENTERBY,
     INVOICE_REC_T.CHANGEDATE, INVOICE_REC_T.CHANGEBY,
     '1',0,0,0,0,0,
      '0','0','0','0','0',
      INVOICE_REC_T.TOTALCOST, INVOICE_REC_T.FINANCIALPERIOD, INVOICE_REC_T.INVOICEDATE,
      '0',
      ORGID_T,SITEID_T,
      INVOICESEQ.NEXTVAL,'0',
      'EN', INVOICE_REC_T.ENTERDATE);   -- MXES 
  END IF;

  SELECT COUNT(*) INTO REC_CNT_T FROM MAXIMO.INVOICESTATUS
  WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
  AND   STATUS='APPR';

  IF REC_CNT_T =0  THEN
     INSERT INTO MAXIMO.INVOICESTATUS(INVOICENUM, VENDOR,
                                      STATUS, CHANGEDATE, CHANGEBY,
                                                      ORGID, SITEID,
                                      INVOICESTATUS.INVOICESTATUSID) 
                                      VALUES
                   (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
                    'APPR',TRANSACTION_DT_T,'MAXIMO',
                             ORGID_T, SITEID_T,
                     INVOICESTATUSSEQ.NEXTVAL);
  END IF;
  
  
    -- COPY ALL THE RECORDS FROM WAREHOUSE FEEDER DETAILS TABLE
    -- TO WAREHOUSE FEEDER HISTORY TABLE 
 
     INSERT /*+ APPEND */  INTO LBL_WRHSFEEDHST C
     (C.DESCRIPTION, C.ORGID, C.SITEID,
      C.FINANCIALPERIOD, C.LBL_ORG_LEVEL_1,
      C.CONTAINER_NUMBER, C.DOE_NUMBER,
      C.QUANTITY, C.DATE_RECEIVED,
      C.LOCATION, C.SQ_FT_USED,
      C.PROJECT_ID, C.CHANGEBY,
      C.CHANGEDATE, C.HASLD,
      C.FEEDER_ID, C.COMMENTS, 
      C.DISABLED, C.UNITOFMEASURE, C.DATE_RETURNED,
      C.OWNERID, C.CONSIGNORID, C.CODETAG,
      C.CATEGORY, C.DATE_COPIED,
      C.LBL_WRHSFEEDDTLID,
      C.LBL_WRHSFEEDHSTID,
      C.VAULT_NUMBER,
      C.PROJ_ACT_ID  -- F$M
  
    )
     SELECT 
      A.DESCRIPTION, A.ORGID, A.SITEID,
      A.FINANCIALPERIOD, A.LBL_ORG_LEVEL_1,
      A.CONTAINER_NUMBER, A.DOE_NUMBER,
      A.QUANTITY, A.DATE_RECEIVED,
      A.LOCATION, A.SQ_FT_USED,
      A.PROJECT_ID, A.CHANGEBY,
      A.CHANGEDATE, A.HASLD,
      A.FEEDER_ID, A.COMMENTS, 
      A.DISABLED, A.UNITOFMEASURE, A.DATE_RETURNED,
      A.OWNERID, A.CONSIGNORID, A.CODETAG,
      A.CATEGORY, SYSDATE,
      A.LBL_WRHSFEEDDTLID,
      LBL_WRHSFEEDHSTSEQ.NEXTVAL,
      A.VAULT_NUMBER,
      A.PROJ_ACT_ID       -- F$M 
      FROM LBL_WRHSFEEDDTL A;

  -- START INSERTING RECORDS FROM WAREHOUSE FEEDER DETAILS TABLE
  -- TO INVOICE TABLES 
  
 
  FOR  LBL_WRHSFEEDDTL_CUR_REC IN LBL_WRHSFEEDDTL_CUR

   LOOP
    
    -- SKIP IF THE RECORD IS MARKED FOR DELETION AND 
    -- SQ FT USED =0
    IF (LBL_WRHSFEEDDTL_CUR_REC.DISABLED=0 AND 
        LBL_WRHSFEEDDTL_CUR_REC.SQ_FT_USED !=0) THEN
    
       CALCULATE_T :=1;
       NO_OF_DAYS_T :=0;
              
       -- FIND OUT NUMBER OF DAYS THE ITEM WAS STORED IN THE 
       -- WAREHOUSE 
       
       IF (LBL_WRHSFEEDDTL_CUR_REC.DATE_RECEIVED IS NULL) THEN
         START_DATE_T :=START_MONTH_DATE_T;
       ELSE
         START_DATE_T :=LBL_WRHSFEEDDTL_CUR_REC.DATE_RECEIVED;
       END IF;
       
       IF (LBL_WRHSFEEDDTL_CUR_REC.DATE_RETURNED IS NULL) THEN
          END_DATE_T :=TRANSACTION_DT_T;
       ELSE
          END_DATE_T :=LBL_WRHSFEEDDTL_CUR_REC.DATE_RETURNED ;
       END IF;
       
       NO_OF_DAYS_T := NVL(END_DATE_T - START_DATE_T,0);
                            
       IF (NO_OF_DAYS_T >= NVL(REC_LBL_WRHSFEEDDEF.MIN_DAYS_RECHARGE,0)) THEN
         CALCULATE_T :=1;
       ELSE
         CALCULATE_T :=0;
      END IF;
      
      
    IF (CALCULATE_T =1) THEN
    
     --****************************************
     -- CREATE INVOICE LINE FOR LINECOST AMOUNT
     --****************************************
       
     LINECOST_T :=(REC_LBL_WRHSFEEDDEF.RATE_PER_SQFT * 
                   LBL_WRHSFEEDDTL_CUR_REC.SQ_FT_USED);
            
            
     DESCRIPTION_T := SUBSTR(NVL(LBL_WRHSFEEDDTL_CUR_REC.DESCRIPTION,' ') ||
                      ' CODE TAG: '  || NVL(LBL_WRHSFEEDDTL_CUR_REC.CODETAG,' ') ||
                      ' OWNER: '     || NVL(LBL_WRHSFEEDDTL_CUR_REC.OWNERID,' ') ||
                      ' CONSIGNER: ' || NVL(LBL_WRHSFEEDDTL_CUR_REC.CONSIGNORID,' ') ||
                      ' CATEGORY: '  || NVL(LBL_WRHSFEEDDTL_CUR_REC.CATEGORY,' '), 1, 254);
              
     INVOICELINENUM_T := INVOICELINENUM_T  + 1;

     SELECT COUNT(*) INTO REC_CNT_T
     FROM MAXIMO.INVOICELINE
     WHERE  ORGID=ORGID_T
     AND    SITEID=SITEID_T
     AND    INVOICENUM=INVOICE_REC_T.INVOICENUM 
     AND    INVOICELINENUM=INVOICELINENUM_T;

     IF REC_CNT_T = 0 THEN
 
       INSERT INTO INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
       DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
       ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
       PRORATECOST, PRORATESERVICE,
           INVOICEQTY, CONVERSION, INVOICEUNIT,
           INVOICELINE.INVOICELINEID,
           ORGID, SITEID, HASLD, LANGCODE, LINETYPE, TAXEXEMPT) VALUES
       (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
        DESCRIPTION_T, REC_LBL_WRHSFEEDDEF.RATE_PER_SQFT, LINECOST_T,'0',0,0,0,0,0,
        INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
        0,'0',
            LBL_WRHSFEEDDTL_CUR_REC.SQ_FT_USED,1, 'FT',
            INVOICELINESEQ.NEXTVAL,
            ORGID_T, SITEID_T,
        '0','EN','SERVICE',1); 
        
     END IF; -- IF REC_CNT_T = 0 THEN

       -- INSERT INTO INVOICECOST TABLE
       SELECT COUNT(*) INTO REC_CNT_T
       FROM MAXIMO.INVOICECOST
       WHERE ORGID=ORGID_T
       AND   SITEID=SITEID_T
       AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
       AND   INVOICELINENUM=INVOICELINENUM_T;

       -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
       -- RESET TO DEFAULT GLACCOUNT FOR THAT TRANS

       --PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(LBL_WRHSFEEDDTL_CUR_REC.PROJECT_ID);

       --REVISED FOR F$M 
       PROJECT_DESC_T :=NULL;
       PROJECT_ID_T   :=NULL;
       ACTIVITY_ID_T  :=NULL;
     
      
       BEGIN
         SELECT  V.ACCOUNTNAME, LBL_PROJECT_ID, LBL_ACTIVITY_ID
         INTO    PROJECT_DESC_T, PROJECT_ID_T, ACTIVITY_ID_T
         FROM    MAXIMO.LBL_V_COA V
         WHERE   V.ORGID=ORGID_T
         AND     V.GLACCOUNT=LBL_WRHSFEEDDTL_CUR_REC.PROJ_ACT_ID
         AND     V.ACTIVE=1;
       EXCEPTION WHEN OTHERS THEN 
         NULL;
       END; 

       IF PROJECT_DESC_T IS NULL
         THEN
           -- GLDEBITACCT_T := REC_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID;
           -- NOT ALLOWED IN F$M             GLDEBITACCT_T :=LBL_WRHSFEEDDTL_CUR_REC.PROJ_ACT_ID;
            PROJECT_ID_T :=SUBSTR(REC_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID,1, INSTR(REC_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID,'.')-1); -- PROJECT ID
            ACTIVITY_ID_T := SUBSTR(REC_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID, INSTR(REC_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID,'.')+1, LENGTH(REC_LBL_WRHSFEEDDEF.DROP_PROJ_ACT_ID));
            ICT1_T :='1';
         ELSE
            GLDEBITACCT_T :=LBL_WRHSFEEDDTL_CUR_REC.PROJ_ACT_ID;
            ICT1_T := NULL;
       END IF;

       IF REC_CNT_T = 0 THEN
          INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
          GLDEBITACCT, 
          UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
          CHARGESTORE, LOCATION, QUANTITY,
          ICT1, ICT2, ORGID, SITEID, ENTEREDASTASK,
          INVOICECOST.INVOICECOSTID,
          MEMO) VALUES
          (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
           GLDEBITACCT_T, 
           REC_LBL_WRHSFEEDDEF.RATE_PER_SQFT, LINECOST_T, 100, INVOICELINENUM_T,
           '0',LBL_WRHSFEEDDTL_CUR_REC.LOCATION, LBL_WRHSFEEDDTL_CUR_REC.SQ_FT_USED,
           ICT1_T, LBL_WRHSFEEDDTL_CUR_REC.LBL_WRHSFEEDDTLID, ORGID_T,SITEID_T,'0',
           INVOICECOSTSEQ.NEXTVAL,
           SUBSTR('DIV: ' ||LBL_WRHSFEEDDTL_CUR_REC.LBL_ORG_LEVEL_1,1,25) );
           

           --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           RECORD_ID_T := RECORD_ID_T + 1;
           
           -- REGULAR ENTRY    
           IF (LINECOST_T >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
                      
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_WRHSFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_WRHSFEEDDEF.GLDEBITACCT, ' ', 'RECHARGE',
           REC_LBL_WRHSFEEDDEF.RECHR_RES_TYPE, REC_LBL_WRHSFEEDDEF.RECHR_RES_CATG,
           SUBSTR('DIV: ' ||LBL_WRHSFEEDDTL_CUR_REC.LBL_ORG_LEVEL_1,1,25) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_WRHSFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL,  -- DEPT, FUND CODE            
           NULL  -- ASSET_TYPE
           );
           
          -- OFFTING ENTRY
          IF (LINECOST_T >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
              
          RECORD_ID_T := RECORD_ID_T + 1;       
          RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_WRHSFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           SUBSTR(REC_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID,1, INSTR(REC_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID,'.')-1), -- PROJECT ID
           SUBSTR(REC_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID, INSTR(REC_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID,'.')+1, LENGTH(REC_LBL_WRHSFEEDDEF.DEF_PROJ_ACT_ID)),
           REC_LBL_WRHSFEEDDEF.GLCREDITACCT, ' ', 'RECHARGE-OFF',
           REC_LBL_WRHSFEEDDEF.RECV_RES_TYPE, REC_LBL_WRHSFEEDDEF.RECV_RES_CATG,
           SUBSTR('DIV: ' ||LBL_WRHSFEEDDTL_CUR_REC.LBL_ORG_LEVEL_1,1,25) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_WRHSFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL,  -- DEPT, FUND 
           NULL  -- ASSET_TYPE
           );
                     
           
       END IF; -- IF REC_CNT_T = 0 THEN

     END IF;     -- CALCULATE_T =1
     
     IF (LBL_WRHSFEEDDTL_CUR_REC.DATE_RETURNED  IS NOT NULL) THEN
       DELETE FROM  LBL_WRHSFEEDDTL WHERE CURRENT OF LBL_WRHSFEEDDTL_CUR;
    ELSE
     
     UPDATE LBL_WRHSFEEDDTL 
     SET FINANCIALPERIOD=NEXT_FINPERIOD_T
     WHERE CURRENT OF LBL_WRHSFEEDDTL_CUR;
    END IF;
    
   END IF;   --IF (LBL_WRHSFEEDDTL_CUR_REC.DISABLED=0 AND 
             --LBL_WRHSFEEDDTL_CUR_REC.SQ_FT_USED !=0) THEN         
   
     
  END LOOP;
  
  --*******************
  -- PROCESS FOR VAULTS 
  -- ******************
  KEY1_T :=' ';
  ROW_COUNT_T :=0;
  
  FOR LBL_VAULT_TRANS_REC  IN LBL_VAULT_TRANS_CUR 
  
   LOOP
   
    ROW_COUNT_T := ROW_COUNT_T + 1;
    IF (ROW_COUNT_T =1) THEN 
         KEY1_T := UPPER(LBL_VAULT_TRANS_REC.VAULT_NUMBER) || NVL(LBL_VAULT_TRANS_REC.PROJ_ACT_ID,' ');
         PRV_VAULT_NUMBER :=UPPER(LBL_VAULT_TRANS_REC.VAULT_NUMBER) ;
         PRV_PROJ_ACT_ID   :=NVL(LBL_VAULT_TRANS_REC.PROJ_ACT_ID,' ');
         
         
         INSERT_INVOICE(INVOICE_REC_T,
                        REC_LBL_WRHSFEEDDEF,
                        PRV_VAULT_NUMBER,
                        PRV_PROJ_ACT_ID,
                        ORGID_T,
                        SITEID_T,
                        FISCAL_YEAR_T,
                        ACCOUNTING_PERIOD_T,
                        JOURNAL_ID_T);
         
    END IF;
    
    IF (KEY1_T != (UPPER(LBL_VAULT_TRANS_REC.VAULT_NUMBER) || NVL(LBL_VAULT_TRANS_REC.PROJ_ACT_ID,' ')))
     THEN
        KEY1_T := UPPER(LBL_VAULT_TRANS_REC.VAULT_NUMBER) || NVL(LBL_VAULT_TRANS_REC.PROJ_ACT_ID,' ');
         PRV_VAULT_NUMBER :=UPPER(LBL_VAULT_TRANS_REC.VAULT_NUMBER) ;
         PRV_PROJ_ACT_ID :=NVL(LBL_VAULT_TRANS_REC.PROJ_ACT_ID,' ');
         
         
         INSERT_INVOICE(INVOICE_REC_T,
                        REC_LBL_WRHSFEEDDEF,
                        PRV_VAULT_NUMBER,
                        PRV_PROJ_ACT_ID,
                        ORGID_T,
                        SITEID_T,
                        FISCAL_YEAR_T,
                        ACCOUNTING_PERIOD_T,
                        JOURNAL_ID_T);
    END IF;
       
            
     IF (LBL_VAULT_TRANS_REC.DATE_RETURNED  IS NOT NULL) THEN
       DELETE FROM  LBL_WRHSFEEDDTL WHERE CURRENT OF LBL_VAULT_TRANS_CUR;
     ELSE     
      UPDATE LBL_WRHSFEEDDTL 
      SET FINANCIALPERIOD=NEXT_FINPERIOD_T
      WHERE CURRENT OF LBL_VAULT_TRANS_CUR;
     END IF;
     
   END LOOP; 
  
    

-- AT END UPDATE INVOICE AMOUNT FROM THE INVOICE LINE RECORDS AND
-- CLOSE THAT INVOICE

SELECT SUM(LINECOST) INTO TOTALCOST_T
FROM MAXIMO.INVOICELINE
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND   INVOICENUM=INVOICE_REC_T.INVOICENUM;

UPDATE MAXIMO.INVOICE
SET TOTALCOST=TOTALCOST_T, STATUS='CLOSE'
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND    INVOICENUM=INVOICE_REC_T.INVOICENUM;

SELECT COUNT(*) INTO REC_CNT_T
FROM MAXIMO.INVOICESTATUS
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    STATUS='CLOSE';

IF REC_CNT_T=0 THEN
  INSERT INTO MAXIMO.INVOICESTATUS(INVOICENUM, VENDOR,
             STATUS, CHANGEDATE, CHANGEBY,
                 ORGID, SITEID, INVOICESTATUS.INVOICESTATUSID) 
             VALUES
         (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
         'CLOSE',TRANSACTION_DT_T,'MAXIMO',
             ORGID_T, SITEID_T, INVOICESTATUSSEQ.NEXTVAL);
END IF; 


-- LASTLY UPDATE LBL_WRHSFEEDHDR TABLE WITH THE NEWER ACCCOUNTING PERIOD 

SELECT PERIODSTART, PERIODEND 
INTO   NEXT_START_T, NEXT_END_T
FROM FINANCIALPERIODS
WHERE FINANCIALPERIOD=NEXT_FINPERIOD_T; 

UPDATE LBL_WRHSFEEDHDR
SET FINANCIALPERIOD=NEXT_FINPERIOD_T,
PERIODSTART=NEXT_START_T, PERIODEND=NEXT_END_T,
CHANGEDATE=SYSDATE;



END;
/

COMMIT;

