/************************************************************************
*
* PROGRAM NAME          : FSMFLEET_FEEDER_MTH01.SQL
*
*
* DESCRIPTION           : THIS PL/SQL SCRIPT CALCULATES THE NUMBER OF MILES
*                         DRIVEN BY EACH VEHICLE DURING THE MONTH. LATER IT
*                         TAKES THE BASE RATE OF EACH VEHICLE AND GENERATE
*                         INVOICELINES. IT ALSO READS RECORDS FROM MATUSETRANS
*                         AND TOOLTRANS TABLES FOR ANY COSTS BOOKED FOR
*                         THE MONTH.
*
* AUTHOR                : PANKAJ BHIDE
*
* DATE WRITTEN          : 15-DEC-2000
*
* DATE MODIFIED         :
*
* MODIFICATION HISTORTY : 30-JUL-2001 PANKAJ - TOOK CARE OF NEGATIVE MILES
*
*                         16-OCT-2001 PANKAJ - WHILE CHARGING FOR BASE RATE
*                         AND MILEAGE RATE FOR INACTIVE VEHICLE, CONSIDER
*                         ONLY THOSE WORKORDERS THAT APPROVED DURING THIS
*                         MONTH
*
*                         04-DEC-2001 PANKAJ - MODIFIED THE CODE TO TAKE
*                         CARE OF NON-NULL COLUMNS REQUIRED FOR RELEASE
*                         4.1.1
*
*                        08-AUG-02 - PANKAJ - CHECK WHETHER THE DW.PV_PROJECT
*                        SNAPSHOT IS COMPLETELY REFRESHED. IF IT IS NOT
*                        REFRESHED COMPLETELY, THE PROGRAM WILL WAIT FOR 2
*                        MINUTES AND LOOP TO CHECK WHETHER THE SNAPSHOT
*                        CONTAINS THE RECORD. IT WILL EXIT THE LOOP WHEN
*                        IT FINDS THE RECORD IN THE SNAPSHOT.
*
*                        13-DEC-02 - PANKAJ - MODIFIED TO TAKE CARE OF THE
*                        ACCELERATED MONTHLY LEDGER CLOSING.
*
*                        12-AUG-04 - PANKAJ - MODIFIED FOR RELEASE 5.2
*
*                        26-MAR-09  PANKAJ - CHANGES REQUIRED FOR MXES 
*
*                        17-MAY-11  PANKAJ - FOR VEHICLES DECOMMISSIONED,
*                                            LOOK INTO ASSETSTATUS TABLE
*                                            TO FIND OUT WHETHER IT WAS 
*                                            DECOMMISIONED DURING THIS MONTH.
*
*                        04-MAR- 14 PANKAJ - REVISIONS FOR MAXIMO F$M PROJECT 
*
*                        17-APR-15  PANKAJ - JIRA-EF-967
*                 
*                        21-OCT-15  PANKAJ - CHANGES FOR MAXIMO 7.6
*************************************************************************/
WHENEVER SQLERROR EXIT 1 ROLLBACK;

DECLARE

     REC_CNT_T           NUMBER(5);
     FINANCIALPERIOD_T   INVOICE.FINANCIALPERIOD%TYPE;
     INVOICE_REC_T       INVOICE%ROWTYPE;
     INVOICELINE_REC_T   INVOICELINE%ROWTYPE;
     TRANSACTION_DT_T    INVOICE.STATUSDATE%TYPE;
     LAST_MONTH_MILES_T  ASSETMETER.LASTREADING%TYPE;
     MILES_IN_MONTH_T    ASSETMETER.LASTREADING%TYPE;
     LINECOST_T          INVOICELINE.LINECOST%TYPE;
     DESCRIPTION_T       INVOICELINE.DESCRIPTION%TYPE;
     INVOICELINENUM_T    INVOICELINE.INVOICELINENUM%TYPE :=0;
     TOOLUNIT_T          INVOICELINE.INVOICEUNIT%TYPE;
     PROJECT_DESC_T      MAXIMO.lbl_v_coa.accountname%type;
     DEFAULT_GLACCOUNT_T INVOICECOST.GLDEBITACCT%TYPE :='360199';
     GLDEBITACCT_T       INVOICECOST.GLDEBITACCT%TYPE;
     ICT1_T              INVOICECOST.ICT1%TYPE;
     TOTALCOST_T         INVOICE.TOTALCOST%TYPE;
     START_MONTH_DATE_T  INVOICE.STATUSDATE%TYPE;
     ORGID_T             ASSET.ORGID%TYPE;
     SITEID_T            ASSET.SITEID%TYPE;

    /* CURSOR TO READ ALL ACTIVE VEHICLES */
    CURSOR ALL_VEHICLES_MILE_CUR IS
    SELECT NVL(REPLACE(C.LASTREADING, ','),0) LASTREADING,  -- CHANGED ON 12/18/09
           A.GLACCOUNT, A.LOCATION,
           B.ASSETNUM, B.BASE_RATE, B.MILEAGE_COST, B.ISPOOL
    FROM   MAXIMO.ASSET A, MAXIMO.LBL_VEHICLESPEC B, 
           MAXIMO.ASSETMETER C
    WHERE  A.ORGID=B.ORGID
    AND    A.SITEID=B.SITEID
    AND    A.ASSETNUM=B.ASSETNUM
    AND    B.ORGID=C.ORGID
    AND    B.SITEID=C.SITEID
    AND    B.ASSETNUM=C.ASSETNUM
    AND    A.ORGID=ORGID_T
    AND    B.SITEID=SITEID_T
    AND    C.METERNAME='FLEET'
    AND    B.VEHICLE_CLASS IS NOT NULL
    AND    NVL(A.ISRUNNING,'1')='1'      -- MXES 
    ORDER BY A.ASSETNUM;

    /* CURSOR TO READ TOOLTRANS TABLE */
   CURSOR TOOLTRANS_CUR IS
   SELECT A.ITEMNUM, A.ASSETNUM, A.GLDEBITACCT, A.LOCATION, A.LINECOST, A.TOOLQTY,
          A.TOOLRATE
   FROM MAXIMO.TOOLTRANS A,  MAXIMO.ASSETMETER B
   WHERE  A.ASSETNUM=B.ASSETNUM
   AND    B.METERNAME='FLEET'
   AND    A.FINANCIALPERIOD=FINANCIALPERIOD_T
   AND    A.ITEMNUM LIKE 'POOL%'      -- MXES 
   AND    A.ORGID=ORGID_T
   AND    A.SITEID=SITEID_T
   ORDER BY A.ASSETNUM;

   /* CURSOR TO READ MATUSETRANS TABLE FOR BART TICKETS AND TOLLPASSES */
   CURSOR MATUSETRANS_CUR IS
   SELECT A.ASSETNUM, A.GLDEBITACCT, A.LOCATION, A.LINECOST, A.UNITCOST,
          A.ITEMNUM, ABS(A.QUANTITY) QUANTITY
   FROM   MAXIMO.MATUSETRANS A
   WHERE  A.ORGID=ORGID_T
   AND    A.SITEID=SITEID_T
   AND    A.FINANCIALPERIOD=FINANCIALPERIOD_T
   AND    A.STORELOC='FLEET'
   AND    SUBSTR(A.ITEMNUM,1,4) IN ('BART','TOLL','NMRC')
   ORDER BY A.ASSETNUM;

   /* CURSOR TO PROCESS VEHICLES THAT ARE INACTIVATED DURING THE MONTH */
   CURSOR INACTIVE_VEH_CURSOR IS
   SELECT A.ASSETNUM, 
          NVL(REPLACE(E.LASTREADING, ','),0) LASTREADING,  -- CHANGED ON 12/18/09
          E.LASTREADINGDATE,
          A.GLACCOUNT, A.LOCATION,
          D.BASE_RATE, D.MILEAGE_COST, D.ISPOOL
   FROM   MAXIMO.ASSET A, MAXIMO.LBL_VEHICLESPEC D, MAXIMO.ASSETMETER E
   WHERE  A.ORGID=D.ORGID
   AND    A.SITEID=D.SITEID
   AND    A.ASSETNUM=D.ASSETNUM
   AND    D.ORGID=E.ORGID
   AND    D.SITEID=E.SITEID
   AND    D.ASSETNUM=E.ASSETNUM
   AND    E.METERNAME='FLEET'    -- MXES 
   AND    D.VEHICLE_CLASS IS NOT NULL
   AND    A.ISRUNNING='0'        -- MXES 
   AND    A.ASSETNUM IN (SELECT Z.ASSETNUM FROM ASSETSTATUS Z
                         WHERE  Z.SITEID=A.SITEID 
                         AND    Z.ASSETNUM=A.ASSETNUM
                         AND    Z.ISRUNNING=0
                         AND    Z.CHANGEDATE BETWEEN START_MONTH_DATE_T 
                         AND TRANSACTION_DT_T);
                         
--   COMMENTED THE FOLLOWING BY PANKAJ ON 5/17/11                             
--   AND    A.ASSETNUM IN (SELECT DISTINCT B.ASSETNUM FROM MAXIMO.ASSETHISTORY B,
--          MAXIMO.WORKORDER C, MAXIMO.WOSTATUS D
--   WHERE  C.ORGID=B.ORGID
--   AND    C.SITEID=B.SITEID
--   AND    C.WONUM=B.WONUM
--   AND    C.ASSETNUM=B.ASSETNUM
--   AND    C.ORGID=D.ORGID
--   AND    C.SITEID=D.SITEID
--   AND    C.WONUM=D.WONUM
--   -- ADDED BY PANKAJ ON 5/16/11
--   AND   (UPPER(C.DESCRIPTION) LIKE ('%REMOVE%') OR 
--          UPPER(C.DESCRIPTION) LIKE ('%DECOMMISION%') ) 
--   AND    B.WONUM=D.WONUM
--   --AND    D.STATUS IN (WAPPR','CAN','RFI')
--   AND    D.STATUS IN ('CLOSE')
--   AND    C.ORGID=ORGID_T
--   AND    C.SITEID=SITEID_T
--   AND    TRUNC(D.CHANGEDATE) BETWEEN START_MONTH_DATE_T AND TRANSACTION_DT_T);

   -- MAXIMO F$M REVISION
   REC_LBL_MOTFEEDDEF    BATCH_MAXIMO.LBL_MOTFEEDDEF%ROWTYPE;
   JOURNAL_ID_T          BATCH_MAXIMO.LBL_PROJ_FEEDERS.JOURNAL_ID%TYPE;
   FISCAL_YEAR_T         NUMBER(4);
   ACCOUNTING_PERIOD_T   NUMBER(2);
   PROJECT_ID_T          LBL_V_COA.LBL_PROJECT_ID%TYPE;
   ACTIVITY_ID_T         LBL_V_COA.LBL_ACTIVITY_ID%TYPE;
   DR_CR_T               BATCH_MAXIMO.LBL_PROJ_FEEDERS.DR_CR%TYPE; 
   RECORD_ID_T           BATCH_MAXIMO.LBL_PROJ_FEEDERS.RECORD_ID%TYPE :=0;
   RETURN_T              VARCHAR2(40);
                 
  
 
  SNAPSHOT_CNT_T  NUMBER(10) :=0;

/*********************************************************************
  MAIN PROGRAM STARTS FROM HERE
 *********************************************************************/
BEGIN

 DBMS_OUTPUT.ENABLE(1000000);

/* MAXIMO F$M REVISION .... NOT REQUIRED TO CHECK INTO DW.PV_PROJECT  
-- FIRSTLY CHECK WHETHER THE SNAPSHOT TITLED DW.PV_PROJECT IS
-- REFRESHED OR NOT

WHILE SNAPSHOT_CNT_T=0

 LOOP

   SELECT COUNT(*) INTO SNAPSHOT_CNT_T FROM DW.PV_PROJECT;
   IF SNAPSHOT_CNT_T != 0 THEN
      EXIT;
   ELSE
     -- SLEEP FOR 2 MINUTES
     DBMS_LOCK.SLEEP(120);
   END IF;

  END LOOP;  */

    -- MXES 
    ORGID_T   :=UPPER('&1');
    SITEID_T  :=UPPER('&2');
   
    IF (ORGID_T IS NULL OR LENGTH(ORGID_T)=0) THEN
       ORGID_T :='LBNL';
    END IF;
     
    IF (SITEID_T IS NULL OR LENGTH(SITEID_T)=0) THEN
       SITEID_T :='FAC';
    END IF;
    

-- CHANGED BY PANKAJ ON 12/13/02 TO TAKE OF ACCELERATED ACCOUNTING CLOSE
-- GET LAST DATE OF THE PRIOR MONTH
-- SELECT TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE,-1))) INTO TRANSACTION_DT_T
-- FROM DUAL;

-- START_MONTH_DATE_T := TRUNC(TO_DATE('01-' || TO_CHAR(TRANSACTION_DT_T,'MON-YY'),'DD-MON-YY'));

-- GET ACCOUNTING PERIOD
-- SELECT A.FINANCIALPERIOD INTO FINANCIALPERIOD_T
-- FROM MAXIMO.FINANCIALPERIODS A
-- WHERE TRANSACTION_DT_T BETWEEN A.PERIODSTART AND A.PERIODEND;

-- ADDED BY PANKAJ ON 12/13/02
SELECT B.FINANCIALPERIOD, TRUNC(B.PERIODSTART),   TRUNC(B.PERIODEND-1),
       TO_NUMBER(SUBSTR(FINANCIALPERIOD,1,4)),  TO_NUMBER(SUBSTR(FINANCIALPERIOD,5,2))
INTO   FINANCIALPERIOD_T, START_MONTH_DATE_T,  TRANSACTION_DT_T,
       FISCAL_YEAR_T, ACCOUNTING_PERIOD_T
FROM   FINANCIALPERIODS B
WHERE  B.FINANCIALPERIOD=(SELECT MIN(C.FINANCIALPERIOD) FROM FINANCIALPERIODS C
WHERE  (NVL(C.CLOSEDBY,' ') NOT LIKE '%MOT%') AND C.ORGID=ORGID_T)
AND    B.ORGID=ORGID_T;

-- PREPARE INVOICE HEADER RECORD

INVOICE_REC_T.INVOICENUM :='FLEET' || '-'|| FINANCIALPERIOD_T;
INVOICE_REC_T.INVOICEDATE := TRANSACTION_DT_T;
INVOICE_REC_T.DESCRIPTION := 'FLEET: MONTHLY RECHARGES FOR-' || FINANCIALPERIOD_T;
INVOICE_REC_T.DOCUMENTTYPE :='INVOICE';
INVOICE_REC_T.STATUS :='APPR';
INVOICE_REC_T.STATUSDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.ENTERDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.ENTERBY :='MAXIMO';
INVOICE_REC_T.CHANGEDATE :=TRANSACTION_DT_T;
INVOICE_REC_T.CHANGEBY :='MAXIMO';
INVOICE_REC_T.HISTORYFLAG :='1';
INVOICE_REC_T.TOTALCOST :=0;
INVOICE_REC_T.FINANCIALPERIOD :=FINANCIALPERIOD_T;


   -- F$M REVISION  
   SELECT * INTO REC_LBL_MOTFEEDDEF    
   FROM BATCH_MAXIMO.LBL_MOTFEEDDEF
   WHERE ORGID=ORGID_T
   AND   SITEID=SITEID_T;

  -- GET JOURNAL ID (COMMON TO ALL THE TRANSACTIONS)
    SELECT BATCH_MAXIMO.LBL_JOURNAL_SEQ.NEXTVAL 
    INTO  JOURNAL_ID_T
    FROM  DUAL;



-- NOW  DELETE ALL THE RECORDS FROM THE TABLES WHERE THE FEEDER TRANSACTIONS
-- WILL BE INSERTED. THIS WILL ENABLE THE USERS TO EXECUTE THIS PROGRAM
-- AGAIN IF THE FEEDER NEEDS TO BE SENT AGAIN TO FMS

DELETE FROM INVOICE
WHERE INVOICEDATE=TRANSACTION_DT_T
AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

DELETE FROM INVOICELINE
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

DELETE FROM INVOICESTATUS
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;


DELETE FROM INVOICECOST
WHERE  INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;


DELETE FROM  BATCH_MAXIMO.LBL_VEHMILEHISTORY
WHERE  READINGDATE=TRANSACTION_DT_T
AND    VMH1='B'
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

-- ADDED FOR F$M PROJECT 
DELETE FROM BATCH_MAXIMO.LBL_PROJ_FEEDERS
WHERE ORGID=ORGID_T
AND   SITEID=SITEID_T
AND   FISCAL_YEAR=FISCAL_YEAR_T
AND   ACCOUNTING_PERIOD=ACCOUNTING_PERIOD_T
AND   PROJ_TRANS_TYPE=REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE
AND   LBL_PROJ_FEED1 IS NULL;  



SELECT DISTINCT COMPANY, CURRENCYCODE
INTO INVOICE_REC_T.VENDOR,INVOICE_REC_T.CURRENCYCODE
FROM MAXIMO.COMPANIES WHERE COMPANY='LBNL'
AND  ORGID=ORGID_T;

-- START INSERTING RECORD IN INVOICE AND INVOICESTATUS TABLES
SELECT COUNT(*) INTO REC_CNT_T
FROM MAXIMO.INVOICESTATUS
WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   STATUS='ENTERED'
AND    ORGID=ORGID_T
AND    SITEID=SITEID_T;

-- RELEASE 5.2 ADDED ORGID, SITEID
IF REC_CNT_T=0 THEN
  INSERT INTO MAXIMO.INVOICESTATUS(INVOICENUM, VENDOR,
               STATUS, CHANGEDATE, CHANGEBY, ORGID, SITEID,
               INVOICESTATUS.INVOICESTATUSID) VALUES
               (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
               'ENTERED',TRANSACTION_DT_T,'MAXIMO', ORGID_T,SITEID_T,
               INVOICESTATUSSEQ.NEXTVAL);   -- MXES 
END IF;

SELECT COUNT(*) INTO REC_CNT_T FROM MAXIMO.INVOICE
WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

IF REC_CNT_T =0 THEN
  INSERT INTO MAXIMO.INVOICE
   (INVOICENUM, DESCRIPTION, VENDOR,
    CURRENCYCODE, DOCUMENTTYPE,
    STATUS, STATUSDATE,
    ENTERDATE, ENTERBY,
    CHANGEDATE, CHANGEBY,
    HISTORYFLAG, TOTALTAX1, TOTALTAX2, TOTALTAX3,TOTALTAX4,TOTALTAX5,
    INCLUSIVE1, INCLUSIVE2, INCLUSIVE3,INCLUSIVE4, INCLUSIVE5,
    TOTALCOST, FINANCIALPERIOD, INVOICEDATE,
    EINVOICE,
    ORGID, SITEID,
    INVOICE.INVOICEID, HASLD,
    LANGCODE,-- REQUIRED FOR RELEASE 4.1.1, MXES 
    GLPOSTDATE   )  VALUES   -- REQUIRED FOR 7.6
    (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.DESCRIPTION, INVOICE_REC_T.VENDOR,
     INVOICE_REC_T.CURRENCYCODE, INVOICE_REC_T.DOCUMENTTYPE,
     INVOICE_REC_T.STATUS, INVOICE_REC_T.STATUSDATE,
     INVOICE_REC_T.ENTERDATE, INVOICE_REC_T.ENTERBY,
     INVOICE_REC_T.CHANGEDATE, INVOICE_REC_T.CHANGEBY,
     '1',0,0,0,0,0,
      '0','0','0','0','0',
      INVOICE_REC_T.TOTALCOST, INVOICE_REC_T.FINANCIALPERIOD, INVOICE_REC_T.INVOICEDATE,
      '0',
      ORGID_T,SITEID_T,
      INVOICESEQ.NEXTVAL,'0',
      'EN', -- MXES 
       INVOICE_REC_T.INVOICEDATE );   -- MAXIMO 7.6
  END IF;

  SELECT COUNT(*) INTO REC_CNT_T FROM MAXIMO.INVOICESTATUS
  WHERE INVOICENUM=INVOICE_REC_T.INVOICENUM
  AND   STATUS='APPR';

  IF REC_CNT_T =0  THEN
     INSERT INTO MAXIMO.INVOICESTATUS(INVOICENUM, VENDOR,
                                      STATUS, CHANGEDATE, CHANGEBY,
                                                      ORGID, SITEID,
                                      INVOICESTATUS.INVOICESTATUSID) 
                                      VALUES
                   (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
                    'APPR',TRANSACTION_DT_T,'MAXIMO',
                             ORGID_T, SITEID_T,
                     INVOICESTATUSSEQ.NEXTVAL);
  END IF;


  -- START INSERTING RECORDS IN INVOICELINE TABLE

  FOR  ALL_VEHICLES_MILE_REC_T IN ALL_VEHICLES_MILE_CUR

   LOOP

     --****************************************
     -- CREATE INVOICE LINE FOR MILEAGE AMOUNT
     --****************************************

     IF (ALL_VEHICLES_MILE_REC_T.LASTREADING > 0)
     THEN

              
        LAST_MONTH_MILES_T  :=0;
        LAST_MONTH_MILES_T  := MAXIMO.LBL_MAXIMO_PKG.GET_LAST_MILEAGE(
                               ORGID_T, SITEID_T  ,   -- MXES 
                               ALL_VEHICLES_MILE_REC_T.ASSETNUM,
                               TRANSACTION_DT_T);
                               
        MILES_IN_MONTH_T :=(ALL_VEHICLES_MILE_REC_T.LASTREADING -LAST_MONTH_MILES_T);

        -- **************************************************************************
        -- IF ((MILES_IN_MONTH_T > 0) AND (ALL_VEHICLES_MILE_REC_T.MILEAGE_COST > 0))
        -- ALLOW TO HAVE NEGATIVE MILES
        IF ((MILES_IN_MONTH_T != 0) AND (ALL_VEHICLES_MILE_REC_T.MILEAGE_COST != 0))
             THEN
           LINECOST_T := (MILES_IN_MONTH_T * ALL_VEHICLES_MILE_REC_T.MILEAGE_COST);

              DESCRIPTION_T := 'MILEAGE COST: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM;

              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM MAXIMO.INVOICELINE
              WHERE  ORGID=ORGID_T
              AND    SITEID=SITEID_T
              AND    INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND    INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                INVOICEQTY, CONVERSION, INVOICEUNIT,
                INVOICELINE.INVOICELINEID,
                ORGID, SITEID, HASLD, LANGCODE, LINETYPE, TAXEXEMPT) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, ALL_VEHICLES_MILE_REC_T.MILEAGE_COST, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                 MILES_IN_MONTH_T,1, 'MILES',
                 INVOICELINESEQ.NEXTVAL,
                 ORGID_T, SITEID_T,
                 '0','EN','SERVICE',1);

                -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM MAXIMO.INVOICECOST
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                 AND   INVOICELINENUM=INVOICELINENUM_T;
                 
                 PROJECT_DESC_T :=NULL;
                 PROJECT_ID_T   :=NULL;
                 ACTIVITY_ID_T  := NULL;
                                 
                 BEGIN
                   SELECT  A.LBL_PROJECT_ID, A.LBL_ACTIVITY_ID,A.ACCOUNTNAME
                   INTO    PROJECT_ID_T, ACTIVITY_ID_T, PROJECT_DESC_T                                   
                   FROM    MAXIMO.LBL_V_COA A
                   WHERE   A.ORGID=ORGID_T
                   AND     A.GLACCOUNT=ALL_VEHICLES_MILE_REC_T.GLACCOUNT
                   AND     A.ACTIVE=1;
                   
                 EXCEPTION WHEN OTHERS THEN              
                    NULL;
                 END;
                                    
                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                 -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS
                 -- NOT USED FOR F$M 
                 -- PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(ALL_VEHICLES_MILE_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    --GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    GLDEBITACCT_T := ALL_VEHICLES_MILE_REC_T.GLACCOUNT; -- FOR F$M 
                    PROJECT_ID_T  := REC_LBL_MOTFEEDDEF.DROP_PROJ_ID;
                    ACTIVITY_ID_T := REC_LBL_MOTFEEDDEF.DROP_ACT_ID;
                                       
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=ALL_VEHICLES_MILE_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;

                 IF REC_CNT_T = 0 THEN
                    INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                    UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                    ICT1, ORGID, SITEID, ENTEREDASTASK,
                    INVOICECOST.INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, ALL_VEHICLES_MILE_REC_T.ASSETNUM,
                     ALL_VEHICLES_MILE_REC_T.MILEAGE_COST, LINECOST_T, 100, INVOICELINENUM_T,
                     '0',ALL_VEHICLES_MILE_REC_T.LOCATION, MILES_IN_MONTH_T,
                      ICT1_T, ORGID_T,SITEID_T,'0',
                     INVOICECOSTSEQ.NEXTVAL);
                 END IF;
                 
           --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF (LINECOST_T >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
           
           RECORD_ID_T := RECORD_ID_T + 1;           
           
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_MOTFEEDDEF.ACCOUNT, ' ', 'RECHARGE',
           REC_LBL_MOTFEEDDEF.RESOURCE_TYPE, REC_LBL_MOTFEEDDEF.RESOURCE_CATEG,
           SUBSTR(('MILEAGE: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );
           
          -- OFFSETTING ENTRY
          IF (LINECOST_T >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
          
          RECORD_ID_T := RECORD_ID_T + 1;  
                     
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE,FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           REC_LBL_MOTFEEDDEF.OFF_PROJ_ID,
           REC_LBL_MOTFEEDDEF.OFF_ACT_ID,
           REC_LBL_MOTFEEDDEF.OFFSET_ACCOUNT, ' ', 'RECHARGE-OFFSET',
           REC_LBL_MOTFEEDDEF.OFF_RES_TYPE, REC_LBL_MOTFEEDDEF.OFF_RES_CATEG,
           SUBSTR(('MILEAGE: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );                    
              
        END IF;  -- REC_CNT_T =0
        
       END IF;     -- MILES_IN_MONTH_T != 0 AND MILEAGE_COST !=  0

      END IF;     -- LASTREADING > 0

     --*****************************************
     -- CREATE INVOICE LINE FOR BASE RATE AMOUNT
     --******************************************
     IF (ALL_VEHICLES_MILE_REC_T.BASE_RATE > 0)
     THEN
              LINECOST_T :=ALL_VEHICLES_MILE_REC_T.BASE_RATE ;

              DESCRIPTION_T := 'BASE RATE: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM;
              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM MAXIMO.INVOICELINE
              WHERE ORGID=ORGID_T
              AND   SITEID=SITEID_T
              AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND   INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO MAXIMO.INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                INVOICEQTY, CONVERSION, INVOICEUNIT, ORGID, SITEID,
                INVOICELINE.INVOICELINEID,  HASLD, LANGCODE,
                LINETYPE, TAXEXEMPT) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, LINECOST_T, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                 1,1,'BASERATE', ORGID_T, SITEID_T,
                 INVOICELINESEQ.NEXTVAL,'0','EN',
                 'SERVICE',1);

                 -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM MAXIMO.INVOICECOST
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                 AND   INVOICELINENUM=INVOICELINENUM_T;

                 /* NOT USED FOR F$M  
                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                 -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(ALL_VEHICLES_MILE_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=ALL_VEHICLES_MILE_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;  */
                 
                 PROJECT_DESC_T :=NULL;
                 PROJECT_ID_T :=NULL;
                 ACTIVITY_ID_T := NULL;
                                 
                 BEGIN
                   SELECT  A.LBL_PROJECT_ID, A.LBL_ACTIVITY_ID,A.ACCOUNTNAME
                   INTO    PROJECT_ID_T, ACTIVITY_ID_T, PROJECT_DESC_T                                   
                   FROM    MAXIMO.LBL_V_COA A
                   WHERE   A.ORGID=ORGID_T
                   AND     A.GLACCOUNT=ALL_VEHICLES_MILE_REC_T.GLACCOUNT
                   AND     A.ACTIVE=1;
                   
                 EXCEPTION WHEN OTHERS THEN              
                    NULL;
                 END;
                 
                IF PROJECT_DESC_T IS NULL
                 THEN
                    --GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    GLDEBITACCT_T :=ALL_VEHICLES_MILE_REC_T.GLACCOUNT; -- FOR F$M 
                    PROJECT_ID_T  := REC_LBL_MOTFEEDDEF.DROP_PROJ_ID;
                    ACTIVITY_ID_T := REC_LBL_MOTFEEDDEF.DROP_ACT_ID;
                   
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=ALL_VEHICLES_MILE_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;

                 IF REC_CNT_T = 0 THEN
                    INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                    UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                    ICT1, ORGID, SITEID, ENTEREDASTASK,
                     INVOICECOST.INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, ALL_VEHICLES_MILE_REC_T.ASSETNUM,
                     LINECOST_T, LINECOST_T, 0, INVOICELINENUM_T,
                     '0',ALL_VEHICLES_MILE_REC_T.LOCATION, 1,
                     ICT1_T, ORGID_T, SITEID_T, '0',
                     INVOICECOSTSEQ.NEXTVAL);
                 END IF;
                 
           --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF (LINECOST_T >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
                      
           RECORD_ID_T := RECORD_ID_T + 1;  
           
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_MOTFEEDDEF.ACCOUNT, ' ', 'RECHARGE',
           REC_LBL_MOTFEEDDEF.RESOURCE_TYPE, REC_LBL_MOTFEEDDEF.RESOURCE_CATEG,
           SUBSTR(('BASE RATE: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );
           
          -- OFFSETTING ENTRY
          IF (LINECOST_T >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
                     
          RECORD_ID_T := RECORD_ID_T + 1;  
          
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE,FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           REC_LBL_MOTFEEDDEF.OFF_PROJ_ID,
           REC_LBL_MOTFEEDDEF.OFF_ACT_ID,
           REC_LBL_MOTFEEDDEF.OFFSET_ACCOUNT, ' ', 'RECHARGE-OFFSET',
           REC_LBL_MOTFEEDDEF.OFF_RES_TYPE, REC_LBL_MOTFEEDDEF.OFF_RES_CATEG,
           SUBSTR(('BASE RATE: ' || ALL_VEHICLES_MILE_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );                    

        END IF;  -- REC_CNT_T =0

       END IF;     -- BASE_RATE >  0

      -- INSERT RECORD INTO BATCH_MAXIMO.LBL_VEHMILEHISTORY TABLE


      SELECT COUNT(*) INTO REC_CNT_T
      FROM   BATCH_MAXIMO.LBL_VEHMILEHISTORY
      WHERE  ORGID=ORGID_T
      AND    SITEID=SITEID_T
      AND    ASSETNUM=ALL_VEHICLES_MILE_REC_T.ASSETNUM
      AND    TRUNC(READINGDATE)=TRANSACTION_DT_T
      AND    VMH1='B';



      IF REC_CNT_T =0
      THEN
         INSERT INTO BATCH_MAXIMO.LBL_VEHMILEHISTORY(ASSETNUM, READINGDATE,
                                                         LASTREADING,VMH1,
                                                                         ORGID, SITEID)
          VALUES (ALL_VEHICLES_MILE_REC_T.ASSETNUM,TRANSACTION_DT_T,
                      NVL(ALL_VEHICLES_MILE_REC_T.LASTREADING,0) ,'B',    -- MXES 
                          ORGID_T, SITEID_T);
       END IF;


  END LOOP;

   --
   -- PROCESS ALL VEHICLES THOSE ARE INACTIVATED DURING THE MONTH
   --

   FOR INACTIVE_VEH_REC_T IN INACTIVE_VEH_CURSOR

    LOOP

        -- GET MILEAGE COST OF THE INACTIVED VEHICLE
        
        LAST_MONTH_MILES_T  :=0;
        LAST_MONTH_MILES_T  := MAXIMO.LBL_MAXIMO_PKG.GET_LAST_MILEAGE(
                               ORGID_T, SITEID_T,
                               INACTIVE_VEH_REC_T.ASSETNUM,
                               TRANSACTION_DT_T);
        MILES_IN_MONTH_T :=(INACTIVE_VEH_REC_T.LASTREADING - LAST_MONTH_MILES_T);

        IF ((MILES_IN_MONTH_T != 0) AND (INACTIVE_VEH_REC_T.MILEAGE_COST != 0))
             THEN
           LINECOST_T := (MILES_IN_MONTH_T * INACTIVE_VEH_REC_T.MILEAGE_COST);

              DESCRIPTION_T := 'MILEAGE COST: ' || INACTIVE_VEH_REC_T.ASSETNUM;

              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM MAXIMO.INVOICELINE
              WHERE ORGID=ORGID_T
              AND   SITEID=SITEID_T
              AND INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                INVOICEQTY, CONVERSION, INVOICEUNIT,
                ORGID, SITEID, INVOICELINE.INVOICELINEID,
                 HASLD, LANGCODE, LINETYPE, TAXEXEMPT) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, INACTIVE_VEH_REC_T.MILEAGE_COST, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                 MILES_IN_MONTH_T,1, 'MILES',
                 ORGID_T, SITEID_T, INVOICELINESEQ.NEXTVAL,
                 '0','EN','SERVICE',1);

                -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM MAXIMO.INVOICECOST
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                 AND   INVOICELINENUM=INVOICELINENUM_T;

                 /* NOT USED FOR F$M 
                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                 -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(INACTIVE_VEH_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;  */
                 
                 PROJECT_DESC_T := NULL;
                 PROJECT_ID_T   := NULL;
                 ACTIVITY_ID_T  := NULL;

                 BEGIN
                   SELECT  A.LBL_PROJECT_ID, A.LBL_ACTIVITY_ID,A.ACCOUNTNAME
                   INTO    PROJECT_ID_T, ACTIVITY_ID_T, PROJECT_DESC_T                                   
                   FROM    MAXIMO.LBL_V_COA A
                   WHERE   A.ORGID=ORGID_T
                   AND     A.GLACCOUNT=INACTIVE_VEH_REC_T.GLACCOUNT
                   AND     A.ACTIVE=1;
                   
                 EXCEPTION WHEN OTHERS THEN              
                    NULL;
                 END;
                 
                IF PROJECT_DESC_T IS NULL
                 THEN
                    --GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT; -- FOR F$M 
                    PROJECT_ID_T  := REC_LBL_MOTFEEDDEF.DROP_PROJ_ID;
                    ACTIVITY_ID_T := REC_LBL_MOTFEEDDEF.DROP_ACT_ID;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;


                 IF REC_CNT_T = 0 THEN
                    INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                    UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                    ICT1, ORGID, SITEID, ENTEREDASTASK,
                    INVOICECOST.INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, INACTIVE_VEH_REC_T.ASSETNUM,
                     INACTIVE_VEH_REC_T.MILEAGE_COST, LINECOST_T, 0, INVOICELINENUM_T,
                     '0',INACTIVE_VEH_REC_T.LOCATION, MILES_IN_MONTH_T,
                     ICT1_T, ORGID_T,SITEID_T, '0',
                     INVOICECOSTSEQ.NEXTVAL);
                 END IF;
                 
           --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF (LINECOST_T >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
           
         RECORD_ID_T := RECORD_ID_T + 1;  
         
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_MOTFEEDDEF.ACCOUNT, ' ', 'RECHARGE',
           REC_LBL_MOTFEEDDEF.RESOURCE_TYPE, REC_LBL_MOTFEEDDEF.RESOURCE_CATEG,
           SUBSTR(('MILEAGE: ' || INACTIVE_VEH_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );
           
          -- OFFSETTING ENTRY
          IF (LINECOST_T >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
          
          RECORD_ID_T := RECORD_ID_T + 1;             
          
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE,FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           REC_LBL_MOTFEEDDEF.OFF_PROJ_ID,
           REC_LBL_MOTFEEDDEF.OFF_ACT_ID,
           REC_LBL_MOTFEEDDEF.OFFSET_ACCOUNT, ' ', 'RECHARGE-OFFSET',
           REC_LBL_MOTFEEDDEF.OFF_RES_TYPE, REC_LBL_MOTFEEDDEF.OFF_RES_CATEG,
           SUBSTR(('MILEAGE: ' || INACTIVE_VEH_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );                    
                 
        END IF;  -- REC_CNT_T =0
 
     END IF;  -- ((MILES_IN_MONTH_T != 0)

     --****************************************************************
     -- CREATE INVOICE LINE FOR BASE RATE AMOUNT FOR INACTIVE VEHICLES
     --****************************************************************
     IF (INACTIVE_VEH_REC_T.BASE_RATE > 0)
        THEN
           LINECOST_T :=INACTIVE_VEH_REC_T.BASE_RATE ;

              DESCRIPTION_T := 'BASE RATE: ' || INACTIVE_VEH_REC_T.ASSETNUM;
              INVOICELINENUM_T := INVOICELINENUM_T  + 1;

              SELECT COUNT(*) INTO REC_CNT_T
              FROM MAXIMO.INVOICELINE
              WHERE ORGID=ORGID_T
              AND   SITEID=SITEID_T
              AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
              AND   INVOICELINENUM=INVOICELINENUM_T;

              IF REC_CNT_T = 0 THEN

               INSERT INTO MAXIMO.INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
                DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
                ENTERBY, ENTERDATE, LOADEDCOST, PRORATED,
                PRORATECOST, PRORATESERVICE,
                INVOICEQTY, CONVERSION, INVOICEUNIT,
                 ORGID, SITEID, INVOICELINE.INVOICELINEID,
                 HASLD, LANGCODE, LINETYPE, TAXEXEMPT) VALUES
                (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                 DESCRIPTION_T, LINECOST_T, LINECOST_T,'0',0,0,0,0,0,
                 INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, LINECOST_T,'0',
                 0,'0',
                 1,1,'BASERATE',
                 ORGID_T,SITEID_T, INVOICELINESEQ.NEXTVAL,
                 '0','EN','SERVICE',1);

                 -- INSERT INTO INVOICECOST TABLE
                 SELECT COUNT(*) INTO REC_CNT_T
                 FROM MAXIMO.INVOICECOST
                 WHERE ORGID=ORGID_T
                 AND   SITEID=SITEID_T
                 AND   INVOICENUM=INVOICE_REC_T.INVOICENUM
                 AND   INVOICELINENUM=INVOICELINENUM_T;

                  /* NOT USED FOR F$M 
                 -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
                 -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS
                     
                 PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(INACTIVE_VEH_REC_T.GLACCOUNT);

                 IF PROJECT_DESC_T IS NULL
                 THEN
                    GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;  */
             
                PROJECT_DESC_T := NULL;
                PROJECT_ID_T :=NULL;
                ACTIVITY_ID_T := NULL;

                BEGIN
                   SELECT  A.LBL_PROJECT_ID, A.LBL_ACTIVITY_ID,A.ACCOUNTNAME
                   INTO    PROJECT_ID_T, ACTIVITY_ID_T, PROJECT_DESC_T                                   
                   FROM    MAXIMO.LBL_V_COA A
                   WHERE   A.ORGID=ORGID_T
                   AND     A.GLACCOUNT=INACTIVE_VEH_REC_T.GLACCOUNT
                   AND     A.ACTIVE=1;
                   
                 EXCEPTION WHEN OTHERS THEN              
                    NULL;
                 END;
                 
                IF PROJECT_DESC_T IS NULL
                 THEN
                    --GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT; -- FOR F$M 
                    PROJECT_ID_T  := REC_LBL_MOTFEEDDEF.DROP_PROJ_ID;
                    ACTIVITY_ID_T := REC_LBL_MOTFEEDDEF.DROP_ACT_ID;
                   
                    ICT1_T :='1';
                 ELSE
                    GLDEBITACCT_T :=INACTIVE_VEH_REC_T.GLACCOUNT;
                    ICT1_T := NULL;
                 END IF;



                 IF REC_CNT_T = 0 THEN
                    INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
                    GLDEBITACCT, ASSETNUM,
                    UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
                    CHARGESTORE, LOCATION, QUANTITY,
                    ICT1, ORGID, SITEID, ENTEREDASTASK, INVOICECOST.INVOICECOSTID) VALUES
                    (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
                     GLDEBITACCT_T, INACTIVE_VEH_REC_T.ASSETNUM,
                     LINECOST_T, LINECOST_T, 0, INVOICELINENUM_T,
                     '0',INACTIVE_VEH_REC_T.LOCATION, 1,
                     ICT1_T, ORGID_T,SITEID_T, '0', INVOICECOSTSEQ.NEXTVAL);
                 END IF;
                 
           --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF (LINECOST_T >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
                      
           RECORD_ID_T := RECORD_ID_T + 1;  
           
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_MOTFEEDDEF.ACCOUNT, ' ', 'RECHARGE',
           REC_LBL_MOTFEEDDEF.RESOURCE_TYPE, REC_LBL_MOTFEEDDEF.RESOURCE_CATEG,
           SUBSTR(('BASE RATE: ' || INACTIVE_VEH_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE           
           );
           
          -- OFFSETTING ENTRY
          IF (LINECOST_T >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
          
          RECORD_ID_T := RECORD_ID_T + 1;  
                     
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE,FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           REC_LBL_MOTFEEDDEF.OFF_PROJ_ID,
           REC_LBL_MOTFEEDDEF.OFF_ACT_ID,
           REC_LBL_MOTFEEDDEF.OFFSET_ACCOUNT, ' ', 'RECHARGE-OFFSET',
           REC_LBL_MOTFEEDDEF.OFF_RES_TYPE, REC_LBL_MOTFEEDDEF.OFF_RES_CATEG,
           SUBSTR(('BASE RATE: ' || INACTIVE_VEH_REC_T.ASSETNUM),1,30) , 'EA', 
           DR_CR_T,
           ABS(LINECOST_T),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );                  
           
        END IF;  -- REC_CNT_T =0

       END IF;     -- BASE_RATE >  0

     -- INSERT INACTIVE VEHICLE RECORD INTO BATCH_MAXIMO.LBL_VEHMILEHISTORY TABLE

      SELECT COUNT(*) INTO REC_CNT_T
      FROM   BATCH_MAXIMO.LBL_VEHMILEHISTORY
      WHERE  ORGID=ORGID_T
      AND    SITEID=SITEID_T
      AND    ASSETNUM=INACTIVE_VEH_REC_T.ASSETNUM
      AND    TRUNC(READINGDATE)=TRANSACTION_DT_T
      AND    VMH1='B';

      IF REC_CNT_T =0
      THEN
         INSERT INTO BATCH_MAXIMO.LBL_VEHMILEHISTORY(ASSETNUM, READINGDATE,
                                                         LASTREADING,VMH1,
                                                                         ORGID, SITEID)
          VALUES (INACTIVE_VEH_REC_T.ASSETNUM,TRANSACTION_DT_T,
                      INACTIVE_VEH_REC_T.LASTREADING, 'B',
                          ORGID_T, SITEID_T);
       END IF;

  END LOOP;

  -- START READING MATUSETRANS TABLE FOR BART TICKETS AND TOLL PASSES

  FOR MATUSETRANS_REC_T IN MATUSETRANS_CUR

    LOOP

      IF (MATUSETRANS_REC_T.LINECOST != 0) THEN

      INVOICELINENUM_T := INVOICELINENUM_T  + 1;

      SELECT COUNT(*) INTO REC_CNT_T
      FROM MAXIMO.INVOICELINE
      WHERE  ORGID=ORGID_T
      AND    SITEID=SITEID_T
      AND    INVOICENUM=INVOICE_REC_T.INVOICENUM 
      AND    INVOICELINENUM=INVOICELINENUM_T;

      IF REC_CNT_T = 0 THEN

         IF MATUSETRANS_REC_T.ASSETNUM IS NOT NULL
         THEN
           DESCRIPTION_T :=RTRIM(MATUSETRANS_REC_T.ITEMNUM) || '-' || MATUSETRANS_REC_T.ASSETNUM;
         ELSE
           DESCRIPTION_T :=RTRIM(MATUSETRANS_REC_T.ITEMNUM);
         END IF;

         INSERT INTO INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
         DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
         ENTERBY, ENTERDATE, LOADEDCOST, PRORATED,
         PRORATECOST, PRORATESERVICE,
         INVOICEQTY, CONVERSION, INVOICEUNIT,
         ORGID, SITEID,
         INVOICELINE.INVOICELINEID,
          HASLD, LANGCODE, LINETYPE,TAXEXEMPT) VALUES
         (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
          DESCRIPTION_T, MATUSETRANS_REC_T.UNITCOST, MATUSETRANS_REC_T.LINECOST,'0',0,0,0,0,0,
          INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, MATUSETRANS_REC_T.LINECOST,'0',
          0,'0',
          MATUSETRANS_REC_T.QUANTITY, 1, ' ',
          ORGID_T, SITEID_T, INVOICELINESEQ.NEXTVAL,
          '9','EN','SERVICE',1 );

          /*
          -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
          -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

          PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(MATUSETRANS_REC_T.GLDEBITACCT);

          IF PROJECT_DESC_T IS NULL
          THEN
              GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
              ICT1_T :='1';
          ELSE
              GLDEBITACCT_T :=MATUSETRANS_REC_T.GLDEBITACCT;
              ICT1_T := NULL;
          END IF; */
          
          PROJECT_DESC_T := NULL;
          PROJECT_ID_T :=NULL;
          ACTIVITY_ID_T := NULL;
          
          BEGIN
            SELECT  A.LBL_PROJECT_ID, A.LBL_ACTIVITY_ID,A.ACCOUNTNAME
            INTO    PROJECT_ID_T, ACTIVITY_ID_T, PROJECT_DESC_T                                   
            FROM    MAXIMO.LBL_V_COA A
            WHERE   A.ORGID=ORGID_T
            AND     A.GLACCOUNT=MATUSETRANS_REC_T.GLDEBITACCT
            AND     A.ACTIVE=1;
                   
           EXCEPTION WHEN OTHERS THEN              
              NULL;
           END;
                 
          IF PROJECT_DESC_T IS NULL
            THEN
               --GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
               GLDEBITACCT_T :=MATUSETRANS_REC_T.GLDEBITACCT; -- FOR F$M 
               PROJECT_ID_T  := REC_LBL_MOTFEEDDEF.DROP_PROJ_ID;
               ACTIVITY_ID_T := REC_LBL_MOTFEEDDEF.DROP_ACT_ID;
               ICT1_T :='1';
             ELSE
                GLDEBITACCT_T :=MATUSETRANS_REC_T.GLDEBITACCT;
                ICT1_T := NULL;
          END IF;
          

         -- INSERT INTO INVOICECOST TABLE
         SELECT COUNT(*) INTO REC_CNT_T
         FROM MAXIMO.INVOICECOST
         WHERE  ORGID=ORGID_T
         AND    SITEID=SITEID_T         
         AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
         AND    INVOICELINENUM=INVOICELINENUM_T;

         IF REC_CNT_T = 0 THEN
           INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
           GLDEBITACCT, ASSETNUM,
           UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
           CHARGESTORE, LOCATION, QUANTITY,
           ICT1, ORGID, SITEID, ENTEREDASTASK,
           INVOICECOST.INVOICECOSTID) VALUES
           (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
            GLDEBITACCT_T, MATUSETRANS_REC_T.ASSETNUM,
            MATUSETRANS_REC_T.UNITCOST, MATUSETRANS_REC_T.LINECOST, 0, INVOICELINENUM_T,
           '0',MATUSETRANS_REC_T.LOCATION, MATUSETRANS_REC_T.QUANTITY,
           ICT1_T, ORGID_T, SITEID_T, '0',
           INVOICECOSTSEQ.NEXTVAL);
         END IF;
         
          --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF ( MATUSETRANS_REC_T.LINECOST >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
                      
           RECORD_ID_T := RECORD_ID_T + 1;  
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_MOTFEEDDEF.ACCOUNT, ' ', 'RECHARGE',
           REC_LBL_MOTFEEDDEF.RESOURCE_TYPE, REC_LBL_MOTFEEDDEF.RESOURCE_CATEG,
           DESCRIPTION_T, 'EA', 
           DR_CR_T,
           ABS(MATUSETRANS_REC_T.LINECOST),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           
           );
           
          -- OFFSETTING ENTRY
          IF ( MATUSETRANS_REC_T.LINECOST >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
                     
          RECORD_ID_T := RECORD_ID_T + 1;  
          
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE,FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           REC_LBL_MOTFEEDDEF.OFF_PROJ_ID,
           REC_LBL_MOTFEEDDEF.OFF_ACT_ID,
           REC_LBL_MOTFEEDDEF.OFFSET_ACCOUNT, ' ', 'RECHARGE-OFFSET',
           REC_LBL_MOTFEEDDEF.OFF_RES_TYPE, REC_LBL_MOTFEEDDEF.OFF_RES_CATEG,
           DESCRIPTION_T , 'EA', 
           DR_CR_T,
           ABS( MATUSETRANS_REC_T.LINECOST),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );                  

       END IF;  -- REC_CNT_T =0

      END IF;   -- LINECOST != 0

  END LOOP;

  -- START READING TOOLTRANS TABLE FOR POOL MILEAGES AND USAGES

  FOR TOOLTRANS_REC_T IN TOOLTRANS_CUR

    LOOP

     IF (TOOLTRANS_REC_T.LINECOST != 0) THEN

      INVOICELINENUM_T := INVOICELINENUM_T  + 1;

      SELECT COUNT(*) INTO REC_CNT_T
      FROM MAXIMO.INVOICELINE
      WHERE ORGID=ORGID_T
      AND   SITEID=SITEID_T
      AND   INVOICENUM=INVOICE_REC_T.INVOICENUM 
      AND   INVOICELINENUM=INVOICELINENUM_T;

      IF REC_CNT_T = 0 THEN

         IF TOOLTRANS_REC_T.ITEMNUM='POOLMILE' THEN
           DESCRIPTION_T :='POOL MILEAGE: ' || TOOLTRANS_REC_T.ASSETNUM;
           TOOLUNIT_T := 'MILES';
         END IF;

         IF TOOLTRANS_REC_T.ITEMNUM='POOLUSG' THEN
           DESCRIPTION_T :='POOL USAGE: ' || TOOLTRANS_REC_T.ASSETNUM;
           TOOLUNIT_T :='USAGES';
         END IF;

         INSERT INTO MAXIMO.INVOICELINE (INVOICENUM, VENDOR, INVOICELINENUM,
         DESCRIPTION, UNITCOST, LINECOST, RECEIPTREQD, TAX1, TAX2, TAX3, TAX4, TAX5,
         ENTERBY, ENTERDATE,  LOADEDCOST, PRORATED,
         PRORATECOST, PRORATESERVICE,
         INVOICEQTY, CONVERSION, INVOICEUNIT,
         ORGID, SITEID,
         INVOICELINE.INVOICELINEID,
          HASLD, LANGCODE, LINETYPE, TAXEXEMPT) VALUES
         (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
          DESCRIPTION_T, TOOLTRANS_REC_T.TOOLRATE, TOOLTRANS_REC_T.LINECOST,'0',0,0,0,0,0,
          INVOICE_REC_T.ENTERBY,INVOICE_REC_T.INVOICEDATE, TOOLTRANS_REC_T.LINECOST,'0',
          0,'0',
          TOOLTRANS_REC_T.TOOLQTY,1,TOOLUNIT_T,
          ORGID_T, SITEID_T, INVOICELINESEQ.NEXTVAL,
          '0','EN','SERVICE',1);
          /*
          -- CHECK VALIDITY OF GLACCOUNT, IF NOT VALID THEN,
          -- RESET TO FLEET'S DEFAULT GLACCOUNT FOR THAT TRANS

          PROJECT_DESC_T := MAXIMO.LBL_MAXIMO_PKG.GET_PROJECT_NAME(TOOLTRANS_REC_T.GLDEBITACCT);

          IF PROJECT_DESC_T IS NULL
          THEN
              GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
              ICT1_T :='1';
          ELSE
              GLDEBITACCT_T :=TOOLTRANS_REC_T.GLDEBITACCT;
              ICT1_T := NULL;
          END IF; */

          PROJECT_DESC_T := NULL;
          PROJECT_ID_T :=NULL;
          ACTIVITY_ID_T := NULL;
          
          BEGIN
            SELECT  A.LBL_PROJECT_ID, A.LBL_ACTIVITY_ID,A.ACCOUNTNAME
            INTO    PROJECT_ID_T, ACTIVITY_ID_T, PROJECT_DESC_T                                   
            FROM    MAXIMO.LBL_V_COA A
            WHERE   A.ORGID=ORGID_T
            AND     A.GLACCOUNT=TOOLTRANS_REC_T.GLDEBITACCT
            AND     A.ACTIVE=1;
                   
           EXCEPTION WHEN OTHERS THEN              
              NULL;
           END;
                 
          IF PROJECT_DESC_T IS NULL
            THEN
               --GLDEBITACCT_T := DEFAULT_GLACCOUNT_T;
               GLDEBITACCT_T :=TOOLTRANS_REC_T.GLDEBITACCT; -- FOR F$M 
               PROJECT_ID_T  := REC_LBL_MOTFEEDDEF.DROP_PROJ_ID;
               ACTIVITY_ID_T := REC_LBL_MOTFEEDDEF.DROP_ACT_ID;
               ICT1_T :='1';
             ELSE
                GLDEBITACCT_T :=TOOLTRANS_REC_T.GLDEBITACCT;
                ICT1_T := NULL;
          END IF;
          

         -- INSERT INTO INVOICECOST TABLE
         SELECT COUNT(*) INTO REC_CNT_T
         FROM MAXIMO.INVOICECOST
         WHERE  ORGID=ORGID_T
         AND    SITEID=SITEID_T
         AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
         AND    INVOICELINENUM=INVOICELINENUM_T;

         IF REC_CNT_T = 0 THEN
           INSERT INTO MAXIMO.INVOICECOST (INVOICENUM, VENDOR, INVOICELINENUM,
           GLDEBITACCT, ASSETNUM,
           UNITCOST, LINECOST, PERCENTAGE, COSTLINENUM,
           CHARGESTORE, LOCATION, QUANTITY,
           ICT1, ORGID, SITEID, ENTEREDASTASK,
           INVOICECOST.INVOICECOSTID) VALUES
           (INVOICE_REC_T.INVOICENUM,INVOICE_REC_T.VENDOR,INVOICELINENUM_T,
            GLDEBITACCT_T, TOOLTRANS_REC_T.ASSETNUM,
            TOOLTRANS_REC_T.TOOLRATE, TOOLTRANS_REC_T.LINECOST, 0, INVOICELINENUM_T,
             '0',TOOLTRANS_REC_T.LOCATION, TOOLTRANS_REC_T.TOOLQTY,
             ICT1_T, ORGID_T, SITEID_T,'0',
             INVOICECOSTSEQ.NEXTVAL);
                 
         END IF;
         
          --***************
           -- F$M REVISION 
           --***************
           -- INSERT INTO BATCH_MAXIMO.LBL_PROJ_FEEDRES TABLE
           
           -- REGULAR ENTRY    
           IF ( TOOLTRANS_REC_T.LINECOST >0) THEN
            DR_CR_T :='DR';
           ELSE
            DR_CR_T :='CR';
           END IF;
           
           RECORD_ID_T := RECORD_ID_T + 1;             
           
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE, FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ',
           PROJECT_ID_T, ACTIVITY_ID_T, 
           REC_LBL_MOTFEEDDEF.ACCOUNT, ' ', 'RECHARGE',
           REC_LBL_MOTFEEDDEF.RESOURCE_TYPE, REC_LBL_MOTFEEDDEF.RESOURCE_CATEG,
           DESCRIPTION_T, 'EA', 
           DR_CR_T,
           ABS( TOOLTRANS_REC_T.LINECOST),
           NVL(ICT1_T,0),-- INACTIVE 
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE           
           );
           
          -- OFFSETTING ENTRY
          IF ( TOOLTRANS_REC_T.LINECOST >0) THEN
            DR_CR_T :='CR';
          ELSE
            DR_CR_T :='DR';
          END IF;
                     
          RECORD_ID_T := RECORD_ID_T + 1;  
          
         RETURN_T :=MAXIMO.LBL_MXPSIFACE_PKG.INSERT_LBL_PROJ_FEEDERS(ORGID_T, 
           SITEID_T, REC_LBL_MOTFEEDDEF.PROJ_TRANS_TYPE,FISCAL_YEAR_T,
           ACCOUNTING_PERIOD_T, JOURNAL_ID_T, RECORD_ID_T, 
           INVOICE_REC_T.INVOICEDATE, 'PROJ-OFF',
           REC_LBL_MOTFEEDDEF.OFF_PROJ_ID,
           REC_LBL_MOTFEEDDEF.OFF_ACT_ID,
           REC_LBL_MOTFEEDDEF.OFFSET_ACCOUNT, ' ', 'RECHARGE-OFFSET',
           REC_LBL_MOTFEEDDEF.OFF_RES_TYPE, REC_LBL_MOTFEEDDEF.OFF_RES_CATEG,
           DESCRIPTION_T , 'EA', 
           DR_CR_T,
           ABS( TOOLTRANS_REC_T.LINECOST),
           NVL(ICT1_T,0),-- INACTIVE (SAME AS REGULAR ENTRY)
           REC_LBL_MOTFEEDDEF.ANALYSIS_TYPE,
           NULL, NULL, -- DEPT, FUND            
           NULL  -- ASSET_TYPE
           );                  
        

       END IF;  -- REC_CNT_T =0

      END IF;   -- LINECOST != 0

  END LOOP;

-- AT END UPDATE INVOICE AMOUNT FROM THE INVOICE LINE RECORDS AND
-- CLOSE THAT INVOICE

SELECT SUM(LINECOST) INTO TOTALCOST_T
FROM MAXIMO.INVOICELINE
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND   INVOICENUM=INVOICE_REC_T.INVOICENUM;

UPDATE MAXIMO.INVOICE
SET TOTALCOST=TOTALCOST_T, STATUS='CLOSE'
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND    INVOICENUM=INVOICE_REC_T.INVOICENUM;

SELECT COUNT(*) INTO REC_CNT_T
FROM MAXIMO.INVOICESTATUS
WHERE  ORGID=ORGID_T
AND    SITEID=SITEID_T
AND    INVOICENUM=INVOICE_REC_T.INVOICENUM
AND    STATUS='CLOSE';

IF REC_CNT_T=0 THEN
  INSERT INTO MAXIMO.INVOICESTATUS(INVOICENUM, VENDOR,
             STATUS, CHANGEDATE, CHANGEBY,
                 ORGID, SITEID, INVOICESTATUS.INVOICESTATUSID) 
             VALUES
         (INVOICE_REC_T.INVOICENUM, INVOICE_REC_T.VENDOR,
         'CLOSE',TRANSACTION_DT_T,'MAXIMO',
             ORGID_T, SITEID_T, INVOICESTATUSSEQ.NEXTVAL);
END IF; 


END;
/

COMMIT;

