 /***************************************************************************
*
* PROGRAM NAME          : BUILD_ITEMSUMMARYU.SQL
*
*
* DESCRIPTION           : THIS PL/SQL SCRIPT INSERTS THE DATA INTO
*                         LBL_ITEMSUMMARY TABLE.
*
*                         NOTES:
*
*                         1. STOREROOM 51 INCLUDED FOR ALL TRANSACTIONS
*                         AS STR03 FEEDER INCLUDED TRANS FOR STOREROOM 51.
*
*  INPUT                : ARGUMENT-1 => ORGID
*                         ARGUMENT-2 => SITEID
*                         ARGUMENT-3 => ALL  - ALL THE ACCOUNTING PERIODS
*                                              INCLUDING THE LAST ONE
*                                    => LAST - ONLY LAST CLOSED ACCOUNTING PERIOD
*
*
* AUTHOR                : PANKAJ BHIDE
*
* DATE WRITTEN          : 20-APR-2004
*
* DATE MODIFIED         :
*
* MODIFICATION HISORTY  : 20-APR-2005 CHANGES MADE TO ACCOMODATE THE STR03
*                         AS PER URF
*
*                         19-JAN-2006 CHANGES MADE TO REFLECT RTVS
*
*                         27-FEB-2006 CHANGED THE WAY HOW PERIOD START AND END
*                                     DATES ARE DERIVED.
*
*                                     ADDED THE CODE TO INCORPORATE ROUNDING
*                                     ERROR ENTRIES.
*
*                         21-NOV-2008 CHANGED THE COLUMN FROM MATRECTRANS.ACTUALDATE
*                                     TO MATRECTRANS.TRANSDATE WHEN SUMMARIZING
*                                     RECEIPTS.
*
*                         23-MAR-2009 CHANGES REQUIRED FOR MXES
*
*                         24-OCT-2015 CHANGES FOR MAXIMO 7.6
*
*                         20-JUN-2016 JIRA EF-3866 ACCOUNT FOR CURBALADJ ENTRIES
********************************************************************************/
WHENEVER SQLERROR EXIT 1 ROLLBACK;

DECLARE

    YEAR_T             BATCH_MAXIMO.LBL_ITEMSUMMARY.YEAR%TYPE;
    PRV_YEAR_T         BATCH_MAXIMO.LBL_ITEMSUMMARY.YEAR%TYPE;
    FISCAL_YEAR_T      BATCH_MAXIMO.LBL_ITEMSUMMARY.YEAR%TYPE;
    ACCOUNTING_PERIOD_T BATCH_MAXIMO.LBL_ITEMSUMMARY.MONTH%TYPE;
    MONTH_T            BATCH_MAXIMO.LBL_ITEMSUMMARY.MONTH%TYPE;
    PRV_MONTH_T        BATCH_MAXIMO.LBL_ITEMSUMMARY.MONTH%TYPE;
    START_DT_T         BATCH_MAXIMO.LBL_INVENTORY_HIST.MTHENDDATE%TYPE;
    YEAR_START_DT_T    BATCH_MAXIMO.LBL_INVENTORY_HIST.MTHENDDATE%TYPE;
    END_DT_T           BATCH_MAXIMO.LBL_INVENTORY_HIST.MTHENDDATE%TYPE;
    T_MTHENDDATE       BATCH_MAXIMO.LBL_INVENTORY_HIST.MTHENDDATE%TYPE;

    REC_CNT_T1         NUMBER(7) :=0;
    REC_CNT_T2         NUMBER(7) :=0;
    TOTALUNITS_T       BATCH_MAXIMO.LBL_ITEMSUMMARY.BEG_TOTALUNITS%TYPE := 0;
    ENDVALUE_T         BATCH_MAXIMO.LBL_ITEMSUMMARY.BEG_TOTALVALUE%TYPE := 0;
    BEG_TOTALUNITS_T   BATCH_MAXIMO.LBL_ITEMSUMMARY.BEG_TOTALUNITS%TYPE := 0;
    BEG_TOTALVALUE_T   BATCH_MAXIMO.LBL_ITEMSUMMARY.BEG_TOTALVALUE%TYPE := 0;

    T_CURBALADJUNITS   BATCH_MAXIMO.LBL_ITEMSUMMARY.curbaladjunits%TYPE :=0;
    T_CURBALADJVALUE   BATCH_MAXIMO.LBL_ITEMSUMMARY.curbaladjvalue%TYPE :=0;

    PRV_ITEMNUM        BATCH_MAXIMO.LBL_ITEMSUMMARY.ITEMNUM%TYPE;
    ISSUEUNITS_T       BATCH_MAXIMO.LBL_ITEMSUMMARY.ISSUEUNITS%TYPE :=0;
    ISSUEVALUE_T       BATCH_MAXIMO.LBL_ITEMSUMMARY.ISSUEVALUE%TYPE :=0;
    RETURNUNITS_T      BATCH_MAXIMO.LBL_ITEMSUMMARY.RETURNUNITS%TYPE :=0;
    RETURNVALUE_T      BATCH_MAXIMO.LBL_ITEMSUMMARY.RETURNVALUE%TYPE :=0;
    OTHER_UNITS_T      BATCH_MAXIMO.LBL_ITEMSUMMARY.OTHERADJUNITS%TYPE  :=0;
    OTHER_VALUE_T      BATCH_MAXIMO.LBL_ITEMSUMMARY.OTHERADJVALUE%TYPE  :=0;
    CALC_UNITS_T       BATCH_MAXIMO.LBL_ITEMSUMMARY.END_TOTALUNITS%TYPE  :=0;
    CALC_VALUE_T       BATCH_MAXIMO.LBL_ITEMSUMMARY.END_TOTALVALUE%TYPE  :=0;
    POS_PPVADJUNITS    BATCH_MAXIMO.LBL_ITEMSUMMARY.PPVADJUNITS%TYPE :=0;
    NEG_PPVADJUNITS    BATCH_MAXIMO.LBL_ITEMSUMMARY.PPVADJUNITS%TYPE :=0;
    POS_PPVADJVALUE    BATCH_MAXIMO.LBL_ITEMSUMMARY.PPVADJVALUE%TYPE :=0;
    NEG_PPVADJVALUE    BATCH_MAXIMO.LBL_ITEMSUMMARY.PPVADJVALUE%TYPE :=0;

    TEMP_T1               VARCHAR2(254);
    LAST_YEAR_PERIOD_T    FINANCIALPERIODS.FINANCIALPERIOD%TYPE;

    ORGID_T               BATCH_MAXIMO.LBL_ITEMSUMMARY.ORGID%TYPE :='LBNL';
    SITEID_T              BATCH_MAXIMO.LBL_ITEMSUMMARY.SITEID%TYPE :='FAC';
    STORELOC_T            MAXIMO.INVTRANS.STORELOC%TYPE;
    LAST_PROCESSING_DATE_T BATCH_MAXIMO.LBL_INVENTORY_HIST.MTHENDDATE%TYPE;
    FINANCIALPERIOD_T     MAXIMO.FINANCIALPERIODS.FINANCIALPERIOD%TYPE;

    CURBAL_T1    INVBALANCES.CURBAL%TYPE;
    PHYSCNT_T1   INVBALANCES.PHYSCNT%TYPE;
    ITEMSETID_T1 INVBALANCES.ITEMSETID%TYPE;

    /* CURSOR TO READ ITEM BALANCES(UNITS),  END DOLLAR VALUE
       FROM LBL_INVBALANCESHIST AND LBL_INVENTORYHIST TABLES  */

    -- ADDED TABLE INVCOST -- MXES

    CURSOR UNITVALUE_CUR IS
    SELECT IB.ITEMNUM ITEMNUM, SUM(IB.CURBAL) TOTALUNITS,
    SUM(((ROUND(IC.AVGCOST,2))*IB.CURBAL))    ENDVALUE
    FROM BATCH_MAXIMO.LBL_INVBALANCES_HIST IB, BATCH_MAXIMO.LBL_INVENTORY_HIST INV,
         BATCH_MAXIMO.LBL_INVCOST_HIST IC
    WHERE IB.ORGID=INV.ORGID
    AND   IB.SITEID=INV.SITEID
    AND   IB.ITEMNUM=INV.ITEMNUM
    AND   IB.LOCATION=INV.LOCATION
    AND   TRUNC(IB.MTHENDDATE)=TRUNC(INV.MTHENDDATE)
    AND   IC.ORGID=INV.ORGID
    AND   IC.SITEID=INV.SITEID
    AND   IC.ITEMNUM=INV.ITEMNUM
    AND   IC.LOCATION=INV.LOCATION
    AND   TRUNC(IC.MTHENDDATE)=TRUNC(INV.MTHENDDATE)
    AND   TRUNC(IB.MTHENDDATE)=END_DT_T
    AND   IB.LOCATION NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   NVL(INV.BINNUM,' ') NOT LIKE 'SEE%'
    AND   IB.ORGID=ORGID_T
    AND   IB.SITEID=SITEID_T
    GROUP BY IB.ITEMNUM
    ORDER BY IB.ITEMNUM;

    /* CURSOR TO READ ITEM RECEIPT UNITS AND VALUE FROM MATRECTRANS TABLE*/

    CURSOR RECEIPT_CUR IS
    SELECT ITEMNUM, SUM(QUANTITY) RECEIPTUNITS,
           SUM(LINECOST) RECEIPTVALUE
    FROM MAXIMO.MATRECTRANS
    -- WHERE TRUNC(ACTUALDATE) BETWEEN START_DT_T AND END_DT_T (CHANGED ON 11/21/08)
    WHERE TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
    AND   TOSTORELOC NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   ISSUETYPE IN ('RECEIPT', 'RETURN')
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    GROUP BY ITEMNUM
    ORDER BY ITEMNUM;


    /* CURSOR TO READ ITEM ISSUE/RETURN UNITS AND VALUE FROM MATUSETRANS TABLE*/

    CURSOR ISSUERETURN_CUR IS
    SELECT ITEMNUM, ISSUETYPE, SUM(ABS(QUANTITY)) QUANTITY,
           SUM(ABS(LINECOST)) LINECOST
    FROM MAXIMO.MATUSETRANS
    WHERE TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
    AND   STORELOC NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    GROUP BY ITEMNUM, ISSUETYPE
    ORDER BY ITEMNUM, ISSUETYPE;

    /* CURSOR TO READ OVERAGE UNITS AND VALUE FROM INVTRANS TABLE*/

    CURSOR OVERAGE_CUR IS
    SELECT ITEMNUM,
    SUM(QUANTITY) QUANTITY,
    SUM(LINECOST) LINECOST
    FROM MAXIMO.INVTRANS
    WHERE TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
    AND (SUBSTR(GLDEBITACCT, 1,4)='1624' OR GLDEBITACCT='151924') -- URF
    AND TRANSTYPE NOT IN ('ROUNDADJ')
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    GROUP BY ITEMNUM
    ORDER BY ITEMNUM;


    /* CURSOR TO READ SHORTAGE UNITS AND VALUE FROM INVTRANS TABLE*/

    CURSOR SHORTAGE_CUR IS
    SELECT ITEMNUM,
    SUM(QUANTITY) QUANTITY,
    SUM(LINECOST) LINECOST
    FROM MAXIMO.INVTRANS
    WHERE TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
    AND (SUBSTR(GLCREDITACCT, 1,4)='1625' OR GLCREDITACCT='151925') -- URF
    AND TRANSTYPE NOT IN ('ROUNDADJ')
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    GROUP BY ITEMNUM
    ORDER BY ITEMNUM;

    /* CURSOR TO READ BLANKET PO RECEIVALS */

    CURSOR BLANKETPO_CUR IS
    SELECT ITEMNUM, SUM(QUANTITY) QUANTITY,
    SUM(LINECOST) LINECOST
    FROM MAXIMO.INVTRANS
    WHERE TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
    AND  SUBSTR(ITEMNUM,1,4) IN ('6810','6830','7600')
    AND  TRANSTYPE = 'CURBALADJ'
    AND  SUBSTR(MEMO,1,3) = 'PO='
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    GROUP BY ITEMNUM
    ORDER BY SUBSTR(ITEMNUM,1,2);

   /* CURSOR FOR GETTING THE UNITS AND VALUES FOR THE PPV ADJUSTMENTS */

    CURSOR PPVADJ_CUR IS
    SELECT ITEMNUM, SUM(QUANTITY) PPVADJUNITS,
    SUM(LINECOST) PPVADJVALUE
    FROM MAXIMO.MATRECTRANS
   -- WHERE TRUNC(ACTUALDATE) BETWEEN START_DT_T AND END_DT_T (CHANGED ON 11/21/08)
    WHERE TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
    AND   NVL(TOSTORELOC,' ') NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
    AND   ISSUETYPE IN ('INVOICE')
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    GROUP BY ITEMNUM
    ORDER BY ITEMNUM;


-- ADDED BY PANKAJ JIRA EF-3866
     CURSOR CURBALADJ_CUR  IS
            SELECT ITEMNUM,
            SUM(QUANTITY) CURBALADJ_QTY,
            SUM(LINECOST) CURBALADJ_VALUE
            FROM  MAXIMO.INVTRANS
            WHERE ORGID=ORGID_T
            AND   SITEID=SITEID_T
            AND   TRANSTYPE='CURBALADJ'
            AND   TRUNC(TRANSDATE) BETWEEN START_DT_T AND END_DT_T
            AND   NVL(STORELOC,' ') NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
            GROUP BY ITEMNUM;

   /* CURSOR TO READ ALL THE MONTH END DATES FROM LBL_INVENTORY_HIST TABLE */

    CURSOR HIST_MTHENDDATE_CUR IS
    SELECT DISTINCT TRUNC(MTHENDDATE) MTHENDDATE
    FROM BATCH_MAXIMO.LBL_INVENTORY_HIST
    WHERE TRUNC(MTHENDDATE) >= LAST_PROCESSING_DATE_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T
    ORDER BY MTHENDDATE;

   /* CURSOR TO READ ALL THE RECORDS (FOR AN ACCOUNTING PERIOD) FROM
      LBL_ITEMSUMMARY TABLE FOR UPDATING THE VALUE OF OTHERADJVALUE
      - FOR ROUNDING ETC. */

    CURSOR LBL_ITEMSUMMARY_CUR IS
    SELECT ITEMNUM,
           BEG_TOTALUNITS,
           BEG_TOTALVALUE,
           RECEIPTUNITS,
           RECEIPTVALUE,
           ISSUEUNITS,
           ISSUEVALUE,
           RETURNUNITS,
           RETURNVALUE,
           SHORTUNITS,
           SHORTVALUE,
           OVERUNITS,
           OVERVALUE,
           BLANKETPOUNITS,
           BLANKETPOVALUE,
           OTHERADJUNITS,
           OTHERADJVALUE,
           PPVADJUNITS,
           PPVADJVALUE,
           END_TOTALUNITS,
           END_TOTALVALUE,
           SITEID,
           ORGID,
           CURBALADJUNITS,
           CURBALADJVALUE
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
        AND   SITEID=SITEID_T
    FOR UPDATE OF OTHERADJUNITS, OTHERADJVALUE;

--***********************************************************
-- PROCEDURE TO GET THE FISCAL YEAR AND THE ACCOUNTING PERIOD
--***********************************************************
PROCEDURE GET_FISCAL_ACC_PERIOD(
YEAR_I         IN BATCH_MAXIMO.LBL_ITEMSUMMARY.YEAR%TYPE,
MONTH_I        IN BATCH_MAXIMO.LBL_ITEMSUMMARY.MONTH%TYPE,
FISCAL_YEAR_O  OUT BATCH_MAXIMO.LBL_ITEMSUMMARY.YEAR%TYPE,
ACCOUNTING_PERIOD_O OUT BATCH_MAXIMO.LBL_ITEMSUMMARY.MONTH%TYPE)
IS

BEGIN

IF MONTH_I IN (10,11,12) THEN
    FISCAL_YEAR_O :=YEAR_I + 1;
ELSE
    FISCAL_YEAR_O :=YEAR_I;
END IF;

IF     MONTH_I=1 THEN
        ACCOUNTING_PERIOD_O :=4;
ELSIF MONTH_I=2 THEN
        ACCOUNTING_PERIOD_O :=5;
ELSIF MONTH_I=3 THEN
        ACCOUNTING_PERIOD_O :=6;
ELSIF MONTH_I=4 THEN
        ACCOUNTING_PERIOD_O :=7;
ELSIF MONTH_I=5 THEN
        ACCOUNTING_PERIOD_O :=8;
ELSIF MONTH_I=6 THEN
        ACCOUNTING_PERIOD_O :=9;
ELSIF MONTH_I=7 THEN
        ACCOUNTING_PERIOD_O :=10;
ELSIF MONTH_I=8 THEN
        ACCOUNTING_PERIOD_O :=11;
ELSIF MONTH_I=9 THEN
        ACCOUNTING_PERIOD_O :=12;
ELSIF MONTH_I=10 THEN
        ACCOUNTING_PERIOD_O :=1;
ELSIF MONTH_I=11 THEN
        ACCOUNTING_PERIOD_O :=2;
ELSIF MONTH_I=12 THEN
        ACCOUNTING_PERIOD_O :=3;
END IF;

END;

/*********************************************************************
  MAIN PROGRAM STARTS FROM HERE
 *********************************************************************/
BEGIN

DBMS_OUTPUT.ENABLE(1000000);

    -- MXES
ORGID_T   :=UPPER('&1');
SITEID_T  :=UPPER('&2');

IF (ORGID_T IS NULL OR LENGTH(ORGID_T)=0) THEN
    ORGID_T :='LBNL';
END IF;

IF (SITEID_T IS NULL OR LENGTH(SITEID_T)=0) THEN
   SITEID_T :='FAC';
END IF;

-- PREPARE THE LAST_PROCESSING_DATE_T DEPENDING UPON THE INPUT
-- PARAMETER (ALL-ALL THE MONTHS TILL THE LAST MONTH, LAST-ONLY THE
-- LAST ACCOUNTING PERIOD)

IF UPPER('&3')='ALL' THEN
     SELECT MIN(MTHENDDATE) INTO LAST_PROCESSING_DATE_T
     FROM  BATCH_MAXIMO.LBL_INVENTORY_HIST
     WHERE ORGID=ORGID_T
     AND   SITEID=SITEID_T;
ELSE
     SELECT TRUNC((PERIODEND-1)) INTO LAST_PROCESSING_DATE_T
     FROM FINANCIALPERIODS
     WHERE FINANCIALPERIOD=(SELECT MIN(FINANCIALPERIOD)
     FROM FINANCIALPERIODS WHERE
     NVL(CLOSEDBY,' ') NOT LIKE '%STG%'
     AND ORGID=ORGID_T)
     AND ORGID=ORGID_T;
END IF;

-- START READING THE DISTINCT MTH END RECORD
--***********
-- OUTER LOOP
--***********

FOR HIST_MTHENDDATE_REC IN HIST_MTHENDDATE_CUR

 LOOP

     -- ADD 1 DAY, BECAUSE IN MAXIMO'S FINANCIALPERIODS TABLE THE
     -- END DATE OF ACCOUNTING PERIOD IS KEPT AS (+1)
     T_MTHENDDATE := HIST_MTHENDDATE_REC.MTHENDDATE + 1;

     -- GET START/END DATES FROM FINANCIALPERIODS TABLE
     BEGIN

       SELECT TRUNC(PERIODSTART), TRUNC((PERIODEND-1)),
       TO_NUMBER(TO_CHAR((PERIODEND-1),'YYYY')),
       TO_NUMBER(TO_CHAR((PERIODEND-1),'MM')),
       FINANCIALPERIOD
       INTO
       START_DT_T,
       END_DT_T,
       YEAR_T,
       MONTH_T,
       FINANCIALPERIOD_T
       FROM   MAXIMO.FINANCIALPERIODS
       WHERE  TRUNC(PERIODEND)=T_MTHENDDATE
       AND    ORGID=ORGID_T;

       YEAR_START_DT_T := TRUNC(LAST_DAY(ADD_MONTHS(END_DT_T, -11)));

      EXCEPTION
        WHEN OTHERS THEN
        -- IF RECORD DOES NOT EXIST IN FINANCIALPERIODS TABLE

       START_DT_T := (ADD_MONTHS(HIST_MTHENDDATE_REC.MTHENDDATE,-1)+ 1);
       END_DT_T := HIST_MTHENDDATE_REC.MTHENDDATE;
       YEAR_T  := TO_NUMBER(TO_CHAR(HIST_MTHENDDATE_REC.MTHENDDATE,'YYYY'));
       MONTH_T := TO_NUMBER(TO_CHAR(HIST_MTHENDDATE_REC.MTHENDDATE,'MM'));
       YEAR_START_DT_T := TRUNC(ADD_MONTHS(START_DT_T,-11));

      END; -- GET START/END DATES FROM FINANCIALPERIODS TABLE

  -- DBMS_OUTPUT.PUT_LINE('PROCESSING: YEAR_T: '     || TO_CHAR(YEAR_T) || ' |' ||  ' MONTH_T: '     || TO_CHAR(MONTH_T));
  -- DBMS_OUTPUT.PUT_LINE('START_DT_T: ' || TO_CHAR(START_DT_T) || ' |' ||' END_DT_T: '   || TO_CHAR(END_DT_T) ||
  -- ' LAST YEAR START_DT: ' || TO_CHAR(YEAR_START_DT_T,'DD-MON-YYYY'));

--=====================================================================
-- FIRSTLY DELETE ALL THE RECORDS FROM LBL_ITEMNUMSUMMARY TABLE FOR THE
-- CURRENT PERIOD
--=====================================================================

DELETE FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
WHERE YEAR=YEAR_T
AND MONTH=MONTH_T
AND ORGID=ORGID_T
AND SITEID=SITEID_T;

-- THESE RECORDS ARE INSERTED IF THERE ARE ANY DIFFERENCES IN ACTUAL INVENTORY
-- BALANCES AND THE CALCULATED BALANCES

DELETE FROM MAXIMO.INVTRANS
WHERE TRANSTYPE IN ('ROUNDADJ')
AND   TRUNC(TRANSDATE)=END_DT_T
AND   ORGID=ORGID_T
AND   SITEID=SITEID_T;

-- GET PREVIOUS MONTH AND YEAR FOR GETTING ITEM BALANCES FOR PRIOR MONTH

IF MONTH_T=1 THEN
   PRV_MONTH_T :=12;
   PRV_YEAR_T  :=YEAR_T -1;
ELSE
   PRV_MONTH_T := MONTH_T - 1;
   PRV_YEAR_T  := YEAR_T;
END IF;

-- GET FISCAL YEAR AND THE ACCOUNTING PERIOD FOR THE GIVEN YEAR AND MONTH
GET_FISCAL_ACC_PERIOD(YEAR_T, MONTH_T, FISCAL_YEAR_T,ACCOUNTING_PERIOD_T);

  --*****************************************************************************
 -- START READING CURSOR FOR ITEM BALANCES(UNITS), END DOLLAR
 -- VALUE AND COUNT  OF STOCK AND NON STOCK ITEM GROUPS FROM LBL_INVBALANCES_HIST
 -- AND LBL_INVENTORY_HIST TABLES
 --******************************************************************************

REC_CNT_T1 :=0;
REC_CNT_T2 :=0;

TOTALUNITS_T := 0;
ENDVALUE_T   := 0;


FOR UNITVALUE_REC_T IN  UNITVALUE_CUR

 LOOP

    REC_CNT_T1 := REC_CNT_T1 + 1;

    IF REC_CNT_T1 = 1 THEN
       PRV_ITEMNUM :=UNITVALUE_REC_T.ITEMNUM;
    END IF;

    IF PRV_ITEMNUM != UNITVALUE_REC_T.ITEMNUM THEN

          -- GET BEGINNING UNITS AND VALUE FOR THIS MONTH
         BEG_TOTALUNITS_T  :=0;
         BEG_TOTALVALUE_T :=0;

         BEGIN
            SELECT NVL(END_TOTALUNITS,0),  NVL(END_TOTALVALUE,0)
            INTO   BEG_TOTALUNITS_T, BEG_TOTALVALUE_T
            FROM   BATCH_MAXIMO.LBL_ITEMSUMMARY
            WHERE  ITEMNUM=PRV_ITEMNUM
            AND    YEAR=PRV_YEAR_T
            AND    MONTH=PRV_MONTH_T
            AND    ORGID=ORGID_T
            AND    SITEID=SITEID_T;
         EXCEPTION
          WHEN OTHERS THEN
            NULL;
         END;

       REC_CNT_T2 :=0;

       SELECT COUNT(*) INTO REC_CNT_T2
       FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
       WHERE ITEMNUM=PRV_ITEMNUM
       AND   YEAR=YEAR_T
       AND   MONTH=MONTH_T
       AND   ORGID=ORGID_T
       AND   SITEID=SITEID_T;

       IF REC_CNT_T2=0  THEN

         INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
          (ITEMNUM, BEG_TOTALUNITS, BEG_TOTALVALUE,
               END_TOTALUNITS,  END_TOTALVALUE,
           YEAR, MONTH,
               FISCAL_YEAR, ACCOUNTING_PERIOD,
           ORGID, SITEID, ITEMGROUP) VALUES
          (PRV_ITEMNUM, BEG_TOTALUNITS_T, BEG_TOTALVALUE_T,
           TOTALUNITS_T,  ENDVALUE_T,
           YEAR_T, MONTH_T,
               FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
           ORGID_T, SITEID_T, SUBSTR(PRV_ITEMNUM,1,2) );
       ELSE
         UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
         SET BEG_TOTALUNITS=BEG_TOTALUNITS_T, BEG_TOTALVALUE=BEG_TOTALVALUE_T,
             END_TOTALUNITS=TOTALUNITS_T, END_TOTALVALUE=ENDVALUE_T
         WHERE ITEMNUM=PRV_ITEMNUM
         AND   YEAR=YEAR_T
         AND   MONTH=MONTH_T
         AND   ORGID=ORGID_T
             AND   SITEID=SITEID_T;
     END IF;  -- IF REC_CNT_T2=0

       TOTALUNITS_T := 0;
       ENDVALUE_T   := 0;
       PRV_ITEMNUM :=UNITVALUE_REC_T.ITEMNUM;

    END IF; -- IF PRV_ITEMNUM != UNITVALUE_REC_T.ITEMNUM

    TOTALUNITS_T := TOTALUNITS_T +  UNITVALUE_REC_T.TOTALUNITS;
    ENDVALUE_T   := ENDVALUE_T   +  UNITVALUE_REC_T.ENDVALUE;

 END LOOP;

 -- AT THE LAST ITEM GROUP
 IF REC_CNT_T1 > 0 THEN

         -- GET BEGINNING UNITS AND VALUE FOR THIS MONTH
         BEG_TOTALUNITS_T  :=0;
         BEG_TOTALVALUE_T :=0;


        BEGIN
            SELECT NVL(END_TOTALUNITS,0),  NVL(END_TOTALVALUE,0)
            INTO   BEG_TOTALUNITS_T, BEG_TOTALVALUE_T
            FROM   BATCH_MAXIMO.LBL_ITEMSUMMARY
            WHERE  ITEMNUM=PRV_ITEMNUM
            AND    YEAR=PRV_YEAR_T
            AND    MONTH=PRV_MONTH_T
            AND    ORGID=ORGID_T
            AND    SITEID=SITEID_T;
         EXCEPTION
           WHEN OTHERS THEN
            NULL;
        END;

       REC_CNT_T2 :=0;
       SELECT COUNT(*) INTO REC_CNT_T2
       FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
       WHERE ITEMNUM=PRV_ITEMNUM
       AND   YEAR=YEAR_T
       AND   MONTH=MONTH_T
       AND   ORGID=ORGID_T
       AND   SITEID=SITEID_T;

       IF REC_CNT_T2=0  THEN

         INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
          (ITEMNUM, BEG_TOTALUNITS, BEG_TOTALVALUE,
               END_TOTALUNITS,  END_TOTALVALUE,
           YEAR, MONTH,
               FISCAL_YEAR, ACCOUNTING_PERIOD,
               ORGID, SITEID, ITEMGROUP) VALUES
          (PRV_ITEMNUM, BEG_TOTALUNITS_T, BEG_TOTALVALUE_T,
           TOTALUNITS_T,  ENDVALUE_T,
           YEAR_T, MONTH_T,
               FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
               ORGID_T, SITEID_T, SUBSTR(PRV_ITEMNUM,1,2) );
       ELSE
         UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
         SET BEG_TOTALUNITS=BEG_TOTALUNITS_T, BEG_TOTALVALUE=BEG_TOTALVALUE_T,
         END_TOTALUNITS=TOTALUNITS_T, END_TOTALVALUE=ENDVALUE_T
         WHERE ITEMNUM=PRV_ITEMNUM
         AND   YEAR=YEAR_T
         AND   MONTH=MONTH_T
         AND   ORGID=ORGID_T
         AND   SITEID=SITEID_T;
      END IF;

 END IF;

-- START PROCESSING ITEM RECORDS FOR RECEIPTS

FOR RECEIPT_REC_T IN  RECEIPT_CUR

 LOOP

    REC_CNT_T2 :=0;

    SELECT COUNT(*) INTO REC_CNT_T2
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE ITEMNUM=RECEIPT_REC_T.ITEMNUM
    AND   YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF REC_CNT_T2 !=0 THEN
        UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
        SET RECEIPTUNITS=RECEIPT_REC_T.RECEIPTUNITS,
            RECEIPTVALUE=RECEIPT_REC_T.RECEIPTVALUE
        WHERE ITEMNUM=RECEIPT_REC_T.ITEMNUM
        AND   YEAR=YEAR_T
        AND   MONTH=MONTH_T
        AND   ORGID=ORGID_T
        AND   SITEID=SITEID_T;
    ELSE
        INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
        (ITEMNUM, BEG_TOTALUNITS, BEG_TOTALVALUE,
         RECEIPTUNITS, RECEIPTVALUE,
         END_TOTALUNITS, END_TOTALVALUE,
         YEAR, MONTH,
         FISCAL_YEAR, ACCOUNTING_PERIOD,
             ORGID, SITEID, ITEMGROUP) VALUES
         (RECEIPT_REC_T.ITEMNUM, 0, 0,
          RECEIPT_REC_T.RECEIPTUNITS, RECEIPT_REC_T.RECEIPTVALUE,
          0, 0,
          YEAR_T, MONTH_T,
          FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
          ORGID_T, SITEID_T, SUBSTR(RECEIPT_REC_T.ITEMNUM,1,2)  );
     END IF;

END LOOP;

-- START PROCESSING ITEM RECORDS FOR ISSUES AND RETURNS

REC_CNT_T1 :=0;
ISSUEUNITS_T :=0;
ISSUEVALUE_T :=0;
RETURNUNITS_T :=0;
RETURNVALUE_T   :=0 ;

FOR ISSUERETURN_REC_T  IN  ISSUERETURN_CUR

 LOOP

    REC_CNT_T1 := REC_CNT_T1 + 1;

    IF REC_CNT_T1 = 1 THEN
       PRV_ITEMNUM :=ISSUERETURN_REC_T.ITEMNUM;
    END IF;

    IF PRV_ITEMNUM != ISSUERETURN_REC_T.ITEMNUM THEN

       REC_CNT_T2 :=0;
       SELECT COUNT(*) INTO REC_CNT_T2
       FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
       WHERE ITEMNUM=PRV_ITEMNUM
       AND   YEAR=YEAR_T
       AND   MONTH=MONTH_T
       AND   ORGID=ORGID_T
       AND   SITEID=SITEID_T;

       IF REC_CNT_T2=0  THEN

          INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
          (ITEMNUM,
           ISSUEUNITS,
           ISSUEVALUE,
           RETURNUNITS,
           RETURNVALUE,
           YEAR, MONTH,
           FISCAL_YEAR, ACCOUNTING_PERIOD,
               ORGID, SITEID,
           BEG_TOTALUNITS, BEG_TOTALVALUE,
           END_TOTALUNITS, END_TOTALVALUE, ITEMGROUP
            )
            VALUES
          (PRV_ITEMNUM,
           ISSUEUNITS_T,
           ISSUEVALUE_T,
           RETURNUNITS_T,
           RETURNVALUE_T,
           YEAR_T, MONTH_T, FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
               ORGID_T, SITEID_T,
           0, 0,
           0, 0, SUBSTR(PRV_ITEMNUM,1,2));
       ELSE
         UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
         SET ISSUEUNITS=ISSUEUNITS_T, ISSUEVALUE=ISSUEVALUE_T,
             RETURNUNITS=RETURNUNITS_T, RETURNVALUE=RETURNVALUE_T
         WHERE ITEMNUM=PRV_ITEMNUM
         AND   YEAR=YEAR_T
         AND   MONTH=MONTH_T
         AND   ORGID=ORGID_T
         AND   SITEID=SITEID_T;
       END IF;

       ISSUEUNITS_T :=0;
       ISSUEVALUE_T :=0;
       RETURNUNITS_T := 0;
       RETURNVALUE_T   := 0;
       PRV_ITEMNUM :=ISSUERETURN_REC_T.ITEMNUM;

    END IF;

    IF   ISSUERETURN_REC_T.ISSUETYPE='ISSUE'
     THEN
          ISSUEUNITS_T := ISSUEUNITS_T + ISSUERETURN_REC_T.QUANTITY;
          ISSUEVALUE_T := ISSUEVALUE_T + ISSUERETURN_REC_T.LINECOST;

    ELSIF ISSUERETURN_REC_T.ISSUETYPE='RETURN' THEN
          RETURNUNITS_T := RETURNUNITS_T + ISSUERETURN_REC_T.QUANTITY;
          RETURNVALUE_T := RETURNVALUE_T + ISSUERETURN_REC_T.LINECOST;
    END IF;

 END LOOP;

    -- LAST RECORD OF THE LOOP

    IF REC_CNT_T1 > 0 THEN

       REC_CNT_T2 :=0;
       SELECT COUNT(*) INTO REC_CNT_T2
       FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
       WHERE ITEMNUM=PRV_ITEMNUM
       AND   YEAR=YEAR_T
       AND   MONTH=MONTH_T
       AND   ORGID=ORGID_T
       AND   SITEID=SITEID_T;

       IF REC_CNT_T2=0  THEN

          INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
          (ITEMNUM,
           ISSUEUNITS,
           ISSUEVALUE,
           RETURNUNITS,
           RETURNVALUE,
           YEAR, MONTH,
           FISCAL_YEAR, ACCOUNTING_PERIOD,
               ORGID, SITEID,
           BEG_TOTALUNITS, BEG_TOTALVALUE,
           END_TOTALUNITS, END_TOTALVALUE, ITEMGROUP
            )
            VALUES
          (PRV_ITEMNUM,
           ISSUEUNITS_T,
           ISSUEVALUE_T,
           RETURNUNITS_T,
           RETURNVALUE_T,
           YEAR_T, MONTH_T, FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
               ORGID_T, SITEID_T,
           0, 0,
               0, 0, SUBSTR(PRV_ITEMNUM,1,2));
       ELSE
         UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
         SET ISSUEUNITS=ISSUEUNITS_T, ISSUEVALUE=ISSUEVALUE_T,
             RETURNUNITS=RETURNUNITS_T, RETURNVALUE=RETURNVALUE_T
         WHERE ITEMNUM=PRV_ITEMNUM
         AND   YEAR=YEAR_T
         AND   MONTH=MONTH_T
         AND   ORGID=ORGID_T
         AND   SITEID=SITEID_T;
       END IF;

   END IF;

-- START PROCESSING ITEM RECORDS FOR OVERAGES

FOR OVERAGE_REC_T IN  OVERAGE_CUR

 LOOP

    REC_CNT_T2 :=0;

    SELECT COUNT(*) INTO REC_CNT_T2
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE ITEMNUM=OVERAGE_REC_T.ITEMNUM
    AND   YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF REC_CNT_T2=0 THEN

        INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
        (ITEMNUM, OVERUNITS,
         OVERVALUE,
         YEAR, MONTH,
             FISCAL_YEAR, ACCOUNTING_PERIOD,
         ORGID, SITEID,
         BEG_TOTALUNITS, BEG_TOTALVALUE,
         END_TOTALUNITS, END_TOTALVALUE, ITEMGROUP
         )  VALUES
        (OVERAGE_REC_T.ITEMNUM, OVERAGE_REC_T.QUANTITY,
         OVERAGE_REC_T.LINECOST,
         YEAR_T, MONTH_T,FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
         ORGID_T,SITEID_T,
         0, 0,
         0, 0, SUBSTR(OVERAGE_REC_T.ITEMNUM,1,2) );
    ELSE
        UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
        SET OVERUNITS=OVERAGE_REC_T.QUANTITY,
        OVERVALUE=OVERAGE_REC_T.LINECOST
        WHERE ITEMNUM=OVERAGE_REC_T.ITEMNUM
         AND   YEAR=YEAR_T
         AND   MONTH=MONTH_T
         AND   ORGID=ORGID_T
         AND   SITEID=SITEID_T;
    END IF;

END LOOP;

-- START PROCESSING ITEM RECORDS FOR SHORTAGES

FOR SHORTAGE_REC_T IN  SHORTAGE_CUR

 LOOP

    REC_CNT_T2 :=0;

    SELECT COUNT(*) INTO REC_CNT_T2
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE ITEMNUM=SHORTAGE_REC_T.ITEMNUM
    AND   YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF REC_CNT_T2=0 THEN

        INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
        (ITEMNUM, SHORTUNITS,
         SHORTVALUE,
         YEAR, MONTH,
             FISCAL_YEAR, ACCOUNTING_PERIOD,
         ORGID, SITEID,
         BEG_TOTALUNITS, BEG_TOTALVALUE,
         END_TOTALUNITS, END_TOTALVALUE, ITEMGROUP
         )  VALUES
        (SHORTAGE_REC_T.ITEMNUM, SHORTAGE_REC_T.QUANTITY,
         SHORTAGE_REC_T.LINECOST,
         YEAR_T, MONTH_T,FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
         ORGID_T, SITEID_T,
         0, 0,
         0, 0, SUBSTR(SHORTAGE_REC_T.ITEMNUM,1,2) );
    ELSE
        UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
        SET SHORTUNITS=SHORTAGE_REC_T.QUANTITY,
        SHORTVALUE=SHORTAGE_REC_T.LINECOST
        WHERE ITEMNUM=SHORTAGE_REC_T.ITEMNUM
         AND   YEAR=YEAR_T
         AND   MONTH=MONTH_T
         AND   ORGID=ORGID_T
         AND   SITEID=SITEID_T;
    END IF;

END LOOP;

-- START PROCESSING BLANKET PO RECEIVALS

FOR BLANKETPO_REC_T IN  BLANKETPO_CUR

 LOOP

    REC_CNT_T2 :=0;

    SELECT COUNT(*) INTO REC_CNT_T2
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE ITEMNUM=BLANKETPO_REC_T.ITEMNUM
    AND   YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF REC_CNT_T2=0 THEN

        INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
        (ITEMNUM, BLANKETPOUNITS,
             BLANKETPOVALUE,
         YEAR, MONTH, FISCAL_YEAR, ACCOUNTING_PERIOD,
             ORGID, SITEID,
         BEG_TOTALUNITS, BEG_TOTALVALUE,
         END_TOTALUNITS, END_TOTALVALUE, ITEMGROUP)  VALUES
        (BLANKETPO_REC_T.ITEMNUM, BLANKETPO_REC_T.QUANTITY,
         BLANKETPO_REC_T.LINECOST,
         YEAR_T, MONTH_T, FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
             ORGID_T, SITEID_T,
         0, 0,
         0, 0, SUBSTR(BLANKETPO_REC_T.ITEMNUM,1,2) );
    ELSE
        UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
        SET BLANKETPOUNITS=BLANKETPO_REC_T.QUANTITY,
        BLANKETPOVALUE=BLANKETPO_REC_T .LINECOST
        WHERE ITEMNUM=BLANKETPO_REC_T.ITEMNUM
        AND   YEAR=YEAR_T
        AND   MONTH=MONTH_T
            AND   ORGID=ORGID_T
            AND   SITEID=SITEID_T;
    END IF;

END LOOP;

 -- START PROCESSING ITEM GROUP RECORDS FOR PPV ADJUSTMENTS

FOR PPVADJ_REC_T IN  PPVADJ_CUR

 LOOP

    REC_CNT_T2 :=0;

    SELECT COUNT(*) INTO REC_CNT_T2
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE ITEMNUM=PPVADJ_REC_T.ITEMNUM
    AND   YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF REC_CNT_T2 !=0 THEN
        UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
        SET PPVADJUNITS=PPVADJ_REC_T.PPVADJUNITS,
            PPVADJVALUE=PPVADJ_REC_T.PPVADJVALUE
        WHERE ITEMNUM=PPVADJ_REC_T.ITEMNUM
        AND   YEAR=YEAR_T
        AND   MONTH=MONTH_T
        AND   ORGID=ORGID_T
        AND   SITEID=SITEID_T;
    ELSE
        INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
        (ITEMNUM, BEG_TOTALUNITS, BEG_TOTALVALUE,
         PPVADJUNITS, PPVADJVALUE,
         END_TOTALUNITS, END_TOTALVALUE,
         YEAR, MONTH,
         FISCAL_YEAR, ACCOUNTING_PERIOD,
         ORGID, SITEID, ITEMGROUP) VALUES
         (PPVADJ_REC_T.ITEMNUM, 0, 0,
          PPVADJ_REC_T.PPVADJUNITS, PPVADJ_REC_T.PPVADJVALUE,
          0, 0,
          YEAR_T, MONTH_T,
          FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
          ORGID_T, SITEID_T, SUBSTR(PPVADJ_REC_T.ITEMNUM,1,2) );
     END IF;

END LOOP;


-- JIRA EF-3866
-- START PROCESSING CURRENT BALANCE ADJUSTMENTS

FOR CURBALADJ_REC IN  CURBALADJ_CUR

 LOOP

    REC_CNT_T2 :=0;

    SELECT COUNT(*) INTO REC_CNT_T2
    FROM BATCH_MAXIMO.LBL_ITEMSUMMARY
    WHERE ITEMNUM=CURBALADJ_REC.ITEMNUM
    AND   YEAR=YEAR_T
    AND   MONTH=MONTH_T
    AND   ORGID=ORGID_T
    AND   SITEID=SITEID_T;

    IF REC_CNT_T2 !=0 THEN
        UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
        SET CURBALADJUNITS=CURBALADJ_REC.CURBALADJ_QTY,
            CURBALADJVALUE=CURBALADJ_REC.CURBALADJ_VALUE
        WHERE ITEMNUM=CURBALADJ_REC.ITEMNUM
        AND   YEAR=YEAR_T
        AND   MONTH=MONTH_T
        AND   ORGID=ORGID_T
        AND   SITEID=SITEID_T;
    ELSE
        INSERT INTO BATCH_MAXIMO.LBL_ITEMSUMMARY
        (ITEMNUM, BEG_TOTALUNITS, BEG_TOTALVALUE,
         PPVADJUNITS, PPVADJVALUE,
         CURBALADJUNITS, CURBALADJVALUE,
         END_TOTALUNITS, END_TOTALVALUE,
         YEAR, MONTH,
         FISCAL_YEAR, ACCOUNTING_PERIOD,
         ORGID, SITEID, ITEMGROUP) VALUES
         (CURBALADJ_REC.ITEMNUM, 0, 0,
          0,0,
          CURBALADJ_REC.CURBALADJ_QTY,CURBALADJ_REC.CURBALADJ_VALUE,
          0, 0,
          YEAR_T, MONTH_T,
          FISCAL_YEAR_T, ACCOUNTING_PERIOD_T,
          ORGID_T, SITEID_T, SUBSTR(CURBALADJ_REC.ITEMNUM,1,2) );
     END IF;

END LOOP;



/* NOW FIND OUT ANY DIFFERENCE BETWEEN OPENING BALANCE +TRANSACTION AND CLOSING
   BALANCE UNITS/VALUE. IF FIND DIFFERENCE, BOOK IT IN INVTRANS TABLE */

FOR LBL_ITEMSUMMARY_REC IN LBL_ITEMSUMMARY_CUR

 LOOP

       OTHER_UNITS_T :=0;
       OTHER_VALUE_T :=0;

       CALC_UNITS_T  :=0;
       CALC_VALUE_T  :=0;

       POS_PPVADJUNITS :=0;
       NEG_PPVADJUNITS :=0;
       POS_PPVADJVALUE :=0;
       NEG_PPVADJVALUE :=0;

       IF NVL(LBL_ITEMSUMMARY_REC.PPVADJUNITS, 0) > 0 THEN
            POS_PPVADJUNITS :=NVL(LBL_ITEMSUMMARY_REC.PPVADJUNITS, 0);
       END IF;

       IF NVL(LBL_ITEMSUMMARY_REC.PPVADJUNITS, 0) < 0 THEN
            NEG_PPVADJUNITS :=ABS(NVL(LBL_ITEMSUMMARY_REC.PPVADJUNITS, 0));
       END IF;

       IF NVL(LBL_ITEMSUMMARY_REC.PPVADJVALUE, 0) > 0 THEN
            POS_PPVADJVALUE :=NVL(LBL_ITEMSUMMARY_REC.PPVADJVALUE, 0);
       END IF;

       IF NVL(LBL_ITEMSUMMARY_REC.PPVADJVALUE, 0) < 0 THEN
            NEG_PPVADJVALUE :=ABS(NVL(LBL_ITEMSUMMARY_REC.PPVADJVALUE, 0));
       END IF;

       CALC_UNITS_T  :=(( NVL(LBL_ITEMSUMMARY_REC.BEG_TOTALUNITS,0)
                         +   ABS(NVL(LBL_ITEMSUMMARY_REC.RECEIPTUNITS,0))
                         +   ABS(NVL(LBL_ITEMSUMMARY_REC.RETURNUNITS,0))
                         +   ABS(NVL(LBL_ITEMSUMMARY_REC.OVERUNITS, 0))
                         +   ABS(NVL(LBL_ITEMSUMMARY_REC.BLANKETPOUNITS,0))
                         +   POS_PPVADJUNITS ) + NVL(LBL_ITEMSUMMARY_REC.CURBALADJUNITS,0) -- JIRA EF-3866
                         -
                         (   ABS(NVL(LBL_ITEMSUMMARY_REC.ISSUEUNITS, 0))
                         +   ABS(NVL(LBL_ITEMSUMMARY_REC.SHORTUNITS,0))
                         +   NEG_PPVADJUNITS));

          IF (CALC_UNITS_T != NVL(LBL_ITEMSUMMARY_REC.END_TOTALUNITS,0))
           THEN
               OTHER_UNITS_T := NVL(LBL_ITEMSUMMARY_REC.END_TOTALUNITS,0) -  CALC_UNITS_T ;
           END IF;


          CALC_VALUE_T := ((NVL(LBL_ITEMSUMMARY_REC.BEG_TOTALVALUE, 0)
                               + ABS(NVL(LBL_ITEMSUMMARY_REC.RECEIPTVALUE, 0))
                               + ABS(NVL(LBL_ITEMSUMMARY_REC.RETURNVALUE,0))
                               + ABS(NVL(LBL_ITEMSUMMARY_REC.OVERVALUE, 0))
                               + ABS(NVL(LBL_ITEMSUMMARY_REC.BLANKETPOVALUE,0))
                               + POS_PPVADJVALUE ) + NVL(LBL_ITEMSUMMARY_REC.CURBALADJVALUE,0) -- JIRA EF-3866
                               -
                              (  ABS(NVL(LBL_ITEMSUMMARY_REC.ISSUEVALUE, 0)) +
                                 ABS(NVL(LBL_ITEMSUMMARY_REC.SHORTVALUE, 0)) +
                                 NEG_PPVADJVALUE)) ;

        IF (CALC_VALUE_T != NVL(LBL_ITEMSUMMARY_REC.END_TOTALVALUE,0))
           THEN
              OTHER_VALUE_T := NVL(LBL_ITEMSUMMARY_REC.END_TOTALVALUE,0) -
                               CALC_VALUE_T ;

        END IF;


        IF ((OTHER_UNITS_T !=0 ) OR  (OTHER_VALUE_T != 0) )
         THEN

          UPDATE BATCH_MAXIMO.LBL_ITEMSUMMARY
          SET OTHERADJUNITS=OTHER_UNITS_T, OTHERADJVALUE=OTHER_VALUE_T
          WHERE CURRENT OF LBL_ITEMSUMMARY_CUR;


          CURBAL_T1  :=0;
          PHYSCNT_T1 :=0;

          SELECT LOCATION, CURBAL, PHYSCNT, ITEMSETID
          INTO   STORELOC_T, CURBAL_T1, PHYSCNT_T1, ITEMSETID_T1
          FROM   MAXIMO.INVBALANCES
          WHERE ITEMNUM=LBL_ITEMSUMMARY_REC.ITEMNUM
          AND   LOCATION NOT IN ('LLNL','FLEET','NA','ITEMMASTER')
          AND   ORGID=LBL_ITEMSUMMARY_REC.ORGID
          AND   SITEID=LBL_ITEMSUMMARY_REC.SITEID
          AND   ROWNUM=1;

          -- INSERT INTO INVTRANS
          INSERT INTO MAXIMO.INVTRANS (ITEMNUM, STORELOC,
          TRANSDATE, TRANSTYPE, QUANTITY,
          CURBAL, PHYSCNT, OLDCOST, NEWCOST,
          ENTERBY, LINECOST, ORGID, SITEID,INVTRANSID,
          FINANCIALPERIOD,
          ITEMSETID, CONSIGNMENT)  -- MAXIMO 7.6
          VALUES (LBL_ITEMSUMMARY_REC.ITEMNUM, STORELOC_T,
           END_DT_T, 'ROUNDADJ', OTHER_UNITS_T,
           CURBAL_T1, PHYSCNT_T1, 0, 0,     -- PLACEHOLDERS
           'MAXIMO', OTHER_VALUE_T,
           LBL_ITEMSUMMARY_REC.ORGID, LBL_ITEMSUMMARY_REC.SITEID, MAXIMO.INVTRANSSEQ.NEXTVAL,
           FINANCIALPERIOD_T,
           ITEMSETID_T1, 0);
       END IF;

 END LOOP;        -- LOOP FOR LBL_ITEMSUMMARY_REC

END LOOP;   -- OUTER LOOP



 COMMIT;

END;

/

